{"version":3,"sources":["AlgoVisual/Layout/Header/Header.tsx","AlgoVisual/Layout/Footer/Footer.tsx","AlgoVisual/Layout/Main/Home/Home.tsx","AlgoVisual/Layout/Main/Documentation/Common/Markdown.tsx","AlgoVisual/Layout/Main/Documentation/Sections/Introduction/Introduction.tsx","AlgoVisual/Layout/Main/Documentation/Sections/Markdown/Markdown.ts","AlgoVisual/Layout/Main/Documentation/Common/Sections.tsx","AlgoVisual/Layout/Main/Documentation/Sections/DataStructures/DataStructures.tsx","AlgoVisual/Layout/Main/Documentation/Sections/Sorting/Sorting.tsx","AlgoVisual/Layout/Main/Documentation/Sections/Pathfinding/Pathfinding.tsx","AlgoVisual/Layout/Main/Documentation/Common/ScrollToTopOnNewPage.tsx","AlgoVisual/Layout/Main/Documentation/Common/NextSection.tsx","AlgoVisual/Layout/Main/Documentation/Common/MarkdownPage.tsx","AlgoVisual/Layout/Main/Documentation/Common/ScrollToTopButton.tsx","AlgoVisual/Layout/Main/Documentation/Layout/Documentation.tsx","AlgoVisual/Layout/Main/SortingVisualizer/Algorithms/BubbleSort.ts","AlgoVisual/Layout/Main/SortingVisualizer/Algorithms/MergeSort.ts","AlgoVisual/Layout/Main/SortingVisualizer/Algorithms/QuickSort.ts","AlgoVisual/Layout/Main/SortingVisualizer/Algorithms/HeapSort.ts","AlgoVisual/Layout/Main/SortingVisualizer/Algorithms/SelectionSort.ts","AlgoVisual/Layout/Main/Common/Styles.ts","AlgoVisual/Layout/Main/Common/AlgoButton.tsx","AlgoVisual/Layout/Main/Common/Settings/AlgoButtonSetting.tsx","AlgoVisual/Layout/Main/Common/Settings/AlgoSliderSetting.tsx","AlgoVisual/Layout/Main/SortingVisualizer/SortingVisualizer.tsx","AlgoVisual/Layout/Main/SortingVisualizer/Algorithms/InsertionSort.ts","AlgoVisual/Layout/Main/PathfindingVisualizer/Node/GridNode.tsx","AlgoVisual/Layout/Main/PathfindingVisualizer/Algorithms/IndexMinPQ.ts","AlgoVisual/Layout/Main/PathfindingVisualizer/Algorithms/DijkstraSP.ts","AlgoVisual/Layout/Main/PathfindingVisualizer/Algorithms/DFS.ts","AlgoVisual/Layout/Main/PathfindingVisualizer/Algorithms/BFS.ts","AlgoVisual/Layout/Main/PathfindingVisualizer/MazeGeneration/RecursiveDivision.ts","AlgoVisual/Layout/Main/PathfindingVisualizer/PathfindingVisualizer.tsx","AlgoVisual/App.tsx","Misc/reportWebVitals.ts","index.tsx"],"names":["Header","dropdownMenu","createRef","dropdownCaret","useState","showAlgosMenu","setShowAlgosMenu","useEffect","displayAlgosMenu","closeAlgosMenu","document","removeEventListener","current","style","display","transform","transition","id","to","className","onClick","e","stopPropagation","addEventListener","ref","Footer","href","target","Home","codeStyle","padding","margin","overflow","Markdown","props","markdown","children","remarkPlugins","remarkGfm","remarkBreaks","components","a","rel","em","startsWith","tex","String","substring","setting","code","inline","match","exec","replace","customStyle","themeStyle","showLineNumbers","language","PreTag","Introduction","section","borderLeft","backgroundColor","textDecoration","listStyle","listStyleType","fontSize","borderRadius","cursor","color","listBreakStyle","height","border","Sections","sections","directory","wrapperStyle","sectionHighlight","sectionsContainer","map","index","text","toLowerCase","length","width","DataStructures","Sorting","Pathfinding","withRouter","history","unlisten","listen","window","scrollTo","endSectionStyle","marginTop","nextSectionStyle","nextSectionTextStyle","marginLeft","NextSection","this","sectionName","React","Component","MarkdownPage","mainDirectory","partNumber","nextSection","nextSectionDirectory","nextSectionName","ScrollToTopButton","isVisible","setIsVisible","toggleVisibility","scrollY","top","behavior","dataStructuresSections","sortingSections","pathfindingSections","Documentation","gettingStartedSection","dataStructuresSection","sortingSection","pathfindingSection","exact","path","getBubbleSortAnimations","arr","animations","i","count","j","push","swap","bubbleSort","temp","getMergeSortAnimations","array","auxiliaryArray","slice","mergeSort","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","merge","getQuickSortAnimations","quickSort","l","h","swappedPivotIndex","pivotIndex","min","max","random","pivot","partition","getHeapSortAnimations","n","sink","heapSort","less","getSelectionSortAnimations","minIndex","selectionSort","enabledSliderStyle","boxShadow","bgcolor","disabledSliderStyle","disabledButtonStyle","enabledButtonStyle","AlgoButton","buttonText","disabled","buttonStyle","onMouseEnter","currentTarget","onMouseLeave","AlgoButtonSetting","settingDescription","AlgoSliderSetting","statusDescription","onChange","defaultValue","sliderStyle","Slider","sx","valueLabelDisplay","PRIMARY_COLOR","options","SortingVisualizer","dropdownSelection","setArr","numberOfBars","setNumberOfBars","sortingSpeed","setSortingSpeed","sortingAlgorithm","setSortingAlgorithm","showSortingOptions","setShowSortingOptions","optionsDisabled","setOptionsDisabled","dropdownStyle","setDropdownStyle","resetArray","changeWidthBasedOnSize","screenHeight","getElementById","clientHeight","headerHeight","footerHeight","containerHeight","maxBarHeight","changeBarsWidth","arrayBars","getElementsByClassName","displaySortingAlgorithms","closeSortingAlgorithms","sortingAnimations","animationLength","enableSettings","barOneIdx","barTwoIdx","barOne","barTwo","t","setTimeout","undefined","clearTimeout","newHeight","key","insertionSort","getInsertionSortAnimations","bars","value","idx","option","changeAlgorithm","GridNode","col","isFinish","isStart","isWall","onMouseDown","onMouseOver","onMouseUp","row","onTouchStart","onTouchMove","onTouchEnd","nodeID","IndexMinPQ","maxN","comparator","keys","pq","qp","swim","exch","console","log","greater","dijkstraSP","s","grid","gridDimensions","visitedNodes","weight","colSize","insert","getIndex","isEmpty","nodeIndex","delMin","minNode","Infinity","isVisited","neighbors","getNeighbors","relax","v","vIndex","contains","decreaseKey","unvisitedNeighbors","filter","neighbor","previousNode","dfsVisited","dfs","validVertex","unshift","recursiveDivision","walls","addOuterWalls","addInnerWalls","newGrid","minX","maxX","minY","maxY","y","randomNumber","hole","addHWall","x","addVWall","PathfindingVisualizer","setGrid","mouseIsPressed","setMouseIsPressed","rows","cols","algorithm","setAlgorithm","showAlgorithms","setShowAlgorithms","nodeStyle","setNodeStyle","setVisitedNodes","pathNodes","setPathNodes","pathfindingSpeed","clickedRun","setClickedRun","resizeGrid","getInitialGrid","root","ontouchmove","wallsGrid","changedTouches","element","elementFromPoint","clientX","clientY","classList","line","split","parseInt","onmousedown","preventDefault","onmouseup","stopImmediatePropagation","COLS","mainContentWidth","offsetWidth","dimension","displayAlgorithms","closeAlgorithmsDropdown","startNode","finishNode","pathForDFS","shortestPath","currentNode","dfsPath","animateVisited","queue","node","shift","bfsVisited","pathForBFS","bfsPath","getNewGridWithWallToggled","update","$set","handleMouseEnter","animatePath","clearGrid","startNodeID","finishNodeID","currentRow","createNode","nodes","handleMouseDown","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fa9df34b.chunk.js","sourcesContent":["import React, {createRef, useEffect, useState} from \"react\";\nimport \"./Header.css\";\nimport {Link} from \"react-router-dom\"\n\nfunction Header() {\n  const dropdownMenu = createRef<HTMLDivElement>();\n  const dropdownCaret = createRef<HTMLDivElement>();\n\n  const [showAlgosMenu, setShowAlgosMenu] = useState(false);\n\n  useEffect(() => {\n    displayAlgosMenu();\n  }, [showAlgosMenu]);\n\n  const openAlgosMenu = (e: React.MouseEvent) => {\n    // ensures that you close menu when clicked again\n    if (!showAlgosMenu) {\n      setShowAlgosMenu(true);\n      // not sure why this works but will figure out soon\n      // makes dropdown work magically!\n      e.stopPropagation();\n      document.addEventListener(\"click\", closeAlgosMenu);\n    }\n  }\n\n  const closeAlgosMenu = () => {\n    setShowAlgosMenu(false);\n    document.removeEventListener(\"click\", closeAlgosMenu)\n  }\n\n  const displayAlgosMenu = () => {\n    if (showAlgosMenu) {\n      dropdownMenu.current!.style.display = \"block\";\n      dropdownCaret.current!.style.transform = \"rotate(180deg)\";\n      dropdownCaret.current!.style.transition = \"all 300ms linear\";\n    } else {\n      dropdownMenu.current!.style.display = \"none\";\n      dropdownCaret.current!.style.transform = \"rotate(0deg)\";\n      dropdownCaret.current!.style.transition = \"all 300ms linear\";\n    }\n  }\n\n  return (\n    <header id={\"header\"}>\n      <div id={\"logo-wrapper\"}>\n        <Link to={\"/AlgoVisual\"}>\n          <p id={\"name\"}> AlgoVisual </p>\n        </Link>\n      </div>\n\n      <div id={\"nav-wrapper\"}>\n        <nav id={\"nav-bar\"}>\n          <ul>\n            <li>\n              <div className={\"nav-link\"}>\n                <div className={\"nav-option\"} onClick={openAlgosMenu}>\n                  <p className={\"noselect\"}> Algorithms </p>\n                  <i className=\"fas fa-caret-down\" ref={dropdownCaret}> </i>\n                </div>\n                <div id={\"dropdown\"} ref={dropdownMenu}>\n                  <ul>\n                    <li>\n                      <Link to={\"/AlgoVisual/sorting\"} className={\"nav-link\"}>\n                        <div className={\"algos-option\"}>\n                          <p> Sorting </p>\n                        </div>\n                      </Link>\n                    </li>\n\n                    <li>\n                      <Link to={\"/AlgoVisual/pathfinding\"} className={\"nav-link\"}>\n                        <div className={\"algos-option\"}>\n                          <p> Pathfinding </p>\n                        </div>\n                      </Link>\n                    </li>\n\n                    <li>\n                      <Link to={\"/AlgoVisual/datastructures\"} className={\"nav-link\"}>\n                        <div className={\"algos-option\"}>\n                          <p> Data Structures </p>\n                        </div>\n                      </Link>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </li>\n\n            <li>\n              <Link to={\"/AlgoVisual/documentation\"} className={\"nav-link\"}>\n                <div className={\"nav-option\"}>\n                  <p> Documentation </p>\n                </div>\n              </Link>\n            </li>\n\n            <li>\n              <Link to={\"/AlgoVisual/about\"} className={\"nav-link\"}>\n                <div className={\"nav-option\"}>\n                  <p> About </p>\n                </div>\n              </Link>\n            </li>\n          </ul>\n        </nav>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./Footer.css\";\n\nfunction Footer() {\n  return (\n    <footer id=\"footer\">\n      <p id={\"footer-header\"}> Connect with me through these platforms </p>\n      <div id=\"contact-wrapper\">\n        <ul>\n          <li>\n            <a href=\"https://github.com/eduardo-vidals\" target={\"_blank\"} className={\"social-link\"}>\n              <i className={\"fab fa-github\"}> </i>\n              <span className={\"social-text\"}> GitHub </span>\n            </a>\n          </li>\n\n          <li>\n            <a href=\"https://www.linkedin.com/in/eduardo-vidals\" target={\"blank\"} className={\"social-link\"}>\n              <i className={\"fab fa-linkedin-in\"}> </i>\n              <span className={\"social-text\"}> LinkedIn </span>\n            </a>\n          </li>\n\n          <li>\n            <a href=\"https://www.instagram.com/eddy_the_professionalpenguin\" target={\"blank\"}\n               className={\"social-link\"}>\n              <i className={\"fab fa-instagram\"}> </i>\n              <span className={\"social-text\"}> Instagram </span>\n            </a>\n          </li>\n\n          <li>\n            <a className={\"social-link\"}>\n              <i className={\"fab fa-discord\"}> </i>\n              <span className={\"social-text\"}> Discord </span>\n            </a>\n          </li>\n\n          <li>\n            <a className={\"social-link\"}>\n              <i className={\"fas fa-envelope\"}> </i>\n              <span className={\"social-text\"}> Email </span>\n            </a>\n          </li>\n        </ul>\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport \"./Home.css\";\nimport {Link} from \"react-router-dom\"\n\nfunction Home() {\n  return (\n    <div id={\"home-wrapper\"}>\n      <h1 id={\"home-header-text\"}> Visualizing made easy. </h1>\n      <p id={\"home-text\"}>\n        This is my first big project, please feel free to explore the beautiful visualization\n        of algorithms and data structures by clicking one of the buttons below.\n      </p>\n\n      <div id={\"buttons-menu\"}>\n        <Link to={\"/AlgoVisual/sorting\"}>\n          <div className={\"home-section\"}> Sorting Algorithms</div>\n        </Link>\n\n        <Link to={\"/AlgoVisual/pathfinding\"}>\n          <div className={\"home-section\"}> Pathfinding Algorithms</div>\n        </Link>\n\n\n        <Link to={\"/AlgoVisual/datastructures\"}>\n          <div className={\"home-section\"}> Data Structures</div>\n        </Link>\n      </div>\n    </div>\n  )\n}\n\nexport default Home;\n","import React from \"react\";\nimport remarkGfm from \"remark-gfm\";\nimport remarkBreaks from \"remark-breaks\";\nimport {Prism as SyntaxHighlighter} from \"react-syntax-highlighter\";\nimport themeStyle from \"react-syntax-highlighter/dist/esm/styles/prism/nord\";\nimport ReactMarkdown from \"react-markdown\";\nimport {MathComponent} from \"mathjax-react\";\n\ntype Props = {\n  markdown: string;\n};\n\nlet codeStyle = {\n  padding: \"10px 30px 10px 0px\",\n  margin: 0,\n  overflow: \"auto\"\n}\n\nfunction Markdown(props: Props) {\n  const {markdown} = props;\n  return (\n    <ReactMarkdown\n      children={markdown}\n      remarkPlugins={[[remarkGfm], [remarkBreaks]]}\n      components={{\n        a: ({...props}) => <a target={\"_blank\"} rel={\"noreferrer\"} {...props} />,\n        em: ({...props}) => {\n          if (props.children[0] && typeof props.children[0] === 'string' && props.children[0].startsWith('$')) {\n            return (<MathComponent tex={String(props.children[0].substring(1))}\n                                   display={false}\n                                   setting={{\"internalSpeechTitles\": true}}/>)\n\n          }\n          return <i {...props}/>\n        },\n        code({inline, className, children, ...props}) {\n          const match = /language-(\\w+)/.exec(className || \"\");\n          return !inline && match ? (\n            <SyntaxHighlighter\n              children={String(children).replace(/\\n$/, \"\")}\n              customStyle={codeStyle}\n              style={themeStyle}\n              showLineNumbers={true}\n              language={match[1]}\n              PreTag=\"div\"\n            />\n          ) : (\n            <code className={className} {...props}>\n              {children}\n            </code>\n          );\n        },\n\n      }}\n    />\n  );\n}\n\nexport default Markdown;\n","import React, {useEffect} from \"react\";\nimport {introductionMarkdown} from \"../Markdown/Markdown\";\nimport Markdown from \"../../Common/Markdown\";\n\ntype Props = {\n  section: React.RefObject<HTMLDivElement>\n};\ntype State = {};\n\nfunction Introduction(props: Props) {\n  const {section} = props;\n\n  useEffect(() => {\n    section.current!.style.borderLeft = \"10px white solid\";\n    section.current!.style.backgroundColor = \"#29354b\";\n    return () => {\n      if (section.current){\n        section.current!.style.borderLeft = \"none\";\n        section.current!.style.backgroundColor = \"inherit\";\n      }\n    }\n  }, [])\n\n  return (\n    <div className={\"documentation-wrapper\"}>\n      <div className={\"documentation\"}>\n        <div className={\"markdown\"}>\n          <Markdown markdown={introductionMarkdown}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\nexport default Introduction;\n","export let introductionMarkdown = `\n# Introduction \nThis part of the page will go over the implementations of the algorithms and data structures that are implemented throughout the site.\n\n- Before starting, this documentation page assumes that you have a good understanding of the Java programming language. \n- An explanation of the data structures and algorithms will be provided in their respective sections. \n \n## Inspiration & Credits\n- This project was largely inspired by Clément Mihailescu's sorting and pathfinding visualizer.\n- The algorithm and data structure implementations are inspired by the Coursera algorithm courses offered by Princeton University under Robert Sedgewick & Kevin Wayne. \n- Thanks to freeCodeCamp for the wonderful projects offered within their course which helped me build a solid foundation of the React framework. \n\n## Respective Links\n- [Clément Mihailescu's Sorting Visualizer](https://github.com/clementmihailescu/Sorting-Visualizer)\n- [Clément Mihailescu's Pathfinding Visualizer](https://github.com/clementmihailescu/Pathfinding-Visualizer)\n- [Algorithms Part I by Robert Sedgewick & Kevin Wayne](https://www.coursera.org/learn/algorithms-part1)\n- [Algorithms Part II by Robert Sedgewick & Kevin Wayne](https://www.coursera.org/learn/algorithms-part2)\n- [Front End Development Libraries by freeCodeCamp](https://www.freecodecamp.org/learn/front-end-development-libraries)\n`\n\n// data structures markdown\nexport let datastructuresMarkdown = `\n# Data Structures\nThis part of the page will go over the many relevant data strucures that are implemented throughout the site. \n`\n\nexport let timeComplexityMarkdown = `\n# Time Complexity\nThis section will go over time complexity.\n\n## Brief Explanation\nTime complexity can be defined as the **asymptomatic** behavior of the graph. In simpler terms, as the size of the function gets progressively larger, we can put functions in the same asymptomatic category. For example, let's say we have the following functions: *$f(x) = 100n* and *$g(x) = n*. As *$n* gets larger, both functions become categorized under the same asymptomatic bound because the difference becomes negligible as *$n* gets larger. \n\n## Big-O Notation\nTo categorize the asymptomatic bound of an algorithm, we use Big-O notation. For example, Bubble Sort has a **worst-case** of *$O(n^2)*, which is pronounced as \"Big O of *$n^2*.\" This algorithm will be explained in the sorting section of the documentation page.  \n\n## Graph Representation\nHere is a representation of the asymptomatic bounds used when regarding data structures and algorithms. \n![Time Complexity Graph](https://he-s3.s3.amazonaws.com/media/uploads/ece920b.png)\n\n## Importance\nTime complexity is an important concept to grasp right away, as we will be analyzing the time complexity of the data structures and algorithms that will be implemented throughout the site. Click below to go to the next section. \n`\n\nexport let binarySearchTreesMarkdown = `\n# Binary Search Trees\n`\n\nexport let analysisOfDataStructuresMarkdown = `\n# Analysis of Data Structures\n`\n\nexport let arraylistMarkdown = `\n# ArrayList in Java\nThis section will go over a simple implementation of an ArrayList.\n\n## Arrays\nAs a reminder, keep in mind that arrays have a limited size in the amount of data they can hold. However, in an ArrayList we are able to manipulate arrays in such a way that allows us to insert and remove elements without having to worry about a limited size. \n\n## ArrayList Implementation\nKeeping the last section in mind, let's initialize our instance variables for our ArrayList. We will be using generics for our implementation to easily apply our ArrayList across all objects. \n\n\\`\\`\\`java\npublic class ArrayList<E> implements Iterable<E> {\n    private static final int INIT_CAPACITY = 8; // initial capacity of array\n    private E[] arr; \n    private int n; // size of array\n    \n    public ArrayList(){\n        arr = (E[]) new Object[INIT_CAPACITY]; // generic array \n        n = 0;\n    }\n}\n\\`\\`\\`\n\n### Relevant Methods\nFirst, let's implement the straightforward methods of a list.\n\\`\\`\\`java\npublic boolean isEmpty() {\n    return n == 0;\n}\n\npublic int size() {\n    return n;\n}\n\\`\\`\\`\n\n### Helper Method (Resizing Array)\nLet's now implement our first relevant helper method for an ArrayList. We will need a resize method that will use an array with a new capacity and copies all values from the old array into this new array with an updated capacity. \n\n\\`\\`\\`java\nprivate void resize(int capacity) {\n    E[] copy = (E[]) new Object[capacity];\n    for (int i = 0; i < n; i++){\n        copy[i]= arr[i];\n    }\n    arr = copy;\n}\n\\`\\`\\`\n\n### Instance Methods\nWith the help of the previous helper method, we are now able to implement our add and remove methods. \n\n\\`\\`\\`java\npublic void add(E item){\n    // resize once we reach max capacity\n    if (n == arr.length) {\n        // resizing by 2x ensures we don't resize too frequently and don't allocate too much memory\n        resize(arr.length * 2);\n    }\n    arr[n++] = item;\n}\n\npublic E remove(int index){\n    E removed = arr[index];\n    int numMoved = n - index - i; // numOfNumbers that need to be moved\n    System.arraycopy(arr, index + 1, arr, index, numMoved); // shifts elements to left by 1\n    arr[n--] = null; // decrement size and ensure last arr value is null \n    \n    // resize to ensure you don't allocate too much memory when you have a few amount of elements\n    if (n > 0 && n == arr.length / 4){\n        resize(arr.length / 2);\n    }\n    return removed;\n}\n\\`\\`\\`\n\n### Iterator\nAs a reminder, remember to implement the Iterator interface and implement the following methods: \n- hasNext()\n    - returns true or false depending on whether there is a next element\n- next()\n    - returns the next element in the iterator\n- remove()\n    - allows you to remove elements while traversing\n\nWe will implement an iterator to allow users to remove elements while the list is being traversed. Iterators also allow you to use the for-each syntax for easier traversal. \n\n\\`\\`\\`java\npublic Iterator<E> iterator() {\n    return new ListIterator();\n}\n\nprivate class ListIterator implements Iterator<E> {\n    private int i; // current index\n    \n    @Override\n    public boolean hasNext(){\n        return i < n;\n    }\n    \n    @Override\n    public E next(){\n        if (!hasNext()){\n            throw new NoSuchElementException();\n        }\n        return copy[i++];\n    }\n    \n    @Override \n    public void remove() {\n        if (i == 0) {\n            throw new IllegalStateException();\n        }\n        ArrayList.this.remove(--i);\n    }\n}\n\\`\\`\\`\n\n\n## Visualizer\n...And that's it! Our implementation of ArrayList should be working just fine. Remember, there is also a simple visualization tool of how the array operates in an ArrayList. Click the button below to check out the visualizer!\n`\n\nexport let linkedlistMarkdown = `\n# LinkedList in Java\nThis section will go over a simple implementation of ArrayList.\n\n## Objects & Classes\nThere is sometimes confusion when linked lists are introduced due to not understanding the concept of objects and classes. Therefore, it is important that you understand the idea of having a **inner** class within a class. The idea of a Linked List is that an inner class can essentially act as a *pointer* that keeps track of **previous** and **next** nodes. This idea is explained in the image below. \n\n[TO DO IMAGE]\n\n## LinkedList Implementation\nKeeping the logic of the last section in mind, we can now initialize the barebones logic of a LinkedList. We will be using generics for our implementation to easily apply our LinkedList across all objects.\n\n\\`\\`\\`java\npublic class LinkedList<E> implements Iterable<E> {\n    private Node head; // first element in list\n    private Node tail; // last element in list\n    private int n; // size of arr\n    \n    private class Node {\n        Node next; // represents the node next to this current node\n        Node prev; // represents the node prev to this current node\n        E data; // represents the data within the current node\n        \n        public Node(E data){\n            this.data = data;\n        }\n    }     \n}\n\\`\\`\\`\n\nThe code above is the barebones logic of a **doubly-linked list.** It will have **two** pointers, one pointer to the previous element and one pointer to the next element. A **singly-linked list** only has **one** pointer that points to the next element. We will be implementing a doubly-linked list as it is more efficient and it'll be easier to understand a singly-linked list after implementing a doubly-linked list.\n\n### Relevant Methods\nFirst, let's implement the straightforward methods of a list.\n\\`\\`\\`java\npublic int size(){ \n    return n;\n}\n\npublic boolean isEmpty(){\n    return n == 0;\n}\n\\`\\`\\`\n\n\n### Stacks (LIFO)\nLet's introduce the concept of a **stack** as it serves as an important concept in computer science. A **stack** data structure works as **Last In, First Out (LIFO).** An analogy for this data structure is to imagine a pile of pancakes. Which pancake is the first one to be removed? The last pancake that was put into the pile will most likely result in it being the first one removed. This concept is easily explained by the image below.\n\n[TO DO IMAGE]\n\nWe can now implement the relevant methods of a LinkedList that serve the purpose of a **stack** data structure. We will name the methods **addLast()** and **removeLast()**, but these methods can also be represented as **push()** and **pop().**\n\n\\`\\`\\`java\npublic void addLast(E data){\n    // save the \"oldTail\" in a temp variable (as this will become the old tail)\n    Node oldTail = tail;\n    // initialize new tail with new data, prev Node will always be the oldTail\n    tail = new Node(data);\n    tail.prev = oldTail;\n    // when we first add into our list, the head will be equal to the tail\n    if(isEmpty()){\n        head = tail;\n    } \n    // after that, the next value of the old tail will be the current tail\n    else {\n        oldTail.next = tail;\n    }\n    n++;\n}\n\npublic E removeLast(){\n    // throw an exception if element is being removed when list is empty\n    if (isEmpty()) {\n        throw new NoSuchElementException();\n    }  \n    // make a variable for the old tail so we can return the data when the element is removed\n    Node oldTail = tail;\n    // make new tail be equal to the prev node of the tail\n    // then make the next value null for garbage collection\n    if (size() > 1){\n        tail = tail.prev;\n        tail.next = null;  \n    }\n    // this essentially means the list is empty so make both values null\n    else {\n        head = null;\n        tail = null;\n    }\n    n--;\n    return oldTail.data;\n}\n\\`\\`\\`\n\n### Queues (LIFO)\nLet's introduce the concept of a **queue** as it serves as an important concept in computer science. A **queue** data structure works as **First In, First Out (FIFO).** An analogy for a queue is to imagine being the first person in line for Subway, eventually, you will be the first one out of line and will go about your day and enjoy your subway sandwich! This concept is easily explained by the image below. \n\n[TO DO IMAGE]\n\nWe can now implement the relevant methods of a LinkedList that serve the purpose of a **queue** data structure. We will name the methods **addFirst()** and **removeFirst()**, but these methods can also be represented as **enqueue()** and **dequeue().**\n\n\\`\\`\\`java\npublic void addFirst(E data){\n    // save the \"oldHead\" in a temp variable (as this will become the old head)\n    Node oldHead = head;\n    // initialize new head with new data, next Node will always be the oldHead\n    head = new Node(data);\n    head.next = oldHead;\n    // when we first add into our list, the tail will be equal to the head\n    if (isEmpty()){\n        tail = head;\n    } \n    // after that, the prev value of the old head will be the current head\n    else {\n        oldHead.prev = head;\n    }\n    n++;\n}\n\npublic E removeFirst(){\n    // throw an exception if element is being removed when list is empty\n    if (isEmpty()) {\n        throw new NoSuchElementException();\n    } \n    // make a variable for the old head so we can return the data when the element is removed\n    Node oldHead = head;\n    // make new head be equal to the next node of the head\n    // then make the prev value null for garbage collection\n    if (size() > 1){\n        head = head.next;\n        head.prev = null;\n    } \n    // this essentially means the list is empty so make both values null\n    else {\n        head = null;\n        tail = null;\n    }\n    n--;\n    return oldHead.data;\n}\n\\`\\`\\`\n\n### Deque\nA **deque** is simply a combination of a stack and queue data structure. As a result, our LinkedList can be defined as deque data structure as it supports the operations of a stack and queue data structure.\n\n### Iterator\nLet's now implement an iterator for our LinkedList.\n\\`\\`\\`java\npublic Iterator<E> iterator() {\n    return new LinkedIterator();\n}\n\nprivate class LinkedIterator implements Iterator<E> {\n    // keep track of current and lastAccessed nodes\n    private Node current = head;\n    private Node lastAccessed = null;\n\n    @Override\n    public boolean hasNext() {\n        return current != null;\n    }\n\n    @Override\n    public E next() {\n        if (!hasNext()) {\n            throw new NoSuchElementException();\n        }\n        // update lastAccessed node since it will be used to remove the lastAccessed element\n        // since the current element always updates when next() is called, thus it cannot\n        // be used within remove()\n        lastAccessed = current;\n        E data = current.data;\n        current = current.next;\n        return data;\n    }\n\n    @Override\n    public void remove() {\n        if (lastAccessed == null) {\n            throw new IllegalStateException();\n        }\n        if (lastAccessed == head) {\n            LinkedList.this.removeFirst();\n        } else if (lastAccessed == tail) {\n            LinkedList.this.removeLast();\n        } \n        // update the prev and next pointers of the lastAccessed node\n        // make the lastAccessed node null for garbage collection\n        else {\n            Node prev = lastAccessed.prev;\n            Node next = lastAccessed.next;\n            prev.next = next;\n            next.prev = prev;\n            n--;\n            lastAccessed = null;\n        }\n    }        \n}\n\\`\\`\\`\n\nThe **remove()** method might be a bit hard to understand so images will be provided for each case.\n\n[TO DO IMAGE] (removeFirst)\n[TO DO IMAGE] (removeLast)\n[TO DO IMAGE] (otherCases)\n\n## Visualizer\n...And that's it! Our implementation of a LinkedList should be working just fine. Remember, there is also a visualization tool of how the pointers operate in a LinkedList. Click the button below to check out the visualizer!\n`\n\nexport let pqMarkdown = `\n# Priority Queues\nThis section will go over **two** implementations of a priority queue.\n\n## Terminology\nThe following image will show an example of a **complete binary tree**, which is just a tree that has all levels filled except possibly the last one. In a **heap** data structure, the structure is that of a complete binary tree. To accomplish this, we use an **array** and position the elements in such a way that the element with the **highest** priority is **always** on top. A **priority queue** uses a **heap** to **add** and **remove** elements into the heap. Our implementation of a heap will start at index 1.\n![Complete Binary Tree](https://algs4.cs.princeton.edu/24pq/images/heap-representations.png)\n\n Image credits go to Robert Sedgewick & Kevin Wayne. Images can be obtained via their algorithms textbook [website.](https://algs4.cs.princeton.edu/24pq/)\n \n To move down in the tree, we use the following:\n - Node: *$k*\n - Left Child: *$2 * k*\n - Right Child: *$2 * k + 1*\n    \n To move up in the tree, we use the following:\n - Node: *$k*\n - Parent: *$k \\\\div 2*\n \n## Priority Queue Implementation\nKeeping the last section in mind, we will use a **heap** data structure to implement our priority queue such that elements with minimum values have the highest priority. We will be implementing the barebones logic of a priority queue. \n\\`\\`\\`java\n/*\n* Original authors:\n* @author Robert Sedgewick\n* @author Kevin Wayne\n*\n* Code can be obtained via their algorithms textbook website.\n* Website: https://algs4.cs.princeton.edu/24pq/\n*/\npublic class MinPQ<E> implements Iterable<E> {\n    private E[] pq; // heap data structure\n    private int n; // size of heap\n    \n    public MinPQ(int size){\n        pq = (E[]) new Object[size + 1];\n        n = 0;\n    }\n    \n    public MinPQ(){\n        this(1);\n    }\n}\n\\`\\`\\`\n\n### Relevant Methods\nFirst, let's implement the straightforward methods of our priority queue.\n\\`\\`\\`java\npublic boolean isEmpty() {\n    return n == 0;\n}\n\npublic int size() {\n    return n;\n}\n\\`\\`\\`\n\n### Helper Methods\nWe will use the following helper methods for our priority queue.\n\\`\\`\\`java\nprivate void resize(int capacity) {\n    E[] temp = (E[]) new Object[capacity];\n    for (int i = 1; i <= n; i++) {\n        temp[i] = pq[i];\n    }\n    pq = temp;\n}\n\nprivate boolean greater(int i, int j) {\n    return ((Comparable<E>) pq[i]).compareTo(pq[j]) > 0;\n}\n\nprivate void exch(int i, int j) {\n    E swap = pq[i];\n    pq[i] = pq[j];\n    pq[j] = swap;\n}\n\\`\\`\\`\n\n### Heap Helper Methods\nWe will go over two important methods regarding heaps, **swim()** and **sink().** \n\\`\\`\\`java\n// ensures the heap order is not violated when a node is greater than its parent\nprivate void swim(int k) {\n    // keep looping when a node is an index above the root\n    // and when its parent is greater in value\n    while (k > 1 && greater(k/2, k)) {\n        exch(k, k/2); // exch node with parent\n        k = k/2; // update to new node index for the loop\n    }\n}\n\n// ensures the heap order is not violated when a node is less than its children\nprivate void sink(int k) {\n    while (2*k <= n) {\n        int j = 2*k; // left child\n        // use right child if it's less than left child\n        if (j < n && greater(j, j+1)) j++;\n        // end loop if the node is less than the child\n        if (!greater(k, j)) break;\n        exch(k, j); // otherwise exchange the node and child \n        k = j; // update to new node index for the loop\n    }\n}\n\\`\\`\\`\n\n### Instance Methods\nWe can now easily implement the **insert()** and **delMin()** operations for our priority queue.\n\\`\\`\\`java\n// we insert at the end of the heap and keep our heap order by using swim()\npublic void insert(E item){\n    // double size of array if necessary\n    if (n == pq.length - 1) resize(2 * pq.length);\n    pq[++n] = item; // adds new item to heap\n    swim(n); // swim up to maintain heap order\n}\n\n// we first swap the root with the last element in the heap while also decreasing\n// the size of our heap and keep our heap order by using sink()\npublic E delMin() {\n    if (isEmpty()) throw new NoSuchElementException();\n    E min = pq[1]; // min starts at index 1\n    exch(1, n--); // swap index 1 with last element in the heap\n    sink(1); // sink down to maintain heap order\n    pq[n+1] = null; // to avoid loitering and help with garbage collection\n    // resize if size of array is too big for the number of elements it has\n    if ((n > 0) && (n == (pq.length - 1) / 4)) resize(pq.length / 2);\n    return min;\n}\n\\`\\`\\`\n\n### Iterator\nLet's now implement an iterator for our priority queue.\n\\`\\`\\`java\npublic Iterator<E> iterator() {\n    return new HeapIterator();\n}\n\nprivate class HeapIterator implements Iterator<E> {\n    // create a new pq\n    private MinPQ<E> copy;\n    // add all items to copy of heap\n    // takes linear time since already in heap order so no keys move\n    public HeapIterator() {\n        copy = new MinPQ<E>(size());\n        for (int i = 1; i <= n; i++) {\n            copy.insert(pq[i]);\n        }\n    }\n\n    public boolean hasNext() { \n        return !copy.isEmpty();            \n    }\n\n    public Key next() {\n        if (!hasNext()) throw new NoSuchElementException();\n        return copy.delMin();\n    }\n    \n    public void remove() { \n        throw new UnsupportedOperationException();\n    }\n}\n\\`\\`\\`\n\n## Indexed Priority Queue Implementation\nThis version of a priority queue will support indexing in such a way that we can **retrieve** the values within our heap with a **unique** index key. In a way, this can be thought of as a map. This will be an important data structure when algorithms such as Prim's and Dijkstra's are introduced in the pathfinding sections of this website. We will now be implementing the barebones logic of an indexed priority queue.\n\\`\\`\\`java\n/*\n* Original authors:\n* @author Robert Sedgewick\n* @author Kevin Wayne\n*\n* Code can be obtained via their algorithms textbook website.\n* Website: https://algs4.cs.princeton.edu/24pq/\n*/\npublic class IndexMinPQ<E extends Comparable<E> implements Iterable<Integer> {\n    private int n; // size of PQ\n    private int maxN; // max size for PQ\n    private E[] keys; // keys assigned a unique index from [0, maxN)\n    private int[] pq; // gets the index a key is associated with in heap position i \n    private int[] qp; // heap position of a key with index i (inverse of pq)\n    \n    // initialize instance variables\n    public IndexMinPQ(int maxN) {\n        if (maxN < 0) throw new IllegalArgumentException();\n        this.maxN = maxN;\n        n = 0;\n        keys = (Key[]) new Comparable[maxN + 1];\n        qp   = new int[maxN + 1];\n        pq   = new int[maxN + 1];\n        // initialize arrays to -1 as there are no heap or key indexes\n        for (int i = 0; i <= maxN; i++){\n            pq[i] = -1;\n            qp[i] = -1;\n        }\n    }\n}\n\\`\\`\\`\n\n### Relevant Methods\nFirst, let's implement the straightforward methods of our priority queue.\n\\`\\`\\`java\npublic boolean isEmpty() {\n    return n == 0;\n}\n\npublic int size() {\n    return n;\n}\n\npublic boolean contains(int i) {\n    validateIndex(i);\n    return qp[i] != -1;\n}\n\\`\\`\\`\n\n\n\n### Helper Methods\nWe will define the following helper methods for our indexed priority queue.\n\\`\\`\\`java\n// used to validate the index is within the bounds [0, maxN)\nprivate void validateIndex(int i) {\n    if (i < 0) throw new IllegalArgumentException();\n    if (i >= maxN) throw new IllegalArgumentException();\n}\n\n// uses pq[i] to get key index and uses it in keys[] to get key\nprivate boolean greater(int i, int j) {\n    return keys[pq[i]].compareTo(keys[pq[j]]) > 0;\n}\n\n// exchanges values from pq (swaps key index values)\nprivate void exch(int i, int j) {\n    // swap key index values\n    int swap = pq[i];\n    pq[i] = pq[j];\n    pq[j] = swap;\n    // once we swap, update to reversed values\n    qp[pq[i]] = i;\n    qp[pq[j]] = j;\n}\n\\`\\`\\`\n\n### Heap Helper Methods\nThe **swim()** and **sink()** methods will stay the same, but it is important to notice that it uses the updated version of **exch().**\n\\`\\`\\`java\nprivate void swim(int k) {\n    while (k > 1 && greater(k/2, k)) {\n        exch(k, k/2);\n        k = k/2;\n    }\n}\n\nprivate void sink(int k) {\n    while (2*k <= n) {\n        int j = 2*k;\n        if (j < n && greater(j, j+1)) j++;\n        if (!greater(k, j)) break;\n        exch(k, j);\n        k = j;\n    }\n}\n\\`\\`\\`\n\n### Instance Methods\nWe will update our implementation of **insert()** and **deleteMin().** We will also add a new method **decreaseKey()** which will be used in several algorithms we use in future sections.\n\\`\\`\\`java\n// inserts a key with a unique index\npublic void insert(int i, Key key) {\n    validateIndex(i);\n    if (contains(i)) throw new IllegalArgumentException();\n    n++;\n    pq[n] = i; // remember, pq stores key indexes\n    qp[i] = n; // qp is the reverse\n    keys[i] = key; // store key in keys array\n    swim(n); // swim up to maintain heap order\n}\n\n// deletes min element in the PQ\npublic int delMin() {\n    if (n == 0) throw new NoSuchElementException();\n    int min = pq[1]; // min starts at index 1 (uses key index)\n    exch(1, n--); // swap index 1 with last element in the heap\n    sink(1); // sink down to maintain heap order\n    keys[min] = null; // to help with garbage collection\n    qp[min] = -1; // key index is not used, so replace heap index to -1\n    pq[n+1] = -1; // last heap index is not used, so replace key index to -1\n    return min;\n}\n\n// takes in key index and replaces it with a lower key value\npublic void decreaseKey(int i, Key key) {\n    validateIndex(i);\n    if (!contains(i)) throw new NoSuchElementException();\n    if (keys[i].compareTo(key) == 0) throw new IllegalArgumentException();\n    if (keys[i].compareTo(key) < 0) throw new IllegalArgumentException();\n    keys[i] = key; // update key to lower value\n    swim(qp[i]); // swim up to maintain heap order (qp stores heap indexes)\n}\n\\`\\`\\`\n\n### Iterator\nLet's now implement an iterator for our indexed priority queue.\n\\`\\`\\`java\npublic Iterator<Integer> iterator() { \n    return new HeapIterator();\n}\n\nprivate class HeapIterator implements Iterator<Integer> {\n    // create a new pq\n    private IndexMinPQ<Key> copy;\n\n    // add all elements to copy of heap\n    // takes linear time since already in heap order so no keys move\n    public HeapIterator() {\n        copy = new IndexMinPQ<Key>(pq.length - 1);\n        for (int i = 1; i <= n; i++) {\n            copy.insert(pq[i], keys[pq[i]]);\n        }\n    }\n\n    public boolean hasNext()  { \n        return !copy.isEmpty();        \n    }\n    \n    public Integer next() {\n        if (!hasNext()) throw new NoSuchElementException();\n        return copy.delMin();\n    }\n    \n    public void remove() { \n        throw new UnsupportedOperationException();\n    }\n}\n\\`\\`\\`\n\n## Visualizer\n...And that's it! Our implementation of a Priority Queue & Indexed Priority Queue should be working just fine. Remember, there is also a visualization tool for visualizing a graph and digraph! Click the button below to check out the visualizer!\n`\n\n// sorting markdown\nexport let sortingMarkdown = `\n# Sorting Algorithms\nThis part of the page will go over the many relevant sorting algorithms that are implemented throughout the site. \n`\n\nexport let bubbleSortMarkdown = `\n# Bubble Sort\nThis section will go over an implementation of Bubble Sort.\n\n## Bubble Sort Implementation\nWe will be using generics for our implementation to easily apply our sorting algorithm across all types of arrays.\n\n### Rationale\nThe basis of Bubble Sort is to swap elements if the current element is greater than the element ahead.\n\n### Helper Method\nWe will be using the following **swap()** helper method to swap values from the array.\n\\`\\`\\`java\nprivate static <E> void swap(E[] arr, int i, int j){\n    E temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n\\`\\`\\`\n\n### Sorting Algorithm\nThis is the setup used for Bubble Sort.\n\n\\`\\`\\`java\n// <E extends Comparable> just means that E (the data type of the array) must\n// implement the Comparable interface, <? super E> means that E itself or the\n// super class can implement Comparable\npublic static <E extends Comparable<? super E>> void sort(E[] arr) {\n    for (int i = 0; i < arr.length - 1; i++) {\n        for (int j = 0; j < arr.length - 1 - i; j++) {\n            // compare elements from indices j and j + 1, swap if j > j + 1\n            if (arr[j].compareTo(arr[j + 1]) > 0){\n                swap(arr, j, j + 1);\n            }\n        }\n    }\n}\n\\`\\`\\`\n\n## Time Complexity (Analysis)\nBubble Sort is a **stable** sorting algorithm but it is often regarded as the **worst** sorting algorithm.\n- The best case can be *$O(n)*, but this implementation has a best case of *$O(n^2)*\n- The average case is *$O(n^2)*\n- The worst case is *$O(n^2)*\n\n\n## Visualizer\n...And that's it! Our implementation of Bubble Sort should be working just fine. Remember, there is also a simple visualization tool for sorting algorithms. Click the button below to check out the visualizer!\n`\n\nexport let insertionSortMarkdown = `\n# Insertion Sort\nThis section will go over an implementation of Insertion Sort.\n\n## Insertion Sort Implementation \nWe will be using generics for our implementation to easily apply our sorting algorithm across all types of arrays.\n\n### Rationale\nThe basis of Insertion Sort is to swap until there isn't an element greater than the key. This process starts with index one as the key and progressively increments until the array is fully sorted.\n\n### Sorting Algorithm\nThis is the setup used for Selection Sort.\n\\`\\`\\`java\npublic static void <E extends Comparable<? super E>> sort(E[] arr){\n    for (int i = 1; i < arr.length; i++){\n        // keep track of the key for the last swap\n        T key = arr[i];\n        // starting index will always be one below i\n        int j = i - 1;\n        // if the val to the left is bigger, then replace it\n        while(j >= 0 && arr[j].compareTo(key) > 0){\n            arr[j + 1] = arr[j];\n            j--;\n        }\n        // we can replace arr[j + 1] with the key since that is the last swap we need to do\n        arr[j + 1] = key;\n    }\n}\n\\`\\`\\`\n\n## Time Complexity (Analysis)\nInsertion Sort is a **stable** sorting algorithm and better than Bubble Sort. However, the worst case is still *$O(n^2)*\n- The best case is *$O(n)*\n- The average case is *$O(n^2)*\n- The worst case is *$O(n^2)*\n\n## Visualizer\n...And that's it! Our implementation of Bubble Sort should be working just fine. Remember, there is also a simple visualization tool for sorting algorithms. Click the button below to check out the visualizer!\n`\n\nexport let selectionSortMarkdown = `\n# Selection Sort\nThis section will go over an implementation of Selection Sort.\n\n## Selection Sort Implementation\nWe will be using generics for our implementation to easily apply our sorting algorithm across all types of arrays.\n\n### Rationale\nThe basis of Selection Sort is to find the minimum element in the array and replace it with the current index of the outer loop. The inner loop start index increments after each iteration in the outer loop. (This allows us to ignore already sorted elements.)\n\n### Helper Method\nWe will be using the following **swap()** helper method to swap values from the array.\n\\`\\`\\`java\npublic static <E> void swap(E[] arr, int i, int j){\n    E temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n\\`\\`\\`\n\n### Sorting Algorithm\nThis is the setup used for Selection Sort. \n\n\\`\\`\\`java\npublic static <E extends Comparable<? super E> sort(E[] arr){\n    for (int i = 0; i < arr.length; i++){\n        // get min value and its index (we're only aware of 1 value so this is our min)\n        T min = arr[i];\n        int minIndex = i;\n        // start loop from i since any previous element will already be sorted\n        for (int j = i; j < arr.length; j++){\n            // if there's a new min, then update it\n            if (min.compareTo(arr[j] > 0){\n                min = arr[j];\n                minIndex = j;\n            }\n        }\n        // once you're at the end of the loop, swap the index of the smallest element with i \n        // this will put the lowest element at the start of our array\n        swap(arr, i, minIndex);\n    }\n}\n\\`\\`\\`\n\n## Time Complexity (Analysis)\nSelection Sort is an **unstable** sorting algorithm and better than Bubble Sort. However, the worst case is still *$O(n^2)*\n- The best case is *$O(n^2)*\n- The average case is *$O(n^2)*\n- The worst case is *$O(n^2)*\n\n## Visualizer\n...And that's it! Our implementation of Insertion Sort should be working just fine. Remember, there is also a simple visualization tool for sorting algorithms. Click the button below to check out the visualizer!\n`\n\nexport let mergeSortMarkdown = `\n# Merge Sort\nThis section will go over **two** versions of Merge Sort because it will show the importance in creating efficient algorithms. \n\n## Merge Sort Implementation (Version 1)\nWe will be using generics for our implementation to easily apply our sorting algorithm across all types of arrays.\n\n### Rationale\nThe basis of Merge Sort is to think of one element by itself already being **sorted**. If we have **two elements** and **merge** them, then we will have 2 elements sorted. To accomplish this we recursively call the sorting method until we only have one element. Eventually, the recursive function will be at a point where we have **two** elements. Ultimately, we use the merge function for these pair of elements and this process continues until the array is fully sorted.\n\n### Helper Method\nWe will be using the following **merge()** helper method to **merge** two arrays that are **already sorted.**\n\\`\\`\\`java\nprivate static <E extends Comparable<? super E> void merge(E[] arr, int l, int m, int r){\n    int nL = m - l + 1; // size of left aux array\n    int nR = r - m; // size of right aux array\n    \n    E[] L = (E[]) new Comparable[nL];\n    E[] R = (E[]) new Comparable[nR];\n   \n    // initialize left aux array with the values from the main array\n    for (int i = 0; i < nL; i++){\n        L[i] = arr[l + i];\n    }\n    \n    // initialize right aux array with the values from the main array\n    for (int j = 0; j < nR; j++){\n        R[j] = arr[m + j + 1];\n    }\n    \n    int i = 0; // starting index of left aux arr\n    int j = 0; // starting index of right aux arr\n    int k = l; // starting index of main arr\n    \n    while (i < nL && j < nR){\n        // compare values from both aux arrays, determine which element is lower, then update\n        // the main arr with the lowest value, then increment indices as needed\n        if (L[i].compareTo(R[j]) <= 0){\n            arr[k] = L[i++]\n        } else {\n            arr[k] = R[j++];\n        }\n        k++;\n    }\n    \n    // update main arr with remaining elements from the left aux arr\n    while (i < nL){\n        arr[k] = L[i++];\n        k++;\n    }\n    \n    // update main arr with remaining elements from the right aux arr\n    while (j < nR){\n        arr[k] = R[j++];\n        k++;\n    }\n}\n\\`\\`\\`\n\n### Sorting Algorithm\nThis is the setup used for Merge Sort. \n\n\\`\\`\\`java\npublic static <E extends Comparable<? super E> void sort(E[] arr){\n    sort(arr, 0, arr.length - 1);\n}\nprivate static <E extends Comparable<? super E> void sort(E[] arr, int l, int r){ \n    if (l < r){\n        int m = (l + r)/2; // middle index\n        sort(arr, l, m); // left side of array\n        sort(arr, m + 1, r); // right side of array\n        merge(arr, l, m, r); // merge\n    }\n}\n\\`\\`\\`\n\n### Time Complexity & Space Complexity (Analysis)\nMerge Sort is a **stable** sorting algorithm and it is the first efficient sorting algorithm that will be covered.\n- The best case is *$O(nlogn)*\n- The average case is *$O(nlogn)*\n- The worst case is *$O(nlogn)*\n\nIt also uses an **auxilary** array in **merge()**, as a result, this algorithm has a space complexity of *$O(n).*\n\n## Merge Sort Implementation (Version 2)\nThis second version of Merge Sort will be more efficient than the previous one. It will only be creating the auxilary array **once** instead of creating multiple auxilary arrays as in the previous implementation. Therefore, this version of Merge Sort is more efficient.\n\n### Sort Method\nThis will be the updated version of **sort()** that only relies on one auxilary array.\n\\`\\`\\`java\npublic static <E extends Comparable<? super E>> void sort(E[] arr) {\n    E[] aux = arr.clone();\n    sort(arr, 0, arr.length - 1, aux);\n}\nprivate static <E extends Comparable<? super E>> void sort(E[] arr, int l, int r, E[] aux) {\n    if (l < r) {\n        int m = (l + r) / 2;\n        sort(aux, l, m, arr);\n        sort(aux, m + 1, r, arr);\n        merge(arr, l, m, r, aux);\n    }\n}\n\\`\\`\\`\n\n### Merge Method\nThis will be the updated version of **merge()** that only relies on one auxilary array.\n\\`\\`\\`java\nprivate static <E extends Comparable<? super E>> void merge(E[] arr, int l, int m, int r, E[] aux) {\n    int k = l, i = l;\n    int j = m + 1;\n    while (i <= m && j <= r) {\n        if (aux[i].compareTo(aux[j]) <= 0) {\n            arr[k++] = aux[i++];\n        } else {\n            arr[k++] = aux[j++];\n        }\n    }\n    while (i <= m) {\n        arr[k++] = aux[i++];\n    }\n    while (j <= r) {\n        arr[k++] = aux[j++];\n    }\n}\n\\`\\`\\`\n\n### Time Complexity & Space Complexity (Analysis)\nThis version of Merge Sort is still a **stable** sorting algorithm.\n- The best case is *$O(nlogn)*\n- The average case is *$O(nlogn)*\n- The worst case is *$O(nlogn)*\n\nThis algorithm has a space complexity of *$O(n)*, but it is more efficient as we only clone the auxilary array once. \n\n## Visualizer\n...And that's it! Our implementation of Merge Sort should be working just fine. Remember, there is also a simple visualization tool for sorting algorithms. Click the button below to check out the visualizer!\n`\n\nexport let quickSortMarkdown = `\n# Quick Sort\nThis section will go over **two** versions of Quick Sort because it will show the importance in creating efficient algorithms.\n\n## Quick Sort Implementation (Version 1)\nWe will be using generics for our implementation to easily apply our sorting algorithm across all types of arrays.\n\n### Rationale\nThe basis of Quick Sort is to pick an element from the list and to put all elements less than the pivot to the **left** and all elements greater the pivot to the **right.** As a result, we end up finding the **pivot**, which results in that element being **sorted.** This process is known as **partitioning** and we will be implementing it as a helper method. \n\n### Helper Method \nWe will be using the following **swap()** and **partition()** helper method to find the **pivot.**\n\\`\\`\\`java\nprivate static <E extends Comparable<? super E>> int partition(E[] arr, int l, int h){\n    E pivot = arr[l]; // we will be using the lowest element given as the pivot\n    int i = l - 1; // start index\n    int j = h + 1; // end index\n    while (true){\n        // increment i every time arr[i] is less than the value of the pivot\n        do {\n            i++;\n        } while(arr[i].compareTo(pivot) < 0);\n    \n        // increment j every time arr[j] is greater than the pivot\n        do {\n            j--;\n        } while(arr[j].compareTo(pivot) > 0);\n\n        // return pivot index once i >= j\n        if (i >= j){\n            return j;\n        }\n        \n        // swap once you find a value less than pivot and a value greater than pivot\n        swap(arr, i, j);\n    }\n}\n\nprivate static <E> void swap(E[] arr, int i, int j){\n    E temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n\\`\\`\\`\n\n\n### Sorting Algorithm\nThis is the setup used for Quick Sort. \n\n\\`\\`\\`java\npublic static <E extends Comparable<? super E>> void sort(E[] arr){\n    sort(arr, 0, arr.length - 1);\n}\n\nprivate static <E extends Comparable<? super E>> void sort(E[] arr, int l, int h){\n    if (l < h){\n        int pivot = partition(arr, l, h);\n        sort(arr, l, pivot);\n        sort(arr, pivot + 1, h);\n    }\n}\n\\`\\`\\`\n\n## Time Complexity (Analysis)\nQuick Sort is an **unstable** sorting algorithm. However, the worst case is *$O(n^2)*.\n- The best case is *$O(nlogn)*\n- The average case is *$O(nlogn)*\n- The worst case is *$O(n^2)*\n\n## Quick Sort Implementation (Version 2)\nThis second version of Quick Sort will be more efficient as we will be using a **random** pivot within our partition() method. This essentially results into the worst case having an **extremely** low probability of occuring. Therefore, this version of Quick Sort is more efficient.\n\n### Sort Method\nThe sort() method will stay the same as we only have to change the pivot that is chosen.\n\n### Partition Method\nThis will be the updated version of partition() that relies on a random pivot. \n\\`\\`\\`java\nprivate static <E extends Comparable<? super E>> int partition(E[] arr, int l, int h){\n    int randomIndex = ThreadLocalRandom.current().nextInt(l, h);\n    E pivot = arr[randomIndex];\n    /* use code from previous partition() */\n}\n\\`\\`\\`\n\n### Time Complexity & Space Complexity (Analysis)\nThis version of Quick Sort is still an **unstable** sorting algorithm.\n- The best case is *$O(nlogn)*\n- The average case is *$O(nlogn)*\n- The worst case is *$O(nlogn)*\n\n## Visualizer\n...And that's it! Our implementation of Quick Sort should be working just fine. Remember, there is also a simple visualization tool for sorting algorithms. Click the button below to check out the visualizer!\n`\n\nexport let heapSortMarkdown = `\n# Heap Sort\n`\n\nexport let analysisOfSortingAlgorithmsMarkdown = `\n# Analysis of Sorting Algorithms\n`\n\nexport let pathfindingMarkdown = `\n# Pathfinding\nThis part of the page will go over the many relevant pathfinding algorithms that are implemented throughout the site.\n`\n\nexport let graphsMarkdown = `\n# Graphs\nThis part of the page will go over an implementation of an **undirected** graph and a **directed** graph.\n\n## Undirected Graphs Terminology\nThe images below explain the terminology that will be used regarding undirected graphs.\n|   |   |   |\n|:-:|:-:|:-:|\n|![Graph Anatomy](https://algs4.cs.princeton.edu/41graph/images/graph-anatomy.png)   | ![Graph Tree](https://algs4.cs.princeton.edu/41graph/images/tree.png)| ![Graph Spanning Forest](https://algs4.cs.princeton.edu/41graph/images/forest.png) |\n\n Image credits go to Robert Sedgewick & Kevin Wayne. Images can be obtained via their algorithms textbook [website.](https://algs4.cs.princeton.edu/41graph/)\n\n## Undirected Graph Implementation\nKeeping the last section in mind, we will be using adjacency-list representation for our implementation of a graph. We will be implementing the barebones logic of a graph. \n\n**NOTE**: We will also be using a **Bag** data structure, it is similar to an ArrayList, **except that it does NOT support removal of elements.**\n\\`\\`\\`java\n/*\n* Original authors:\n* @author Robert Sedgewick\n* @author Kevin Wayne\n*\n* Code can be obtained via their algorithms textbook website.\n* Website: https://algs4.cs.princeton.edu/41graph/\n*/\npublic class Graph {\n    private static final String NEWLINE = System.getProperty(\"line.separator\");\n    private final int V; // number of vertices\n    private int E; // number of edges\n    private Bag<Integer>[] adj; // adj list for vertex v\n    // initialize our instance variables\n    public Graph(int V){  \n        if (V < 0) {\n            throw new IllegalStateException();\n        }\n        this.V = V;\n        this.E = 0;\n        adj = (Bag<Integer>[]) new Bag[V]; // array of lists\n        for (int v = 0; v < V; v++){\n            adj[v] = new Bag<Integer>(); // initialize adj lists\n        }\n    }\n}\n\\`\\`\\`\n\n### Helper Method\nWe will use the following helper method to validate that our vertices are within the bounds *$[0,V - 1]*\n\\`\\`\\`java\nprivate void validateVertex(int v) {\n    if (v < 0 || v >= V){\n        throw new IllegalArgumentException();\n    }\n}\n\\`\\`\\`\n\n### Getters\nWe will be using the following methods to get the number of vertices and edges.\n\\`\\`\\`java\npublic int V(){\n    return V;\n}\n\npublic int E(){\n    return E;\n}\n\\`\\`\\`\n\n### Adding Edges\nWe will using the following method to add edges into our graph. Remember, this is an **undirected** graph, so both vertices **must** connect to one another. In a **directed** graph we would only add the edge from *$V \\\\rightarrow W*.\n\\`\\`\\`java\npublic void addEdge(int v, int w){\n    validateVertex(v);\n    validateVertex(w);\n    adj[v].add(w);\n    adj[w].add(v);\n    E++;\n}\n\\`\\`\\`\n\n### Relevant Methods\nWe will go over two important methods for graphs, **degree()** and **adj()**.\n\n### Adjacent Vertices\nWe will want to get an iterable that includes all vertices adjacent to a vertex. \n\\`\\`\\`java\npublic Iterable<Integer> adj(int v){\n    validateVertex(v);\n    return adj[v];\n}\n\\`\\`\\`\n\n### Degree\nWe will also want to know the number of vertices connected to a vertex.\n\\`\\`\\`java\npublic int degree(int v){\n    validateVertex(v);\n    return adj[v].size();\n}\n\\`\\`\\`\n\n### String Representation\nWe will use the following string representation for our graph.\n\\`\\`\\`java\npublic String toString() {\n    StringBuilder s = new StringBuilder();\n    s.append(V).append(\" vertices, \").append(E).append(\" edges \").append(NEWLINE);\n    for (int v = 0; v < V; v++) {\n        s.append(v).append(\": \");\n        for (int w : adj[v]) {\n            s.append(w).append(\" \");\n        }\n        s.append(NEWLINE);\n    }\n    return s.toString();\n}\n\\`\\`\\`\n\n## Directed Graphs Terminology\nThe images below explain the terminology that will be used regarding directed graphs.\n|   |   |   |\n|:-:|:-:|:-:|\n|![Digraph Anatomy](https://algs4.cs.princeton.edu/42digraph/images/digraph-anatomy.png)   | ![Strong Components](https://algs4.cs.princeton.edu/42digraph/images/strong-components.png)|\n\n Image credits go to Robert Sedgewick & Kevin Wayne. Images can be obtained via their algorithms textbook [website.](https://algs4.cs.princeton.edu/41graph/)\n\n## Undirected Graph Implementation\nFor the most part, an implementation of a digraph is similar to an implementation of an undirected graph, but it has a few important key differences that we will examine.\n\n**NOTE**: We will also be using a **Bag** data structure, it is similar to an ArrayList, **except that it does NOT support removal of elements.**\n\\`\\`\\`java\n/*\n* Original authors:\n* @author Robert Sedgewick\n* @author Kevin Wayne\n*\n* Code can be obtained via their algorithms textbook website.\n* Website: https://algs4.cs.princeton.edu/41graph/\n*/\n\npublic class Digraph {\n    private static final String NEWLINE = System.getProperty(\"line.separator\");\n    \n    private final int V; // number of vertices\n    private int E; // number of edges\n    private Bag<Integer>[] adj; // adj list for vertex v\n    private int[] indegree; // indegree of vertex v\n    \n    // initialize our instance variables\n    public Digraph(int V){  \n        if (V < 0) {\n            throw new IllegalStateException();\n        }\n        this.V = V;\n        this.E = 0;\n        indegree = new int[V];\n        adj = (Bag<Integer>[]) new Bag[V]; // array of lists\n        for (int v = 0; v < V; v++){\n            adj[v] = new Bag<Integer>(); // initialize adj lists\n        }\n    }\n}\n\\`\\`\\`\n\n### Helper Method\nWe will use the following helper method to validate that our vertices are within the bounds *$[0,V - 1]*\n\\`\\`\\`java\nprivate void validateVertex(int v) {\n    if (v < 0 || v >= V){\n        throw new IllegalArgumentException();\n    }\n}\n\\`\\`\\`\n\n### Getters\nWe will be using the following methods to get the number of vertices and edges.\n\\`\\`\\`java\npublic int V(){\n    return V;\n}\n\npublic int E(){\n    return E;\n}\n\\`\\`\\`\n\n### Adding Edges\nWe will using the following method to add edges into our graph. In a **directed** graph we **only** add the edge from *$V \\\\rightarrow W*. We also update the indegree value of vertex *$W*.\n\\`\\`\\`java\npublic void addEdge(int v, int w){\n    validateVertex(v);\n    validateVertex(w);\n    adj[v].add(w);\n    indegree[w]++;\n    E++;\n}\n\\`\\`\\`\n\n### Relevant Methods\nWe will go over three important methods for graphs, **indegree()**, **outdegree()**, and **adj()**.\n\n### Adjacent Vertices\nWe will want to get an iterable that includes all vertices adjacent to a vertex. \n\\`\\`\\`java\npublic Iterable<Integer> adj(int v){\n    validateVertex(v);\n    return adj[v];\n}\n\\`\\`\\`\n\n### Degree\nWe will also want to know the number of vertices connected to a vertex. For digraphs we have **outdegree** and **indegree**. Outdegree is the number of edges pointing **from** it. Indegree is the number of edges pointing **to** it.\n\\`\\`\\`java\npublic int outdegree(int v){\n    validateVertex(v);\n    return adj[v].size();\n}\n\npublic int indegree(int v){\n    validateVertex(v);\n    return indegree[v];\n}\n\\`\\`\\`\n\n### String Representation\nWe will use the following string representation for our digraph.\n\\`\\`\\`java\npublic String toString() {\n    StringBuilder s = new StringBuilder();\n    s.append(V).append(\" vertices, \").append(E).append(\" edges \").append(NEWLINE);\n    for (int v = 0; v < V; v++) {\n        s.append(v).append(\": \");\n        for (int w : adj[v]) {\n            s.append(w).append(\" \");\n        }\n        s.append(NEWLINE);\n    }\n    return s.toString();\n}\n\\`\\`\\`\n\n## Visualizer\n...And that's it! Our implementation of a Graph & Digraph should be working just fine. Remember, there is also a visualization tool for visualizing a graph and digraph! Click the button below to check out the visualizer!\n\n`\n\nexport let dfsMarkdown = `\n# Depth-First Search\nThis part of the page will go over an implementation of Depth-First Search. \n\n## Depth-First Search Implementation\nDFS will be the first searching algorithm that will be examined. This algorithm works on both **graphs** and **digraphs.** An easy explanation for this is that a graph is essentially a digraph that always has two edges within both directions. \n\n### Rationale\nDepth-First Search is a recursive algorithm that recursively visits all vertices that are adjacent to it and have not been marked. An easier way to visualize this is by using the visualizer implemented in the Pathfindings section of the website.\n\n### Helper Method\nWe will be using the following helper method to validate our vertices are within the bounds *$[0, V-1]*\n\\`\\`\\`java\nprivate void validateVertex(int v) {\n    int V = marked.length;\n    if (v < 0 || v >= V) {\n        throw new IllegalArgumentException();\n    }\n}\n\\`\\`\\`\n\n### Depth-First Search\nThis is the setup used for DFS.\n\\`\\`\\`java\n/*\n* Original authors:\n* @author Robert Sedgewick\n* @author Kevin Wayne\n*\n* Code can be obtained via their algorithms textbook website.\n* Website: https://algs4.cs.princeton.edu/41graph/\n*/\npublic class DepthFirstSearch {\n    private boolean[] marked; // marked[v] = true iff v is reachable from s\n    private int[] edgeTo; // edgeTo[v] = last edge on path from s to v\n    private final int s; // source vertex\n    \n    // initialize instance variables and do DFS\n    public DepthFirstSearch(Digraph G, int s){\n        marked = new boolean[G.V()];\n        edgeTo = new int[G.V()];\n        this.s = s;\n        validateVertex(s);\n        dfs(G, s);\n    }\n    \n    // implementation of DFS (only a few lines of code)\n    private void dfs(Digraph G, int v){\n        marked[v] = true;\n        for (int w : G.adj(v)) {\n            if (!marked[w]){\n                edgeTo[w] = v; // last vertex that vertex w came from\n                dfs(G, w); // keep on recursively calling dfs() \n            }\n        }\n    }\n}\n\\`\\`\\`\n\n### Paths\nWe will now focus on returning the path that DFS takes to go from *$S \\\\rightarrow V*. In other words, we want the path from the source to the target vertex.\n\\`\\`\\`java\n// used to determine whether there's a path from s -> v\npublic boolean hasPathTo(int v) {\n    validateVertex(v);\n    return marked[v];\n}\n\n// loop from vertex and retrace steps using edgeTo[]\n// we use a stack to return our iterable in last-first order (easy to implement)\n// ex: [1, 4, 6] would return \"6 4 1\" within our iterable\npublic Iterable<Integer> pathTo(int v) {\n    validateVertex(v);\n    if (!hasPathTo(v)) return null;\n    Stack<Integer> path = new Stack<Integer>();\n    // keep looping until edgeTo[x] returns the source vertex\n    for (int x = v; x != s; x = edgeTo[x]){\n        path.push(x);\n    }\n    // push the source once we are done looping through our edgeTo[]\n    path.push(s);\n    return path;\n}\n\\`\\`\\`\n\n## Visualizer\n...And that's it! Our implementation of a DFS should be working just fine. Remember, there is also a visualization tool for visualizing DFS! Click the button below to check out the visualizer!\n`\n\nexport let bfsMarkdown = `\n# Breadth-First Search\nThis part of the page will go over an implementation of Breadth-First Search. \n\n## Breadth-First Search Implementation\nBFS is the second searching algorithm that will be examined. This algorithm works on both **graphs** and **digraphs.** An easy explanation for this is that a graph is essentially a digraph that always has two edges within both directions. \n\n### Rationale\nBreadth-First Search is an algorithm that puts all vertices **adjacent** to the source vertex **in a queue.** Next, it uses the **first adjacent vertex** from the queue, **by removing it**, and puts all vertices adjacent to that vertex in the queue. This process continues until the queue is empty. An easier way to visualize this is by using the visualizer implemented in the Pathfindings section of the website.\n\n### Helper Method\nWe will be using the following helper method to validate our vertices are within the bounds *$[0, V-1]*\n\\`\\`\\`java\nprivate void validateVertex(int v) {\n    int V = marked.length;\n    if (v < 0 || v >= V) {\n        throw new IllegalArgumentException();\n    }\n}\n\\`\\`\\`\n\n### Breadth-First Search\nThis is the setup used for BFS.\n\\`\\`\\`java\n/*\n* Original authors:\n* @author Robert Sedgewick\n* @author Kevin Wayne\n*\n* Code can be obtained via their algorithms textbook website.\n* Website: https://algs4.cs.princeton.edu/41graph/\n*/\npublic class BreadthFirstSearch {\n    private static final int INFINITY = Integer.MAX_VALUE;\n    private boolean[] marked; // marked[v] = true iff v is reachable from s\n    private int[] edgeTo; // edgeTo[v] = last edge on path from s to v\n    private int[] distTo; // distTo[v] = length of shortest path from s to v\n    \n    // initialize instance variables and do BFS\n    public BreadthFirstSearch(Digraph G, int s){\n        marked = new boolean[G.V()];\n        edgeTo = new int[G.V()];\n        distTo = new int[G.V()];\n        for (int v = 0; v < G.V(); v++){\n            distTo[v] = INFINITY;\n        }\n        validateVertex(s);\n        bfs(G, s);\n    }\n    \n    // implementation of BFS (only a few lines of code)\n    private void bfs(Digraph G, int v){\n        Queue<Integer> q = new Queue<>();\n        marked[s] = true;\n        distTo[s] = 0; // initialize dist as 0 for source vertex\n        q.enqueue(s); // add source onto the queue\n        // keep looping until the queue is empty\n        while(!q.isEmpty()){\n            // remove element from queue\n            int v = q.dequeue();\n            // add all elements adj to the removed vertex onto the queue\n            for (int w : G.adj(v)){\n                if (!marked[w]){\n                    edgeTo[w] = v; // last vertex that vertex w came from\n                    distTo[w] = distTo[v] + 1; // update distance\n                    marked[w] = true; // mark the vertex as visited\n                    q.enqueue(w); // add vertex to the queue\n                }\n            }\n        }\n    }\n}\n\\`\\`\\`\n\n### Paths\nWe will now focus on returning the path that BFS takes to go from *$S \\\\rightarrow V*. In other words, we want the path from the source to the target vertex.\n\\`\\`\\`java\n// returns distance of path s -> v\npublic int distTo(int v){\n    validateVertex(v);\n    return distTo[v];\n}\n\n// used to determine whether there's a path from s -> v\npublic boolean hasPathTo(int v) {\n    validateVertex(v);\n    return marked[v];\n}\n\n// loop from vertex and retrace steps using edgeTo[]\n// we use a stack to return our iterable in last-first order (easy to implement)\n// ex: [1, 4, 6] would return \"6 4 1\" within our iterable\npublic Iterable<Integer> pathTo(int v) {\n    validateVertex(v);\n    if (!hasPathTo(v)) return null;\n    Stack<Integer> path = new Stack<Integer>();\n    int x; // we will need this once we are done looping to get our source vertex\n    // keep looping until distTo[x] is 0 (which means it's the source)\n    for (x = v; distTo[x] != 0; x = edgeTo[x]){\n        path.push(x);\n    }\n    // push the source once we are done looping through our edgeTo[]\n    path.push(x);\n    return path;\n}\n\\`\\`\\`\n\n## Visualizer\n...And that's it! Our implementation of a BFS should be working just fine. Remember, there is also a visualization tool for visualizing BFS! Click the button below to check out the visualizer!\n`\n\nexport let edgeWeightedGraphsMarkdown = `\n# Edge-Weighted Graphs\nThis part of the page will go over an implementation of an edge-weighted graph.\n\n## Edge-Weighted Graph Implementation\nAn edge-weighted graph is an undirected graph that has edges that either have a **weight** or **cost.** Before implementing the graph itself, we will implement the **Edge** itself.\n\n### Edge Implementation\nWe will use the following **Edge** implementation for our Edge-Weighted Graph.\n\\`\\`\\`java\n/*\n* Original authors:\n* @author Robert Sedgewick\n* @author Kevin Wayne\n*\n* Code can be obtained via their algorithms textbook website.\n* Website: https://algs4.cs.princeton.edu/41graph/\n*/\npublic class Edge implements Comparable<Edge> {\n    private final int v; // vertex v\n    private final int w; // vertex w\n    private final double weight; // weight of the edge from v -> w\n\n    // initialize instance variables\n    public Edge(int v, int w, double weight){\n        if (v < 0) throw new IllegalArgumentException();\n        if (w < 0) throw new IllegalArgumentException();\n        if (Double.isNaN(weight)) throw new IllegalArgumentException();\n        this.v = v;\n        this.w = w;\n        this.weight = weight;\n    }\n    \n    // returns weight\n    public double weight(){\n        return weight;\n    }\n    \n    // returns either vertex\n    public int either(){\n        return v;\n    }\n    \n    // returns vertex that is diff from given vertex\n    public int other(int vertex){\n        if      (vertex == v) return w;\n        else if (vertex == w) return v;\n        else throw new IllegalArgumentException();\n    }\n    \n    // used for comparing edge weights\n    @Override\n    public int compareTo(Edge that) {\n        return Double.compare(this.weight, that.weight);\n    }\n    \n    // string representation of edge\n    public String toString() {\n        return String.format(\"%d-%d %.5f\", v, w, weight);\n    }\n}\n\\`\\`\\`\n\n### Edge-Weighted Graph\nWe will be implementing the barebones logic of an Edge-Weighted Graph.\n\\`\\`\\`java\n/*\n* Original authors:\n* @author Robert Sedgewick\n* @author Kevin Wayne\n*\n* Code can be obtained via their algorithms textbook website.\n* Website: https://algs4.cs.princeton.edu/41graph/\n*/\npublic class EdgeWeightedGraph {\n    private static final String NEWLINE = System.getProperty(\"line.separator\");\n    private final int V; // number of vertices\n    private int E; // number of edges\n    private Bag<Edge>[] adj; // adj list for vertex v\n    \n    // initialize instance variables\n    public EdgeWeightedGraph(int V) {\n        if (V < 0) throw new IllegalArgumentException();\n        this.V = V;\n        this.E = 0;\n        adj = (Bag<Edge>[]) new Bag[V]; // array of lists of type edge\n        for (int v = 0; v < V; v++) {\n            adj[v] = new Bag<Edge>(); // initialize adj lists\n        }\n    }\n}\n\\`\\`\\`\n\n### Helper Method \nWe will use the following helper method to validate that our vertices are within the bounds *$[0, V-1]*\n\\`\\`\\`java\nprivate void validateVertex(int v) {\n    if (v < 0 || v >= V){\n        throw new IllegalArgumentException();\n    }\n}\n\\`\\`\\`\n\n### Getters\nWe will be using the following methods to get the number of vertices and edges.\n\\`\\`\\`java\npublic int V(){\n    return V;\n}\n\npublic int E(){\n    return E;\n}\n\\`\\`\\`\n\n### Adding Edges\nWe will using the following method to add edges into our graph. Remember, this is an **undirected** graph, so both vertices **must** connect to one another. In a **directed** graph we would only add the edge from *$V \\\\rightarrow W*\n\\`\\`\\`java\npublic void addEdge(Edge e){\n    int v = e.either();\n    int w = e.other(v);\n    validateVertex(v);\n    validateVertex(w);\n    adj[v].add(e);\n    adj[w].add(e);\n    E++;\n}\n\\`\\`\\`\n\n### Relevant Methods\nWe will go over two important methods for graphs, **degree()** and **adj()**.\n\n### Adjacent Vertices\nWe will want to get an iterable that includes all vertices adjacent to a vertex. \n\\`\\`\\`java\npublic Iterable<Integer> adj(int v){\n    validateVertex(v);\n    return adj[v];\n}\n\\`\\`\\`\n\n### Degree\nWe will also want to know the number of vertices connected to a vertex.\n\\`\\`\\`java\npublic int degree(int v){\n    validateVertex(v);\n    return adj[v].size();\n}\n\\`\\`\\`\n\n### Edges Iterable\nWe also want to be able to return all Edges within our Edge-Weighted graph.\n\\`\\`\\`java\npublic Iterable<Edge> edges() {\n    Bag<Edge> list = new Bag<Edge>();\n    for (int v = 0; v < V; v++) {\n        int selfLoops = 0;\n        for (Edge e : adj(v)) {\n            // makes sure it only adds an edge from v -> w once \n            // since one vertex will always be greater in index\n            // ex: 0 -> 1, e.other(0) = 1, so add it, e.other(1) = 0, do not add\n            // this is why the graph has an other() method\n            if (e.other(v) > v) {\n                list.add(e);\n            }\n            // handles the other case where v == w\n            // add only one copy of each self loop (self loops will be consecutive)\n            else if (e.other(v) == v) {\n                if (selfLoops % 2 == 0) list.add(e);\n                selfLoops++;\n            }\n        }\n    }\n    return list;\n}\n\\`\\`\\`\n\n### String Representation\nWe will use the following string representation for our graph.\n\\`\\`\\`java\npublic String toString() {\n    StringBuilder s = new StringBuilder();\n    s.append(V).append(\" \").append(E).append(NEWLINE);\n    for (int v = 0; v < V; v++) {\n        s.append(v).append(\": \");\n        for (Edge e : adj[v]) {\n            s.append(e).append(\"  \");\n        }\n        s.append(NEWLINE);\n    }\n    return s.toString();\n}\n## Visualizer\n...And that's it! Our implementation of an Edge-Weighted Graph should be working just fine. Remember, there is also a visualization tool for visualizing an Edge-Weighted Graph! Click the button below to check out the visualizer!\n`\n\nexport let mstsMarkdown = `\n# Minimum Spanning Trees\nThis part of the page will go over **two** implementations in finding a **minimum spanning tree.**\n\n## Terminology\nA minimum spanning tree is the spanning tree of a graph with the least amount of total weight. The image below explains this concept.\n![Minimum Spanning Trees](https://algs4.cs.princeton.edu/43mst/images/mst.png)\n\nImage credits go to Robert Sedgewick & Kevin Wayne. Images can be obtained via their algorithms textbook [website.](https://algs4.cs.princeton.edu/43mst/)\n\n## Kruskal's Algorithm Implementation\nKruskal's Algorithm will be the first algorithm we will go over as it is a simple but elegant way of finding a minimum spanning tree.\n\n### Rationale\nIn-order to find the minimum spanning tree of a graph, we have the weights in order from least to greatest by sorting the edges by weight. Start the process from least to greatest, if the edge does not make a cycle, then it is part of the minimum spanning tree. This is the basic idea of Kruskal's algorithm.\n\n### Kruskal's Algorithm\nThis is the setup used for Kruskal's Algorithm.\n\\`\\`\\`java\n/*\n* Original authors:\n* @author Robert Sedgewick\n* @author Kevin Wayne\n*\n* Code can be obtained via their algorithms textbook website.\n* Website: https://algs4.cs.princeton.edu/41graph/\n*/\n\npublic class KruskalMST {\n    private double weight;\n    private Queue<Edge> mst new Queue<>();\n    \n    public KruskalMST(EdgeWeightedGraph G){\n        // get the edges of the graph\n        Edge[] edges = new Edge(G.E());\n        int t = 0;\n        for (Edge e : G.edges()){\n            edges[t++] = e;\n        }\n        // sort edges by weight (edge uses comparable)\n        Arrays.sort(edges);\n        \n        // run greedy algorithm\n        UF uf = new UF(G.V());\n        for (int i = 0; i < G.E() && mst.size() < G.V() - 1; i++) {\n            // gets the vertices v -> w from the edge\n            Edge e = edges[i];\n            int v = e.either();\n            int w = e.other(v);\n\n            // make sure that v-w does not create a cycle\n            // in other words, make sure that both vertices aren't in the MST\n            // if both vertices aren't in the MST, add edge to MST\n            if (uf.find(v) != uf.find(w)) {\n                uf.union(v, w);     // merge v and w components\n                mst.enqueue(e);     // add edge e to mst\n                weight += e.weight();\n            }\n        }\n    }\n}\n\\`\\`\\`\n\n### Relevant Methods\nOnce we are done with the algorithm, we can get an iterable of the edges in the MST and we can get the total weigth of the MST.\n\\`\\`\\`java\npublic Iterable<Edge> edges(){\n    return  mst;\n}\n\npublic double weight(){\n    return weight;\n}\n\\`\\`\\`\n\n## Prim's Algorithm Implementation\n[TODO]\n`\n\nexport let edgeWeightedDigraphsMarkdown = `\n# Edge-Weighted Digraphs\nThis part of the page will go over an implementation of an edge-weighted digraph.\n\n## Edge-Weighted Digraph Implementation\nFor the most part, an implementation of an edge-weighted digraph is similar to an implementation of an edge-weighted graph, as it just a digraph that has edges that either have a **weight** or **cost.** Before implementing the graph itself, we will implement the DirectedEdge itself.\n\\`\\`\\`java\n/*\n* Original authors:\n* @author Robert Sedgewick\n* @author Kevin Wayne\n*\n* Code can be obtained via their algorithms textbook website.\n* Website: https://algs4.cs.princeton.edu/41graph/\n*/\npublic class DirectedEdge implements Comparable<DirectedEdge> {\n    private final int v; // vertex v\n    private final int w; // vertex w\n    private final double weight; // weight of the edge from v -> w\n\n    // initialize instance variables\n    public Edge(int v, int w, double weight){\n        if (v < 0) throw new IllegalArgumentException();\n        if (w < 0) throw new IllegalArgumentException();\n        if (Double.isNaN(weight)) throw new IllegalArgumentException();\n        this.v = v;\n        this.w = w;\n        this.weight = weight;\n    }\n    \n    // returns weight\n    public double weight(){\n        return weight;\n    }\n    \n    // returns either vertex\n    public int from(){\n        return v;\n    }\n    \n    // returns vertex that is diff from given vertex\n    public int to(int vertex){\n        return w; // key difference as we can no longer go from w -> v\n    }\n    \n    // used for comparing edge weights\n    @Override\n    public int compareTo(Edge that) {\n        return Double.compare(this.weight, that.weight);\n    }\n    \n    // string representation of edge\n    public String toString() {\n        return v + \"->\" + w + \" \" + String.format(\"%5.2f\", weight);\n    }\n}\n\\`\\`\\`\n\n### Edge-Weighted Digraph\nWe will be implementing the barebones logic of an Edge-Weighted Digraph.\n\\`\\`\\`java\n/*\n* Original authors:\n* @author Robert Sedgewick\n* @author Kevin Wayne\n*\n* Code can be obtained via their algorithms textbook website.\n* Website: https://algs4.cs.princeton.edu/41graph/\n*/\n\npublic class EdgeWeightedDigraph {\n    private static final String NEWLINE = System.getProperty(\"line.separator\");\n    private final int V; // number of vertices\n    private int E; // number of edges\n    private Bag<DirectedEdge>[] adj; // adj list for vertex v\n    private int[] indegree; // indegree of vertex v\n\n    // initialize instance variables\n    public EdgeWeightedDigraph(int V) {\n        if (V < 0) throw new IllegalArgumentException();\n        this.V = V;\n        this.E = 0;\n        this.indegree = new int[V];\n        adj = (Bag<DirectedEdge>[]) new Bag[V]; // array of lists\n        for (int v = 0; v < V; v++){\n            adj[v] = new Bag<DirectedEdge>(); // initialize adj lists\n        }\n    }\n}\n\\`\\`\\`\n\n### Helper Method \nWe will use the following helper method to validate that our vertices are within the bounds *$[0, V -1]*\n\\`\\`\\`java\nprivate void validateVertex(int v){\n    if (v < 0  || v >= V){\n        throw new IllegalArgumentException();\n    }\n}\n\\`\\`\\`\n\n### Getters \nWe will be using the following methods to get the number of vertices and edges.\n\\`\\`\\`java\npublic int V(){\n    return V;\n}\n\npublic int E(){\n    return E;\n}\n\\`\\`\\`\n\n### Adding Edges \nWe will be using the following method to add edges into our graph. In a **directed** graph we **only** add the edge from *$V \\\\rightarrow W*\n\\`\\`\\`java\npublic void addEdge(DirectedEdge e) {\n    int v = e.from();\n    int w = e.to();\n    validateVertex(v);\n    validateVertex(w);\n    adj[v].add(e);\n    indegree[w]++;\n    E++;\n}\n\\`\\`\\`\n\n### Relevant Methods\nWe will go over three important methods for graphs, **indegree()**, **outdegree()**, and **adj()**.\n\n### Adjacent Vertices\nWe will want to get an iterable that includes all vertices adjacent to a vertex.\n\\`\\`\\`java\npublic Iterable<DirectedEdge> adj(int v) {\n    validateVertex(v);\n    return adj[v];\n}\n\\`\\`\\`\n\n### Degree\nWe will also want to know the number of vertices connected to a vertex. For digraphs we have **outdegree** and **indegree**. Outdegree is the number of edges pointing **from** it. Indegree is the number of edges pointing **to** it.\n\\`\\`\\`java\npublic int outdegree(int v){\n    validateVertex(v);\n    return adj[v].size();\n}\n\npublic int indegree(int v){\n    validateVertex(v);\n    return indegree[v];\n}\n\\`\\`\\`\n\n### String Representation\nWe will use the following string representation for our digraph.\n\\`\\`\\`java\npublic String toString() {\n    StringBuilder s = new StringBuilder();\n    s.append(V).append(\" \").append(E).append(NEWLINE);\n    for (int v = 0; v < V; v++) {\n        s.append(v).append(\": \");\n        for (DirectedEdge e : adj[v]) {\n            s.append(e).append(\"  \");\n        }\n        s.append(NEWLINE);\n    }\n    return s.toString();\n}\n\\`\\`\\`\n\n## Visualizer\n...And that's it! Our implementation of an Edge-Weighted Digraph should be working just fine. Remember, there is also a visualization tool for visualizing an Edge-Weighted Digraph! Click the button below to check out the visualizer!\n`\n\nexport let shortestPathsMarkdown = `\n# Shortest Paths\nThis part of the page will over **three** implementations of finding the shortest path in an edge-weighted digraph. The **shortest path** is the path with the **least** amount of weight from the source to target vertex.\n\n## Dijkstra's Algorithm\nThe first shortest path algorithm that we will go over is Dijkstra's Algorithm. It is a famous algorithm known for finding the shortest path from a source to all other vertices. Weights **must** be non-negative in-order for Dijkstra's algorithm to find the shortest path. We will be implementing the barebones logic of the algorithm.\n\n### Helper Methods\nWe will use the following helper method to validate that our vertices are within the bounds *$[0, V - 1]*\n\\`\\`\\`java\nprivate void validateVertex(int v) {\n    if (v < 0 || v >= V){\n        throw new IllegalArgumentException();\n    }\n}\n\\`\\`\\`\n\n### Relaxation\nWe will use an idea called **relaxation** in-order to find the shortest path. The basis for relaxation is to update our data structures if we find a new shortest path from *$S \\\\rightarrow V*\n\\`\\`\\`java\n// relax edge e and update pq if changed\nprivate void relax(DirectedEdge e) {\n    int v = e.from(), w = e.to();\n    if (distTo[w] > distTo[v] + e.weight()) {\n        distTo[w] = distTo[v] + e.weight();\n        edgeTo[w] = e;\n        if (pq.contains(w)) {\n            pq.decreaseKey(w, distTo[w]);\n        } else {\n            pq.insert(w, distTo[w]);\n        }\n    }\n}\n\\`\\`\\`\n\n### Dijkstra's Algorithm\nWe can now easily implement Dijkstra's algorithm in a beautiful and concise way.\n\\`\\`\\`java\n/*\n* Original authors:\n* @author Robert Sedgewick\n* @author Kevin Wayne\n*\n* Code can be obtained via their algorithms textbook website.\n* Website: https://algs4.cs.princeton.edu/44sp/\n*/\npublic class DijkstraSP {\n    private double[] distTo;          // distTo[v] = distance  of shortest s->v path\n    private DirectedEdge[] edgeTo;    // edgeTo[v] = last edge on shortest s->v path\n    private IndexMinPQ<Double> pq;    // indexed priority queue of vertices\n    \n    // run dijkstra's algorithm\n    public DijkstraSP(EdgeWeightedDigraph G, int s){\n        for (DirectedEdge e : G.edges()) {\n            if (e.weight() < 0){\n                throw new IllegalArgumentException();\n            }\n        }\n        distTo = new double[G.V()];\n        edgeTo = new DirectedEdge[G.V()];\n        // validate that the source vertex exists\n        validateVertex(s);\n        // make all weights as infinity\n        for (int v = 0; v < G.V(); v++) {\n            distTo[v] = Double.POSITIVE_INFINITY;\n        }\n        // except for the vertex, as that is our starting vertex\n        distTo[s] = 0.0;\n        // relax vertices in order of distance from s\n        pq = new IndexMinPQ<Double>(G.V());\n        pq.insert(s, distTo[s]);\n        while (!pq.isEmpty()) {\n            int v = pq.delMin();\n            for (DirectedEdge e : G.adj(v)){\n                relax(e);\n            }\n        }\n    }\n}\n\\`\\`\\`\n\n### Paths\nWe will now focus on returning the path that BFS takes to go from *$S \\\\rightarrow V*. In other words, we want the path from the source to the target vertex.\n\\`\\`\\`java\n// returns distance of path s -> v\npublic double distTo(int v) {\n    validateVertex(v);\n    return distTo[v];\n}\n\n// used to determine whether there's a path from s -> v\npublic boolean hasPathTo(int v) {\n    validateVertex(v);\n    return distTo[v] < Double.POSITIVE_INFINITY;\n}\n    \n// loop from vertex and retrace steps using edgeTo[]\n// we use a stack to return our iterable in last-first order (easy to implement)\n// ex: [1, 4, 6] would return \"6 4 1\" within our iterable\npublic Iterable<DirectedEdge> pathTo(int v) {\n    validateVertex(v);\n    if (!hasPathTo(v)) return null;\n    Stack<DirectedEdge> path = new Stack<DirectedEdge>();\n    for (DirectedEdge e = edgeTo[v]; e != null; e = edgeTo[e.from()]) {\n        path.push(e);\n    }\n    return path;\n}\n\\`\\`\\`\n\n### Visualizer\n...And that's it! Our implementation of a Dijkstra's Algorithm should be working just fine. Remember, there is also a visualization tool for visualizing BFS! Click the button below to check out the visualizer!\n`\n\nexport let maxFlowMinCutMarkdown = `\n# Maxflow-Mincut\n\n`\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport \"./Sections.css\"\n\n// section highlight is used when you're currently on a section\ntype Props = | {\n  sections: string[],\n  directory: string,\n  sectionHighlight: false,\n  wrapperStyle?: any\n} | {\n  sections: string[],\n  directory: string,\n  sectionHighlight: true,\n  section: number,\n  wrapperStyle?: any\n};\n\nconst textDecoration = {\n  textDecoration: \"none\"\n}\n\nconst listStyle = {\n  listStyleType: \"none\",\n  padding: \"10px\",\n  margin: \"10px 0\",\n  fontSize: \"15px\",\n  borderRadius: \"10px\",\n  cursor: \"pointer\",\n  color: \"black\"\n}\n\nconst listBreakStyle = {\n  margin: \"0 13px\",\n  height: \"1px\",\n  backgroundColor: \"#c5c5c5\",\n  border: \"none\",\n  borderRadius: \"5px\"\n}\n\nfunction Sections(props: Props) {\n  const {sections, directory, sectionHighlight, wrapperStyle} = props;\n\n  // turns pascal/snake case into dash seperated words (for links)\n  const linkify = (text: string) => {\n    return text\n      .replace(/ *\\([^)]*\\) */g, \"\") // remove parantheses and contents\n      .replace(/[^a-zA-Z0-9]+/g, '-')\n      .replace(/([A-Z]+)([A-Z][a-z])/g, '$1-$2')\n      .replace(/([a-z])([A-Z])/g, '$1-$2')\n      .replace(/([0-9])([^0-9])/g, '$1-$2')\n      .replace(/([^0-9])([0-9])/g, '$1-$2')\n      .replace(/-+/g, '-')\n      .toLowerCase();\n  }\n\n  let sectionsContainer = sections.map((section, index) => (\n    <div>\n      <Link to={directory + \"/\" + linkify(section)} style={textDecoration}>\n        {props.sectionHighlight && index === props.section - 1 ?\n          <li key={section} style={listStyle} className={\"active-section\"}> {++index}. {section}</li> :\n          <li key={section} style={listStyle}> {++index}. {section}</li>}\n      </Link>\n      {index < sections.length ? <hr style={listBreakStyle}/> : null}\n    </div>\n  ));\n\n\n  return (\n    <div className={\"sections-wrapper-wrapper\"}>\n      <div className={\"sections-wrapper\"} style={wrapperStyle}>\n        <div className={\"sections\"}>\n          <p className={\"sections-header\"}> In this part: </p>\n          <div className={\"section-names\"}>\n            <ul>\n              {sectionsContainer}\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Sections;\n","import React, {useEffect, useLayoutEffect} from \"react\";\nimport {datastructuresMarkdown} from \"../Markdown/Markdown\";\nimport Sections from \"../../Common/Sections\";\nimport Markdown from \"../../Common/Markdown\";\n\n\ntype Props = {\n  section: React.RefObject<HTMLDivElement>\n};\n\nconst sections = [\"Time Complexity\", \"ArrayList\", \"LinkedList\", \"Priority Queues\", \"Binary Search Trees\", \"Analysis of Data Structures\"];\n\nlet wrapperStyle = {\n  width: \"100%\"\n}\n\nfunction DataStructures(props: Props) {\n  const {section} = props;\n\n  useEffect(() => {\n    section.current!.style.borderLeft = \"10px white solid\";\n    section.current!.style.backgroundColor = \"#29354b\";\n    return () => {\n      if (section.current) {\n        section.current!.style.borderLeft = \"none\";\n        section.current!.style.backgroundColor = \"inherit\";\n      }\n    }\n  }, [])\n\n  return (\n    <div className={\"documentation-wrapper\"}>\n      <div className={\"documentation\"}>\n        <div className={\"markdown\"}>\n          <Markdown markdown={datastructuresMarkdown}/>\n        </div>\n        <Sections wrapperStyle={wrapperStyle} sectionHighlight={false} sections={sections}\n                  directory={\"/AlgoVisual/documentation/data-structures\"}/>\n      </div>\n    </div>\n  );\n}\n\nexport default DataStructures;\n","import React, {useEffect, useLayoutEffect} from \"react\";\nimport {sortingMarkdown} from \"../Markdown/Markdown\";\nimport Markdown from \"../../Common/Markdown\";\nimport Sections from \"../../Common/Sections\";\n\ntype Props = {\n  section: React.RefObject<HTMLDivElement>\n};\n\nconst sections = [\"Bubble Sort\", \"Insertion Sort\", \"Selection Sort\", \"Merge Sort\", \"Quick Sort\", \"Heap Sort\", \"Analysis of Sorting Algorithms\"]\nlet wrapperStyle = {\n  width: \"100%\"\n}\n\nfunction Sorting(props: Props) {\n  const {section} = props;\n\n  useEffect(() => {\n    section.current!.style.borderLeft = \"10px white solid\";\n    section.current!.style.backgroundColor = \"#29354b\";\n    return () => {\n      if (section.current){\n        section.current!.style.borderLeft = \"none\";\n        section.current!.style.backgroundColor = \"inherit\";\n      }\n    }\n  }, [])\n\n  return (\n    <div className={\"documentation-wrapper\"}>\n      <div className={\"documentation\"}>\n        <div className={\"markdown\"}>\n          <Markdown markdown={sortingMarkdown}/>\n        </div>\n        <Sections wrapperStyle={wrapperStyle} sections={sections}\n                  directory={\"/AlgoVisual/documentation/sorting\"} sectionHighlight={false}/>\n      </div>\n    </div>\n  );\n}\n\nexport default Sorting;\n","import React, {useEffect, useLayoutEffect} from \"react\";\nimport Markdown from \"../../Common/Markdown\";\nimport {pathfindingMarkdown} from \"../Markdown/Markdown\";\nimport Sections from \"../../Common/Sections\";\n\ntype Props = {\n  section: React.RefObject<HTMLDivElement>\n};\ntype State = {};\n\nconst sections = [\"Graphs\", \"Depth-First Search (DFS)\", \"Breadth-First Search (BFS)\", \"Edge-Weighted Graphs\",\n  \"Minimum Spanning Trees (MSTs)\", \"Edge-Weighted Digraphs\", \"Shortest Paths\", \"Maxflow-Mincut\"];\n\nlet wrapperStyle = {\n  width: \"100%\"\n}\n\nfunction Pathfinding(props: Props) {\n  const {section} = props;\n\n  useEffect(() => {\n    section.current!.style.borderLeft = \"10px white solid\";\n    section.current!.style.backgroundColor = \"#29354b\";\n    return () => {\n      if (section.current){\n        section.current!.style.borderLeft = \"none\";\n        section.current!.style.backgroundColor = \"inherit\";\n      }\n    }\n  }, [])\n\n  return (\n    <div className={\"documentation-wrapper\"}>\n      <div className={\"documentation\"}>\n        <div className={\"markdown\"}>\n          <Markdown markdown={pathfindingMarkdown}/>\n        </div>\n        <Sections wrapperStyle={wrapperStyle} sectionHighlight={false} sections={sections}\n                  directory={\"/AlgoVisual/documentation/pathfinding\"}/>\n      </div>\n    </div>\n  );\n}\n\nexport default Pathfinding;\n","import { useEffect } from 'react';\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\n\ninterface Props extends RouteComponentProps<any> { }\n\nfunction ScrollToTopOnNewPage(props: Props) {\n    const {history} = props;\n    useEffect(() => {\n        const unlisten = history.listen(() => {\n            window.scrollTo(0, 0);\n        });\n        return () => {\n            unlisten();\n        }\n    }, []);\n\n    return null;\n}\n\nexport default withRouter(ScrollToTopOnNewPage);\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport \"./NextSection.css\";\n\ntype Props = {\n    directory: string\n    sectionName: string\n};\ntype State = {};\n\nconst endSectionStyle = {\n    marginTop: \"20px\"\n}\n\nconst nextSectionStyle = {\n    margin: \"15px 0\",\n    display: \"flex\",\n    padding: \"10px 5px\",\n    borderRadius: \"5px\",\n    color: \"black\"\n}\n\nconst nextSectionTextStyle = {\n    marginLeft: \"10px\",\n    fontSize: \"15px\"\n}\n\nconst textDecoration = {\n    textDecoration: \"none\"\n}\n\nclass NextSection extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className={\"next-section-wrapper\"}>\n                <p style={endSectionStyle}> You have reached the end of this section! Continue to the next section: </p>\n                <Link to={this.props.directory} style={textDecoration}>\n                    <div className={\"next-section\"} style={nextSectionStyle}>\n                        <i className=\"fas fa-arrow-right\"/>\n                        <p style={nextSectionTextStyle}> {this.props.sectionName} </p>\n                    </div>\n                </Link>\n            </div>\n        )\n    }\n}\n\nexport default NextSection;","import React, {useEffect} from \"react\";\nimport Markdown from \"./Markdown\";\nimport NextSection from \"./NextSection\";\nimport Sections from \"./Sections\";\n\ntype Props = | {\n  markdown: string,\n  nextSection: false,\n  section: React.RefObject<HTMLDivElement>,\n  partNumber: number,\n  sections: string[],\n  mainDirectory: string\n}\n  | {\n  markdown: string,\n  nextSection: true,\n  nextSectionDirectory: string,\n  nextSectionName: string,\n  section: React.RefObject<HTMLDivElement>,\n  partNumber: number,\n  sections: string[],\n  mainDirectory: string\n};\n\nconst endSectionStyle = {\n  margin: \"20px 0\"\n}\n\nlet wrapperStyle = {\n  width: \"60%\"\n}\n\nfunction MarkdownPage(props: Props) {\n  const {section, markdown, sections, mainDirectory, partNumber} = props;\n\n  useEffect(() => {\n    section.current!.style.borderLeft = \"10px white solid\";\n    section.current!.style.backgroundColor = \"#29354b\";\n    return () => {\n      if (section.current){\n        section.current!.style.borderLeft = \"none\";\n        section.current!.style.backgroundColor = \"inherit\";\n      }\n    }\n  }, [])\n\n  return (\n    <div className={\"documentation-wrapper\"}>\n      <div className={\"documentation\"}>\n        <div className={\"markdown\"}>\n          <Markdown markdown={markdown}/>\n        </div>\n        {props.nextSection ? <NextSection directory={props.nextSectionDirectory} sectionName={props.nextSectionName}/> :\n          <p style={endSectionStyle}> You have reached the end of the section!</p>}\n        <Sections wrapperStyle={wrapperStyle} sections={sections} directory={mainDirectory}\n                  sectionHighlight={true}\n                  section={partNumber}/>\n      </div>\n    </div>\n  );\n}\n\nexport default MarkdownPage;\n","import React, {useEffect, useState} from \"react\";\nimport \"./ScrollToTopButton.css\";\n\nfunction ScrollToTopButton() {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    document.addEventListener(\"scroll\", () => {\n      toggleVisibility();\n    });\n  })\n\n  const toggleVisibility = () => {\n    if (window.scrollY > 100) {\n      setIsVisible(true);\n    } else {\n      setIsVisible(false);\n    }\n  }\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\"\n    });\n  }\n\n  return (\n    <div className={\"scroll-to-top-button\"}>\n      {isVisible && (\n        <div onClick={scrollToTop}>\n          <div className={\"scroll-up\"}>\n            <i className=\"fas fa-angle-up\"/>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ScrollToTopButton;\n","import React, {createRef, useState} from \"react\";\nimport \"./Documentation.css\";\nimport {Link, Route, Switch} from \"react-router-dom\";\nimport Introduction from \"../Sections/Introduction/Introduction\";\nimport DataStructures from \"../Sections/DataStructures/DataStructures\";\nimport Sorting from \"../Sections/Sorting/Sorting\";\nimport Pathfinding from \"../Sections/Pathfinding/Pathfinding\";\nimport * as pageMarkdown from \"../Sections/Markdown/Markdown\";\nimport ScrollToTopOnNewPage from \"../Common/ScrollToTopOnNewPage\";\n\nimport MarkdownPage from \"../Common/MarkdownPage\";\nimport \"../Sections/Markdown/Markdown.css\";\nimport ScrollToTopButton from \"../Common/ScrollToTopButton\";\n\nconst dataStructuresSections = [\"Time Complexity\", \"ArrayList\", \"LinkedList\", \"Priority Queue\", \"Binary Search Trees\", \"Analysis of Data Structures\"];\nconst sortingSections = [\"Bubble Sort\", \"Insertion Sort\", \"Selection Sort\", \"Merge Sort\", \"Quick Sort\", \"Heap Sort\", \"Analysis of Sorting Algorithms\"]\nconst pathfindingSections = [\"Graphs\", \"Depth-First Search (DFS)\", \"Breadth-First Search (BFS)\", \"Edge-Weighted Graphs\",\n  \"Minimum Spanning Trees (MSTs)\", \"Edge-Weighted Digraphs\", \"Shortest Paths\", \"Maxflow-Mincut\"];\n\nfunction Documentation() {\n  const gettingStartedSection = createRef<HTMLDivElement>();\n  const dataStructuresSection = createRef<HTMLDivElement>();\n  const sortingSection = createRef<HTMLDivElement>();\n  const pathfindingSection = createRef<HTMLDivElement>();\n\n  return (\n    <main className={\"main-sidebar\"}>\n      <div className={\"sidebar\"}>\n        <div id={\"documentation-section\"}>\n          <Link to={\"/AlgoVisual/documentation\"} className={\"documentation-link\"}>\n            <div className={\"section\"} ref={gettingStartedSection}>\n              <p> Introduction </p>\n            </div>\n          </Link>\n\n          <Link to={\"/AlgoVisual/documentation/data-structures\"} className={\"documentation-link\"}>\n            <div className={\"section\"} ref={dataStructuresSection}>\n              <p> Data Structures </p>\n            </div>\n          </Link>\n\n          <Link to={\"/AlgoVisual/documentation/sorting\"} className={\"documentation-link\"}>\n            <div className={\"section\"} ref={sortingSection}>\n              <p> Sorting </p>\n            </div>\n          </Link>\n\n          <Link to={\"/AlgoVisual/documentation/pathfinding\"} className={\"documentation-link\"}>\n            <div className={\"section\"} ref={pathfindingSection}>\n              <p> Pathfinding </p>\n            </div>\n          </Link>\n        </div>\n      </div>\n\n      { /* scrolls to top of page */}\n      <ScrollToTopOnNewPage/>\n      <Switch>\n        {/* main documentation page */}\n        <Route exact path={\"/AlgoVisual/documentation\"}>\n          <Introduction section={gettingStartedSection}/>\n        </Route>\n\n        {/* data structures and sections */}\n        <Route exact path={\"/AlgoVisual/documentation/data-structures\"}>\n          <DataStructures section={dataStructuresSection}/>\n        </Route>\n\n        <Route exact path={\"/AlgoVisual/documentation/data-structures/time-complexity\"}>\n          <MarkdownPage mainDirectory={\"/AlgoVisual/documentation/data-structures\"}\n                        sections={dataStructuresSections} partNumber={1}\n                        markdown={pageMarkdown.timeComplexityMarkdown}\n                        section={dataStructuresSection}\n                        nextSectionDirectory={\"/AlgoVisual/documentation/data-structures/array-list\"}\n                        nextSection={true} nextSectionName={\"2. ArrayList\"}/>\n        </Route>\n\n        <Route exact path={\"/AlgoVisual/documentation/data-structures/array-list\"}>\n          <MarkdownPage mainDirectory={\"/AlgoVisual/documentation/data-structures\"}\n                        sections={dataStructuresSections} partNumber={2}\n                        markdown={pageMarkdown.arraylistMarkdown} section={dataStructuresSection}\n                        nextSectionDirectory={\"/AlgoVisual/documentation/data-structures/linked-list\"}\n                        nextSection={true} nextSectionName={\"3. LinkedList\"}/>\n        </Route>\n\n        <Route exact path={\"/AlgoVisual/documentation/data-structures/linked-list\"}>\n          <MarkdownPage mainDirectory={\"/AlgoVisual/documentation/data-structures\"}\n                        sections={dataStructuresSections} partNumber={3}\n                        markdown={pageMarkdown.linkedlistMarkdown} section={dataStructuresSection}\n                        nextSectionDirectory={\"/AlgoVisual/documentation/data-structures/priority-queues\"}\n                        nextSection={true} nextSectionName={\"4. Priority Queues\"}/>\n        </Route>\n\n        <Route exact path={\"/AlgoVisual/documentation/data-structures/priority-queues\"}>\n          <MarkdownPage mainDirectory={\"/AlgoVisual/documentation/data-structures\"}\n                        sections={dataStructuresSections} partNumber={4}\n                        markdown={pageMarkdown.pqMarkdown} section={dataStructuresSection}\n                        nextSectionDirectory={\"/AlgoVisual/documentation/data-structures/binary-search-trees\"}\n                        nextSection={true} nextSectionName={\"5. Binary Search Trees\"}/>\n        </Route>\n\n        <Route exact path={\"/AlgoVisual/documentation/data-structures/binary-search-trees\"}>\n          <MarkdownPage mainDirectory={\"/AlgoVisual/documentation/data-structures\"}\n                        sections={dataStructuresSections} partNumber={5}\n                        markdown={pageMarkdown.binarySearchTreesMarkdown}\n                        section={dataStructuresSection}\n                        nextSectionDirectory={\"/AlgoVisual/documentation/data-structures/analysis-of-data-structures\"}\n                        nextSection={true} nextSectionName={\"6. Analysis of Data Structures\"}/>\n        </Route>\n\n        <Route exact path={\"/AlgoVisual/documentation/data-structures/analysis-of-data-structures\"}>\n          <MarkdownPage mainDirectory={\"/AlgoVisual/documentation/data-structures\"}\n                        sections={dataStructuresSections} partNumber={6}\n                        markdown={pageMarkdown.analysisOfDataStructuresMarkdown}\n                        section={dataStructuresSection}\n                        nextSection={false}/>\n        </Route>\n\n        {/* sorting and sections */}\n        <Route exact path={\"/AlgoVisual/documentation/sorting\"}>\n          <Sorting section={sortingSection}/>\n        </Route>\n\n        <Route exact path={\"/AlgoVisual/documentation/sorting/bubble-sort\"}>\n          <MarkdownPage mainDirectory={\"/AlgoVisual/documentation/sorting\"} sections={sortingSections}\n                        partNumber={1} markdown={pageMarkdown.bubbleSortMarkdown}\n                        section={sortingSection}\n                        nextSectionDirectory={\"/AlgoVisual/documentation/sorting/insertion-sort\"}\n                        nextSection={true} nextSectionName={\"2. Insertion Sort\"}/>\n        </Route>\n\n        <Route exact path={\"/AlgoVisual/documentation/sorting/insertion-sort\"}>\n          <MarkdownPage mainDirectory={\"/AlgoVisual/documentation/sorting\"} sections={sortingSections}\n                        partNumber={2} markdown={pageMarkdown.insertionSortMarkdown}\n                        section={sortingSection}\n                        nextSectionDirectory={\"/AlgoVisual/documentation/sorting/selection-sort\"}\n                        nextSection={true} nextSectionName={\"3. Selection Sort\"}/>\n        </Route>\n\n        <Route exact path={\"/AlgoVisual/documentation/sorting/selection-sort\"}>\n          <MarkdownPage mainDirectory={\"/AlgoVisual/documentation/sorting\"} sections={sortingSections}\n                        partNumber={3} markdown={pageMarkdown.selectionSortMarkdown}\n                        section={sortingSection}\n                        nextSectionDirectory={\"/AlgoVisual/documentation/sorting/merge-sort\"}\n                        nextSection={true} nextSectionName={\"4. Merge Sort\"}/>\n        </Route>\n\n        <Route exact path={\"/AlgoVisual/documentation/sorting/merge-sort\"}>\n          <MarkdownPage mainDirectory={\"/AlgoVisual/documentation/sorting\"} sections={sortingSections}\n                        partNumber={4} markdown={pageMarkdown.mergeSortMarkdown}\n                        section={sortingSection}\n                        nextSectionDirectory={\"/AlgoVisual/documentation/sorting/quick-sort\"}\n                        nextSection={true} nextSectionName={\"5. Quick Sort\"}/>\n        </Route>\n\n        <Route exact path={\"/AlgoVisual/documentation/sorting/quick-sort\"}>\n          <MarkdownPage mainDirectory={\"/AlgoVisual/documentation/sorting\"} sections={sortingSections}\n                        partNumber={5} markdown={pageMarkdown.quickSortMarkdown}\n                        section={sortingSection}\n                        nextSectionDirectory={\"/AlgoVisual/documentation/sorting/heap-sort\"}\n                        nextSection={true} nextSectionName={\"6. Heap Sort\"}/>\n        </Route>\n\n        <Route exact path={\"/AlgoVisual/documentation/sorting/heap-sort\"}>\n          <MarkdownPage mainDirectory={\"/AlgoVisual/documentation/sorting\"} sections={sortingSections}\n                        partNumber={6} markdown={pageMarkdown.heapSortMarkdown}\n                        section={sortingSection}\n                        nextSectionDirectory={\"/AlgoVisual/documentation/sorting/analysis-of-sorting-algorithms\"}\n                        nextSection={true} nextSectionName={\"7. Analysis of Sorting Algorithms\"}/>\n        </Route>\n\n        <Route exact path={\"/AlgoVisual/documentation/sorting/analysis-of-sorting-algorithms\"}>\n          <MarkdownPage mainDirectory={\"/AlgoVisual/documentation/sorting\"} sections={sortingSections}\n                        partNumber={7} markdown={pageMarkdown.analysisOfSortingAlgorithmsMarkdown}\n                        section={sortingSection}\n                        nextSection={false}/>\n        </Route>\n\n        {/* pathfinding and sections */}\n        <Route exact path={\"/AlgoVisual/documentation/pathfinding\"}>\n          <Pathfinding section={pathfindingSection}/>\n        </Route>\n\n        <Route exact path={\"/AlgoVisual/documentation/pathfinding/graphs\"}>\n          <MarkdownPage mainDirectory={\"/AlgoVisual/documentation/pathfinding\"}\n                        sections={pathfindingSections} partNumber={1}\n                        markdown={pageMarkdown.graphsMarkdown} section={pathfindingSection}\n                        nextSection={true} nextSectionName={\"2. Depth-First Search (DFS)\"}\n                        nextSectionDirectory={\"/AlgoVisual/documentation/pathfinding/depth-first-search\"}/>\n\n        </Route>\n\n        <Route exact path={\"/AlgoVisual/documentation/pathfinding/depth-first-search\"}>\n          <MarkdownPage mainDirectory={\"/AlgoVisual/documentation/pathfinding\"}\n                        sections={pathfindingSections} partNumber={2}\n                        markdown={pageMarkdown.dfsMarkdown} section={pathfindingSection}\n                        nextSection={true} nextSectionName={\"3. Breadth-First Search (BFS)\"}\n                        nextSectionDirectory={\"/AlgoVisual/documentation/pathfinding/breadth-first-search\"}/>\n        </Route>\n\n        <Route exact path={\"/AlgoVisual/documentation/pathfinding/breadth-first-search\"}>\n          <MarkdownPage mainDirectory={\"/AlgoVisual/documentation/pathfinding\"}\n                        sections={pathfindingSections} partNumber={3}\n                        markdown={pageMarkdown.bfsMarkdown} section={pathfindingSection}\n                        nextSection={true} nextSectionName={\"4. Edge-Weighted Graphs\"}\n                        nextSectionDirectory={\"/AlgoVisual/documentation/pathfinding/edge-weighted-graphs\"}/>\n        </Route>\n\n        <Route exact path={\"/AlgoVisual/documentation/pathfinding/edge-weighted-graphs\"}>\n          <MarkdownPage mainDirectory={\"/AlgoVisual/documentation/pathfinding\"}\n                        sections={pathfindingSections} partNumber={4}\n                        markdown={pageMarkdown.edgeWeightedGraphsMarkdown} section={pathfindingSection}\n                        nextSection={true} nextSectionName={\"5. Minimum Spanning Trees\"}\n                        nextSectionDirectory={\"/AlgoVisual/documentation/pathfinding/minimum-spanning-trees\"}/>\n        </Route>\n\n        <Route exact path={\"/AlgoVisual/documentation/pathfinding/minimum-spanning-trees\"}>\n          <MarkdownPage mainDirectory={\"/AlgoVisual/documentation/pathfinding\"}\n                        sections={pathfindingSections} partNumber={5}\n                        markdown={pageMarkdown.mstsMarkdown} section={pathfindingSection}\n                        nextSection={true} nextSectionName={\"6. Edge-Weighted Digraphs\"}\n                        nextSectionDirectory={\"/AlgoVisual/documentation/pathfinding/edge-weighted-digraphs\"}/>\n        </Route>\n\n        <Route exact path={\"/AlgoVisual/documentation/pathfinding/edge-weighted-digraphs\"}>\n          <MarkdownPage mainDirectory={\"/AlgoVisual/documentation/pathfinding\"}\n                        sections={pathfindingSections} partNumber={6}\n                        markdown={pageMarkdown.edgeWeightedDigraphsMarkdown} section={pathfindingSection}\n                        nextSection={true} nextSectionName={\"7. Shortest Paths\"}\n                        nextSectionDirectory={\"/AlgoVisual/documentation/pathfinding/shortest-paths\"}/>\n        </Route>\n\n        <Route exact path={\"/AlgoVisual/documentation/pathfinding/shortest-paths\"}>\n          <MarkdownPage mainDirectory={\"/AlgoVisual/documentation/pathfinding\"}\n                        sections={pathfindingSections} partNumber={7}\n                        markdown={pageMarkdown.shortestPathsMarkdown} section={pathfindingSection}\n                        nextSection={true} nextSectionName={\"8. Maxflow-Mincut\"}\n                        nextSectionDirectory={\"/AlgoVisual/documentation/pathfinding/maxflow-mincut\"}/>\n        </Route>\n\n        <Route exact path={\"/AlgoVisual/documentation/pathfinding/maxflow-mincut\"}>\n          <MarkdownPage mainDirectory={\"/AlgoVisual/documentation/pathfinding\"}\n                        sections={pathfindingSections} partNumber={8}\n                        markdown={pageMarkdown.maxFlowMinCutMarkdown} section={pathfindingSection}\n                        nextSection={false}/>\n        </Route>\n      </Switch>\n\n      <ScrollToTopButton/>\n    </main>\n  );\n}\n\nexport default Documentation;\n","export function getBubbleSortAnimations(arr: number[]) {\n    let animations: [number, number, string, string][] = [];\n    bubbleSort(arr, animations);\n    return animations;\n}\n\nfunction bubbleSort(arr: number[], animations: [number, number, string, string][]) {\n    for (let i = 0; i < arr.length - 1; i++) {\n        let count = 0;\n        for (let j = 0; j < arr.length - 1 - i; j++) {\n            // comparing values\n            animations.push([j, j + 1, 'color', 'insert']);\n            animations.push([j, j + 1, 'color', 'revert']);\n            if (arr[j] > arr[j + 1]) {\n                animations.push([j, arr[j + 1], 'swap', 'swap']);\n                animations.push([j + 1, arr[j], 'swap', 'swap']);\n                swap(arr, j, j + 1);\n            } else {\n                count++;\n            }\n        }\n        if (count === arr.length - 1){\n            break;\n        }\n    }\n}\n\nfunction swap(arr: number[], i: number, j: number) {\n    let temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n","export function getMergeSortAnimations(array: number[]) {\n    let animations: [number, number, string, string][] = [];\n    const auxiliaryArray = array.slice();\n    mergeSort(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n\nfunction mergeSort(mainArray: number[], startIdx: number, endIdx: number, auxiliaryArray: number[], animations: [number, number, string, string][]) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSort(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSort(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction merge(mainArray: number[], startIdx: number, middleIdx: number, endIdx: number, auxiliaryArray: number[], animations: [number, number, string, string][]) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n        animations.push([i, j, 'color', 'insert']);\n        animations.push([i, j, 'color', 'revert']);\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n            animations.push([k, auxiliaryArray[i], 'swap', 'swap']);\n            mainArray[k++] = auxiliaryArray[i++];\n        } else {\n            animations.push([k, auxiliaryArray[j], 'swap', 'swap']);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    }\n    while (i <= middleIdx) {\n        animations.push([i, i, 'color', 'insert']);\n        animations.push([i, i, 'color', 'revert']);\n        animations.push([k, auxiliaryArray[i], 'swap', 'swap']);\n        mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n        animations.push([j, j, 'color', 'insert']);\n        animations.push([j, j, 'color', 'revert']);\n        animations.push([k, auxiliaryArray[j], 'swap', 'swap']);\n        mainArray[k++] = auxiliaryArray[j++];\n    }\n}\n","export function getQuickSortAnimations(arr: number[]) {\n    let animations: [number, number, string, string][] = [];\n    quickSort(arr, 0, arr.length - 1, animations);\n    return animations;\n}\n\nfunction quickSort(arr: number[], l: number, h: number, animations: [number, number, string, string][]) {\n    if (l < h) {\n        let j = partition(arr, l, h, animations);\n        quickSort(arr, l, j, animations);\n        quickSort(arr, j + 1, h, animations);\n    }\n}\n\nfunction partition(arr: number[], l: number, h: number, animations: [number, number, string, string][]) {\n    let pivotIndex = randomIntFromInterval(l, h);\n    let swappedPivotIndex:any;\n    let pivot = arr[pivotIndex];\n    animations.push([pivotIndex, pivotIndex, 'pivot', 'insert']);\n    let i = l - 1;\n    let j = h + 1;\n    while (true) {\n        do {\n            i++;\n            animations.push([i, i, 'color', 'insert']);\n            animations.push([i, i, 'color', 'revert']);\n        } while (arr[i] < pivot);\n\n        do {\n            j--;\n            animations.push([j, j, 'color', 'insert']);\n            animations.push([j, j, 'color', 'revert']);\n        } while (arr[j] > pivot);\n\n        if (i >= j) {\n            animations.push([swappedPivotIndex, swappedPivotIndex, 'pivot', 'revert']);\n            return j;\n        }\n\n\n        animations.push([i, arr[j], 'swap', 'swap']);\n        animations.push([j, arr[i], 'swap', 'swap']);\n        swap(arr, i, j);\n\n\n        if (i === pivotIndex){\n            animations.push([j, j, 'pivot', 'insert']);\n            swappedPivotIndex = j;\n        } else if (j === pivotIndex){\n            animations.push([i, i, 'pivot', 'insert']);\n            swappedPivotIndex = i;\n        }\n    }\n}\n\nfunction swap(arr: number[], i: number, j: number) {\n    let temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n\nfunction randomIntFromInterval(min: number, max: number) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min) + min);\n}","export function getHeapSortAnimations(arr: number[]) {\n    let animations: [number, number, string, string][] = [];\n    heapSort(arr, animations);\n    return animations;\n}\n\nfunction heapSort(arr: number[], animations: [number, number, string, string][]) {\n    let n = arr.length;\n    for (let k = n / 2; k >= 1; k--) {\n        sink(arr, k, n, animations);\n    }\n\n    let k = n;\n    while (k > 1) {\n        swap(arr, 1, k--, animations);\n        sink(arr, 1, k, animations);\n    }\n}\n\n// helper methods\nfunction sink(arr: number[], k: number, n: number, animations: [number, number, string, string][]) {\n    while (2 * k <= n) {\n        let j = 2 * k;\n        if (j < n && less(arr, j, j + 1)) {\n            j++;\n        }\n\n        if (!less(arr, k, j)) {\n            break;\n        }\n        swap(arr, k, j, animations);\n        k = j;\n    }\n}\n\nfunction less(arr: number[], i: number, j: number) {\n    return arr[i - 1] < arr[j - 1];\n}\n\nfunction swap(arr: number[], i: number, j: number, animations: [number, number, string, string][]) {\n    animations.push([i - 1, i - 1, 'color', 'insert']);\n    animations.push([i - 1, i - 1, 'color', 'revert']);\n    animations.push([i - 1, arr[j - 1], 'swap', 'swap']);\n    animations.push([j - 1, j - 1, 'color', 'insert'])\n    animations.push([j - 1, j - 1, 'color', 'revert'])\n    animations.push([j - 1, arr[i - 1], 'swap', 'swap']);\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j - 1];\n    arr[j - 1] = temp;\n}\n","export function getSelectionSortAnimations(arr: number[]) {\n    let animations: [number, number, string, string][] = [];\n    selectionSort(arr, animations);\n    return animations;\n}\n\nfunction selectionSort(arr: number[], animations: [number, number, string, string][]) {\n    for (let i = 0; i < arr.length; i++) {\n        let min = arr[i];\n        let minIndex = i;\n        for (let j = i; j < arr.length; j++) {\n            animations.push([j, j, 'color', 'insert']);\n            animations.push([j, j, 'color', 'revert']);\n            if (min > arr[j]){\n                min = arr[j];\n                minIndex = j;\n            }\n        }\n        animations.push([i, arr[minIndex], 'swap', 'swap']);\n        animations.push([minIndex, arr[i], 'swap', 'swap']);\n        swap(arr, i, minIndex);\n    }\n}\n\nfunction swap(arr: number[], i: number, j: number) {\n    let temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n","export const enabledSliderStyle = {\n    color: \"#33435d\",\n    \":hover\": {\n        boxShadow: 0\n    },\n\n    '& .MuiSlider-thumb': {\n        bgcolor: \"#85a4d9\",\n        '&:focus, &:hover, &.Mui-active, &.Mui-focusVisible': {\n            boxShadow: '0',\n        },\n    },\n    '& .MuiSlider-valueLabel': {\n        display: \"none\"\n    }\n}\n\nexport const disabledSliderStyle = {\n    '& .MuiSlider-thumb': {\n        bgcolor: \"#f5a0a0\",\n        \":hover\": {\n            boxShadow: 0\n        },\n    },\n}\n\nexport const disabledButtonStyle = {\n    color: '#f5a0a0',\n    cursor: 'default'\n}\n\nexport const enabledButtonStyle = {\n    cursor: 'pointer',\n    color: '#fff'\n}\n","import React from \"react\";\n\nimport {enabledButtonStyle, disabledButtonStyle} from \"./Styles\";\n\ntype Props = {\n  buttonText: String\n  disabled: boolean,\n  onClick: React.MouseEventHandler<HTMLButtonElement>,\n};\n\nfunction AlgoButton(props: Props) {\n  const {buttonText, disabled, onClick} = props;\n\n  const buttonEnter = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!disabled) {\n      e.currentTarget.style.color = \"#98d6e8\";\n    }\n  }\n\n  const buttonLeave = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!disabled) {\n      e.currentTarget.style.color = \"#fff\";\n    }\n  }\n\n  const buttonStyle = disabled ? disabledButtonStyle : enabledButtonStyle;\n\n  return (\n    <button disabled={disabled} className={\"sidebar-button\"} onClick={onClick} style={buttonStyle}\n            onMouseEnter={buttonEnter} onMouseLeave={buttonLeave}>\n      {buttonText}\n    </button>\n  );\n\n}\n\nexport default AlgoButton;\n","import React from \"react\";\nimport AlgoButton from \"../AlgoButton\";\n\ntype Props = {\n  settingDescription: String,\n  buttonText: String\n  disabled: boolean,\n  onClick: React.MouseEventHandler<HTMLButtonElement>,\n};\n\nfunction AlgoButtonSetting(props: Props) {\n  const {settingDescription, buttonText, disabled, onClick} = props;\n\n  return (\n    <div className={\"sidebar-setting\"}>\n      <p> {settingDescription} </p>\n      <AlgoButton buttonText={buttonText} disabled={disabled}\n                  onClick={onClick}/>\n    </div>\n  );\n}\n\nexport default AlgoButtonSetting;\n","import React from \"react\";\nimport {Slider} from \"@mui/material\";\nimport {disabledButtonStyle, disabledSliderStyle, enabledButtonStyle, enabledSliderStyle} from \"../Styles\";\n\ntype Props = {\n  settingDescription: String,\n  statusDescription: String,\n  disabled: boolean,\n  onChange: any,\n  defaultValue: number,\n  min: number,\n  max: number,\n};\n\nfunction AlgoSliderSetting(props: Props) {\n  const {settingDescription, statusDescription, disabled, onChange, defaultValue, min, max} = props;\n\n  const sliderStyle = disabled ? disabledSliderStyle : enabledSliderStyle;\n\n  return (\n    <div className={\"sidebar-setting\"}>\n      <p> {settingDescription} </p>\n      <p> {statusDescription} </p>\n      <Slider sx={sliderStyle} disabled={disabled} min={min}\n              onChange={onChange} max={max} defaultValue={defaultValue}\n              valueLabelDisplay=\"auto\"/>\n    </div>\n  );\n}\n\nexport default AlgoSliderSetting;\n","import React, {ChangeEvent, createRef, useEffect, useState} from \"react\";\nimport \"./SortingVisualizer.css\";\nimport {getInsertionSortAnimations} from \"./Algorithms/InsertionSort\";\nimport {getBubbleSortAnimations} from \"./Algorithms/BubbleSort\";\nimport {getMergeSortAnimations} from \"./Algorithms/MergeSort\";\nimport {getQuickSortAnimations} from \"./Algorithms/QuickSort\";\nimport {getHeapSortAnimations} from \"./Algorithms/HeapSort\";\nimport {getSelectionSortAnimations} from \"./Algorithms/SelectionSort\";\nimport AlgoButton from \"../Common/AlgoButton\";\nimport AlgoButtonSetting from \"../Common/Settings/AlgoButtonSetting\";\nimport AlgoSliderSetting from \"../Common/Settings/AlgoSliderSetting\";\nimport {enabledButtonStyle, disabledButtonStyle} from \"../Common/Styles\";\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = '#98d6e8';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = '#33435d';\n\n// sorting algorithms\nconst options = [\"Bubble Sort\", \"Insertion Sort\", \"Selection Sort\", \"Merge Sort\", \"Quick Sort\", \"Heap Sort\"];\n\ntype Props = {};\n\nfunction SortingVisualizer(props: Props) {\n  const dropdownSelection = createRef<HTMLDivElement>();\n  const dropdownCaret = createRef<HTMLDivElement>();\n  const [arr, setArr] = useState<number[]>([]);\n  const [numberOfBars, setNumberOfBars] = useState(100);\n  const [sortingSpeed, setSortingSpeed] = useState(1);\n  const [sortingAlgorithm, setSortingAlgorithm] = useState('Quick Sort');\n  const [showSortingOptions, setShowSortingOptions] = useState(false);\n  const [optionsDisabled, setOptionsDisabled] = useState(false);\n  const [dropdownStyle, setDropdownStyle] = useState(enabledButtonStyle);\n\n  useEffect(() => {\n    resetArray();\n    window.addEventListener('resize', () => {\n      resetArray();\n    }, true);\n  }, [])\n\n  useEffect(() => {\n    changeWidthBasedOnSize(arr);\n  }, [arr])\n\n  const resetArray = () => {\n    // resize the array based on height of screen\n    if (!optionsDisabled) {\n      let screenHeight = document.getElementById(\"app-wrapper\")!.clientHeight;\n      let headerHeight = document.getElementById(\"header\")!.clientHeight;\n      let footerHeight = document.getElementById(\"footer\")!.clientHeight;\n      let containerHeight = screenHeight - headerHeight - footerHeight;\n      containerHeight = containerHeight < 600 ? footerHeight * 8 : containerHeight < 200 ? 1 : containerHeight;\n      let maxBarHeight = containerHeight - 200;\n      let arr: number[] = [];\n      for (let i = 0; i < numberOfBars; i++) {\n        arr.push(randomIntFromInterval(5, maxBarHeight));\n      }\n      setArr(arr);\n    }\n  }\n\n  // change width of bars\n  const changeWidthBasedOnSize = (arr: number[]) => {\n    if (arr.length <= 20) {\n      changeBarsWidth(60)\n    } else if (arr.length <= 40) {\n      changeBarsWidth(35)\n    } else if (arr.length <= 100) {\n      changeBarsWidth(10);\n    } else if (arr.length <= 150) {\n      changeBarsWidth(8);\n    } else if (arr.length <= 200) {\n      changeBarsWidth(5);\n    } else {\n      changeBarsWidth(3);\n    }\n  }\n\n  const changeBarsWidth = (width: number) => {\n    let arrayBars = document.getElementsByClassName('array-bar');\n    for (let i = 0; i < arrayBars.length; i++) {\n      let bar = arrayBars[i] as HTMLElement;\n      bar.style.width = width + \"px\";\n    }\n  }\n\n  // displaying the settings\n  useEffect(() => {\n    // this ensures that the slider does not reset the array once the min/max is reached\n    if (numberOfBars > 10 && numberOfBars < 250) {\n      resetArray()\n    }\n  }, [numberOfBars])\n\n  const barsLimit = (e: Event, value: number | number[]) => {\n    setNumberOfBars(value as number);\n  }\n\n  const sliderSpeed = (e: Event, value: number | number[]) => {\n    setSortingSpeed(value as number);\n  }\n\n\n  // methods for dropdown menu\n  useEffect(() => {\n    displaySortingAlgorithms()\n  }, [showSortingOptions])\n\n  const showSortingAlgorithms = (e: React.MouseEvent) => {\n    // ensures that you close menu when clicked again\n    if (!showSortingOptions && !optionsDisabled) {\n      setShowSortingOptions(true);\n      // not sure why this works but will figure out soon\n      // makes dropdown work magically!\n      e.stopPropagation();\n      document.addEventListener(\"click\", closeSortingAlgorithms);\n    }\n  }\n\n  const closeSortingAlgorithms = () => {\n    setShowSortingOptions(false);\n    document.removeEventListener(\"click\", closeSortingAlgorithms)\n  }\n\n  const displaySortingAlgorithms = () => {\n    if (showSortingOptions) {\n      dropdownSelection.current!.style.display = \"block\";\n      dropdownCaret.current!.style.transform = \"rotate(180deg)\";\n      dropdownCaret.current!.style.transition = \"all 250ms linear\";\n    } else {\n      dropdownSelection.current!.style.display = \"none\";\n      dropdownCaret.current!.style.transform = \"rotate(0deg)\";\n      dropdownCaret.current!.style.transition = \"all 250ms linear\";\n    }\n  }\n\n  const changeAlgorithm = (option: string) => {\n    setSortingAlgorithm(option);\n  }\n\n  // sorting animation algorithm\n  const sortingAnimations = (animations: [number, number, string, string][]) => {\n    let animationLength = animations.length * sortingSpeed;\n    enableSettings(animationLength);\n    for (let i = 0; i < animations.length; i++) {\n      let arrayBars = document.getElementsByClassName('array-bar');\n      let animationType = animations[i][2];\n      switch (animationType) {\n        case 'color': {\n          let [barOneIdx, barTwoIdx] = animations[i];\n          let barOne = arrayBars[barOneIdx] as HTMLElement;\n          let barTwo = arrayBars[barTwoIdx] as HTMLElement;\n          let colorState = animations[i][3];\n          let color = colorState === 'insert' ? SECONDARY_COLOR : PRIMARY_COLOR;\n          // keep track of timer to cancel timer operations once the component is unmounted\n          let t = setTimeout(() => {\n            if (barOne !== undefined) {\n              barOne.style.backgroundColor = color;\n              barTwo.style.backgroundColor = color;\n            }\n          }, i * sortingSpeed);\n\n          // clear timeout if bars are undefined (component is unmounted)\n          if (barOne === undefined) {\n            clearTimeout(t);\n          }\n          break;\n        }\n        case 'swap': {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOne = arrayBars[barOneIdx] as HTMLElement;\n          // keep track of timer to cancel timer operations once the component is unmounted\n          let t = setTimeout(() => {\n            if (barOne !== undefined) {\n              barOne.style.height = newHeight + `px`;\n            }\n          }, i * sortingSpeed);\n          // clear timeout if bars are undefined (component is unmounted)\n          if (barOne === undefined) {\n            clearTimeout(t);\n          }\n          break;\n        }\n        case 'pivot': {\n          let [barOneIdx, barTwoIdx] = animations[i];\n          let barOne = arrayBars[barOneIdx] as HTMLElement;\n          let barTwo = arrayBars[barTwoIdx] as HTMLElement;\n          let colorState = animations[i][3];\n          let color = colorState === 'insert' ? '#83f57f' : PRIMARY_COLOR;\n          // keep track of timer to cancel timer operations once the component is unmounted\n          let t = setTimeout(() => {\n            if (barOne !== undefined || barTwo !== undefined) {\n              barOne.style.backgroundColor = color;\n              barTwo.style.backgroundColor = color;\n            }\n          }, i * sortingSpeed);\n          // clear timeout if bars are undefined (component is unmounted)\n          if (barOne === undefined || barTwo === undefined) {\n            clearTimeout(t);\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  // run the sorting algorithm and disable buttons\n  useEffect(() => {\n    if (optionsDisabled) {\n      switch (sortingAlgorithm) {\n        case 'Bubble Sort':\n          sortingAnimations(getBubbleSortAnimations(arr));\n          break;\n        case 'Insertion Sort':\n          sortingAnimations(getInsertionSortAnimations(arr));\n          break;\n        case 'Selection Sort':\n          sortingAnimations(getSelectionSortAnimations(arr));\n          break;\n        case 'Merge Sort':\n          sortingAnimations(getMergeSortAnimations(arr));\n          break;\n        case 'Quick Sort':\n          sortingAnimations(getQuickSortAnimations(arr));\n          break;\n        case 'Heap Sort':\n          sortingAnimations(getHeapSortAnimations(arr));\n          break;\n      }\n    }\n  }, [optionsDisabled])\n\n  const runSortingAlgorithm = () => {\n    setOptionsDisabled(true);\n    setDropdownStyle(disabledButtonStyle);\n  }\n\n  // enable settings once the the animation is over\n  const enableSettings = (animationLength: number) => {\n    setTimeout(() => {\n      setOptionsDisabled(false);\n      setDropdownStyle(enabledButtonStyle);\n    }, animationLength);\n  }\n\n  let bars = arr.map((value, idx) => (\n    <div className=\"array-bar\"\n         key={idx}\n         style={{backgroundColor: PRIMARY_COLOR, height: value + `px`}}>\n    </div>\n  ))\n\n  return (\n    <main className=\"main-sidebar\">\n      <div className={\"sidebar-wrapper\"}>\n        <div className={\"sidebar\"}>\n          <div className={\"sidebar-settings\"}>\n            <AlgoSliderSetting settingDescription={\"Control number of bars\"}\n                               statusDescription={numberOfBars + \" bars\"}\n                               disabled={optionsDisabled}\n                               onChange={barsLimit} defaultValue={100} min={10} max={250}/>\n\n            <AlgoSliderSetting settingDescription={\"Control visualizer speed\"}\n                               statusDescription={sortingSpeed + \" ms\"}\n                               disabled={optionsDisabled}\n                               onChange={sliderSpeed} defaultValue={1} min={1} max={100}/>\n\n            <div className={\"sidebar-setting\"}>\n              <p> Choose an algorithm </p>\n\n              <div className={\"selection-dropdown\"} style={dropdownStyle} onClick={showSortingAlgorithms}>\n                <div className={\"current-option\"}>\n                  <p> {sortingAlgorithm} </p>\n                </div>\n\n                <div className={\"caret-down\"}>\n                  <i className=\"fas fa-caret-down\" ref={dropdownCaret}> </i>\n                </div>\n              </div>\n              <div className={\"selection-options\"} ref={dropdownSelection}>\n                <ul>\n                  {\n                    options.map(option => (\n                      <div onClick={() => changeAlgorithm(option)}\n                           key={option}> {option} </div>\n                    ))\n                  }\n                </ul>\n              </div>\n\n              <AlgoButton buttonText={\"Run\"} disabled={optionsDisabled}\n                          onClick={runSortingAlgorithm}/>\n            </div>\n\n            <AlgoButtonSetting settingDescription={\"Reset the array\"} buttonText={\"Reset\"}\n                               disabled={optionsDisabled} onClick={resetArray}/>\n          </div>\n        </div>\n      </div>\n\n      <div className={\"main-content\"}>\n        <div id={\"sorting-visualizer\"}>\n          {bars}\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport default SortingVisualizer;\n\nfunction randomIntFromInterval(min: number, max: number) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","export function getInsertionSortAnimations(arr: number[]) {\n    let animations: [number, number, string, string][] = [];\n    insertionSort(arr, animations);\n    return animations;\n}\n\nfunction insertionSort(arr: number[], animations: [number, number, string, string][]) {\n    for (let i = 1; i < arr.length; i++) {\n        let key = arr[i];\n        let j = i - 1;\n        while (j >= 0 && arr[j] > key) {\n            animations.push([j + 1, j, 'color', 'insert']);\n            animations.push([j + 1, j, 'color', 'revert']);\n            animations.push([j + 1, arr[j], 'swap', 'swap']);\n            arr[j + 1] = arr[j];\n            j--;\n        }\n        animations.push([j + 1, i, 'color', 'insert']);\n        animations.push([j + 1, i, 'color', 'revert']);\n        animations.push([j + 1, key, 'swap', 'swap']);\n        arr[j + 1] = key;\n    }\n}\n","import React from \"react\";\nimport \"./GridNode.css\";\n\ntype Props = {\n  col: number,\n  isFinish: boolean,\n  isStart: boolean,\n  isWall: boolean,\n  onMouseDown?: React.MouseEventHandler<HTMLDivElement>,\n  onMouseEnter?: React.MouseEventHandler<HTMLDivElement>,\n  onMouseUp?: React.MouseEventHandler<HTMLDivElement>,\n  onMouseOver?: React.MouseEventHandler<HTMLDivElement>,\n  onTouchStart?: React.TouchEventHandler<HTMLDivElement>,\n  onTouchMove?: React.TouchEventHandler<HTMLDivElement>,\n  onTouchEnd?: React.TouchEventHandler<HTMLDivElement>\n  row: number,\n  style?: any\n};\n\nconst enabledWallStyle = {\n  backgroundColor: '#33435d',\n  border: 1,\n  borderStyle: 'solid',\n  borderColor: '#33435d',\n}\n\nconst disabledWallStyle = {\n  backgroundColor: '#fff',\n  border: 1,\n  borderStyle: 'solid',\n  borderColor: '#8dc3e7',\n}\n\nfunction GridNode(props: Props) {\n  const {\n    col,\n    isFinish,\n    isStart,\n    isWall,\n    onMouseDown,\n    onMouseOver,\n    onMouseEnter,\n    onMouseUp,\n    row,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd\n  } = props;\n  const className = isFinish ? 'node node-finish' : isStart ? 'node node-start' : isWall ? 'node node-wall' : 'node';\n  const nodeID = \"node-\" + row + \"-\" + col\n\n  return (\n    <div id={nodeID} className={className} onMouseOver={onMouseOver} onMouseDown={onMouseDown}\n         onMouseEnter={onMouseEnter}\n         onMouseUp={onMouseUp} style={props.style} onTouchStart={onTouchStart} onTouchMove={onTouchMove}\n         onTouchEnd={onTouchEnd}/>\n  );\n}\n\nexport default GridNode;\n","class IndexMinPQ<Type> {\n    private n: number;\n    private maxN: number;\n    private readonly keys: Type[];\n    private readonly pq: number[];\n    private readonly qp: number[];\n\n    constructor(maxN: number, comparator?: any) {\n        this.n = 0;\n        this.maxN = maxN;\n        this.keys = [];\n        this.pq = [];\n        this.qp = [];\n        for (let i = 0; i <= maxN; i++) {\n            this.pq.push(-1);\n            this.qp.push(-1);\n        }\n    }\n\n    isEmpty(){\n        return this.n === 0;\n    }\n\n    contains(i: number){\n        return this.qp[i] !== -1;\n    }\n\n    insert(i: number, key: Type){\n        ++this.n;\n        this.pq[this.n] = i;\n        this.qp[i] = this.n; // big typo (was pq)\n        this.keys[i] = key;\n        this.swim(this.n);\n    }\n\n    delMin(){\n        let min = this.pq[1];\n        this.exch(1, this.n--);\n        this.sink(1);\n        this.qp[min] = -1;\n        this.pq[this.n+1] = -1;\n        return min;\n     }\n\n     print(){\n        console.log(this.pq);\n     }\n\n     decreaseKey(i:number, key:Type){\n        this.keys[i] = key;\n        this.swim(this.qp[i]);\n     }\n\n    private exch(i:number, j: number){\n        let temp = this.pq[i];\n        this.pq[i] = this.pq[j];\n        this.pq[j] = temp;\n        this.qp[this.pq[i]] = i;\n        this.qp[this.pq[j]] = j;\n    }\n\n    private greater(i:number, j:number){\n        return  this.keys[this.pq[i]] > this.keys[this.pq[j]];\n    }\n\n    private swim(k: number){\n        while(k > 1 && this.greater(Math.floor(k/2), k)){\n            this.exch(k, Math.floor(k/2));\n            k = Math.floor(k/2);\n        }\n    }\n\n    private sink(k: number){\n        while (2 * k <= this.n){\n            let j = 2 * k;\n            if (j < this.n && this.greater(j, j+1)) j++;\n            if (!this.greater(k, j)) break;\n            this.exch(k, j);\n            k = j;\n        }\n    }\n}\n\nexport default IndexMinPQ;","import IndexMinPQ from \"./IndexMinPQ\";\nimport {Node} from \"../Node/Node\";\n\n// uses an indexed min pq to find the shortest path\nexport function dijkstraSP(s: Node, t: Node, grid: Node[][]) {\n    let gridDimensions = grid.length * grid[0].length;\n    let pq = new IndexMinPQ<Number>(gridDimensions);\n    let visitedNodes: Node[] = [];\n    const edgeTo: Node[] = [];\n    s.weight = 0;\n    let colSize = grid[0].length;\n    pq.insert(getIndex(s.row, s.col, colSize), s.weight);\n    while (!pq.isEmpty()) {\n        let nodeIndex = pq.delMin();\n        let row = Math.floor(nodeIndex / colSize);\n        let col = nodeIndex - (row * colSize);\n        let minNode: Node = grid[row][col];\n        if (minNode.isWall) continue;\n        if (minNode.weight === Infinity) return visitedNodes;\n        minNode.isVisited = true;\n        visitedNodes.push(minNode);\n        if (minNode === t) return visitedNodes;\n        const neighbors = getNeighbors(minNode, grid);\n        for (const neighbor of neighbors){\n            relax(neighbor, visitedNodes, pq, colSize);\n        }\n    }\n    return visitedNodes;\n}\n\nfunction relax(v: Node, visitedNodes: Node[], pq: IndexMinPQ<Number>, colSize: number){\n    const vIndex = getIndex(v.row, v.col, colSize);\n    if (pq.contains(vIndex)){\n        pq.decreaseKey(vIndex, v.weight);\n    } else {\n        pq.insert(vIndex, v.weight);\n    }\n}\n\nfunction getNeighbors(v: Node, grid: Node[][]){\n    const {row, col} = v;\n    const neighbors:Node[] = [];\n\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1])\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col])\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1])\n\n    let unvisitedNeighbors = neighbors.filter(neighbor => !neighbor.isVisited);\n    for (const neighbor of unvisitedNeighbors){\n        neighbor.weight = v.weight + 1;\n        neighbor.previousNode = v;\n    }\n    return unvisitedNeighbors;\n}\n\nfunction getIndex(row: number, col: number, colSize: number) {\n    return (row * colSize) + col;\n}\n\nexport function shortestPath(t: Node) {\n    const shortestPath = [];\n    let currentNode: Node | null = t;\n    while (currentNode !== null) {\n        shortestPath.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n\n    if (shortestPath.length === 1){\n        return [];\n    }\n\n    return shortestPath;\n}\n\nexport default dijkstraSP;\n","import {Node} from \"../Node/Node\";\n\nexport function dfsVisited(s: Node, t: Node, grid:Node[][]){\n    const visitedNodes:Node[] = [];\n    dfs(s, t, grid, visitedNodes);\n    return visitedNodes;\n}\n\nfunction dfs(v: Node, t: Node, grid:Node[][], visitedNodes: Node[]){\n    if (grid[t.row][t.col].isVisited){\n        return;\n    }\n\n    if (v.isWall) return;       \n\n    v.isVisited = true;\n    visitedNodes.push(v);\n    const {row, col} = v;\n\n    if (validVertex(row - 1, col, grid) && !grid[row-1][col].isVisited) {\n        grid[row-1][col].previousNode = v;\n        dfs(grid[row - 1][col], t, grid, visitedNodes);\n    }\n    if (validVertex(row, col + 1, grid) && !grid[row][col+1].isVisited) {\n        grid[row][col+1].previousNode = v;\n        dfs(grid[row][col + 1], t, grid, visitedNodes);\n    }\n    if (validVertex(row + 1, col, grid) && !grid[row + 1][col].isVisited) {\n        grid[row+1][col].previousNode = v;\n        dfs(grid[row + 1][col], t, grid, visitedNodes);\n    }\n    if (validVertex(row, col - 1, grid) && !grid[row][col-1].isVisited) {\n        grid[row][col-1].previousNode = v;\n        dfs(grid[row][col - 1], t, grid, visitedNodes);\n    }\n}\n\nfunction validVertex(row: number, col: number, grid: Node[][]){\n    return !(row < 0 || row >= grid.length || col < 0 || col >= grid[0].length);\n}\n\nexport function dfsPath(t: Node){\n    const shortestPath = [];\n    let currentNode: Node | null = t;\n    while (currentNode !== null) {\n        shortestPath.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return shortestPath;\n}","import {Node} from \"../Node/Node\";\n\nexport function bfsVisited(s: Node, t: Node, grid: Node[][]) {\n    const visitedNodes: Node[] = [];\n    const queue: Node[] = [];\n    s.isVisited = true;\n    s.weight = 0;\n    queue.unshift(s);\n    visitedNodes.push(s);\n    while (queue.length !== 0) {\n        const node:Node = queue.shift() as Node;\n        let neighbors = getNeighbors(node, grid);\n        for(const neighbor of neighbors){\n            if (neighbor.isWall) continue;\n            neighbor.previousNode = node;\n            neighbor.weight = node.weight + 1;\n            neighbor.isVisited = true;\n            queue.push(neighbor);\n            visitedNodes.push(neighbor);\n        }\n        if (node === t) return visitedNodes;\n    }\n\n    return visitedNodes;\n}\n\nfunction getNeighbors(v: Node, grid: Node[][]) {\n    const {row, col} = v;\n    const neighbors: Node[] = [];\n    if (validVertex(row + 1, col, grid) && !grid[row + 1][col].isVisited) {\n        neighbors.unshift(grid[row + 1][col]);\n    }\n    if (validVertex(row, col + 1, grid) && !grid[row][col + 1].isVisited) {\n        neighbors.unshift(grid[row][col + 1]);\n    }\n    if (validVertex(row - 1, col, grid) && !grid[row - 1][col].isVisited) {\n        neighbors.unshift(grid[row-1][col]);\n    }\n    if (validVertex(row, col - 1, grid) && !grid[row][col - 1].isVisited) {\n        neighbors.unshift(grid[row][col-1]);\n    }\n    return neighbors;\n}\n\nfunction validVertex(row: number, col: number, grid: Node[][]) {\n    return !(row < 0 || row >= grid.length || col < 0 || col >= grid[0].length);\n}\n\nexport function bfsPath(t: Node) {\n    const shortestPath = [];\n    let currentNode: Node | null = t;\n    while (currentNode !== null) {\n        shortestPath.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return shortestPath;\n}","import {Node} from \"../Node/Node\";\n\nexport function recursiveDivision(grid: Node[][]) {\n    const walls: Node[] = [];\n    addOuterWalls(grid, walls);\n    addInnerWalls(true, 1, grid[0].length - 2, 1, grid.length - 2, grid, walls);\n    return {walls, newGrid: grid};\n}\n\nfunction addOuterWalls(grid: Node[][], walls: Node[]) {\n    for (let i = 0; i < grid.length; i++) {\n        if (i == 0 || i == (grid.length - 1)) {\n            for (let j = 0; j < grid[0].length; j++) {\n                grid[i][j].isWall = true;\n                walls.push(grid[i][j]);\n            }\n        } else {\n            grid[i][0].isWall = true;\n            grid[i][grid[0].length - 1].isWall = true;\n            walls.push(grid[i][0]);\n            walls.push(grid[i][grid[0].length - 1])\n        }\n    }\n}\n\nfunction addInnerWalls(h: boolean, minX: number, maxX: number, minY: number, maxY: number, grid: Node[][], walls: Node[]) {\n    if (h) {\n        if (maxX - minX < 2) {\n            return;\n        }\n        let y = Math.floor(randomNumber(minY, maxY) / 2) * 2;\n        addHWall(minX, maxX, y, grid, walls);\n        addInnerWalls(!h, minX, maxX, minY, y - 1, grid, walls);\n        addInnerWalls(!h, minX, maxX, y + 1, maxY, grid, walls);\n    } else {\n        if (maxY - minY < 2) {\n            return;\n        }\n        let x = Math.floor(randomNumber(minX, maxX) / 2) * 2;\n        addVWall(minY, maxY, x, grid, walls);\n        addInnerWalls(!h, minX, x - 1, minY, maxY, grid, walls);\n        addInnerWalls(!h, x + 1, maxX, minY, maxY, grid, walls);\n    }\n}\n\nfunction addHWall(minX: number, maxX: number, y: number, grid: Node[][], walls: Node[]) {\n    let hole = Math.floor(randomNumber(minX, maxX) / 2) * 2 + 1;\n\n    for (let i = minX; i <= maxX; i++) {\n        if (y === 0){\n            continue;\n        }\n\n        if (i === hole){\n            grid[y][i].isWall = false;\n        } else {\n            grid[y][i].isWall = true;\n            walls.push(grid[y][i]);\n        }\n    }\n}\n\nfunction addVWall(minY: number, maxY: number, x: number, grid: Node[][], walls: Node[]) {\n    let hole = Math.floor(randomNumber(minY, maxY) / 2) * 2 + 1;\n\n    for (let i = minY; i <= maxY; i++) {\n        if (x === 0){\n            continue;\n        }\n\n        if (i === hole){\n            grid[i][x].isWall = false;\n        } else {\n            grid[i][x].isWall = true;\n            walls.push(grid[i][x]);\n        }\n    }\n}\n\nfunction randomNumber(min: number, max: number) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import React, {createRef, useEffect, useState} from \"react\";\nimport GridNode from \"./Node/GridNode\";\nimport \"./PathfindingVisualizer.css\";\nimport {dijkstraSP, shortestPath} from \"./Algorithms/DijkstraSP\";\nimport {Node} from \"./Node/Node\";\nimport {dfsPath, dfsVisited} from \"./Algorithms/DFS\";\nimport {bfsPath, bfsVisited} from \"./Algorithms/BFS\";\nimport update from 'immutability-helper';\nimport {recursiveDivision} from \"./MazeGeneration/RecursiveDivision\";\nimport AlgoButtonSetting from \"../Common/Settings/AlgoButtonSetting\";\nimport {disabledButtonStyle, enabledButtonStyle} from \"../Common/Styles\";\nimport AlgoButton from \"../Common/AlgoButton\";\n\nconst options = [\"DFS\", \"BFS\", \"Dijkstra\", \"A*\"];\n\nconst START_NODE_ROW = 3;\nconst START_NODE_COL = 3;\nconst FINISH_NODE_ROW = 27;\nconst FINISH_NODE_COL = 27;\n\nfunction PathfindingVisualizer() {\n  const dropdownSelection = createRef<HTMLDivElement>();\n  const dropdownCaret = createRef<HTMLDivElement>();\n\n  const [grid, setGrid] = useState<Node[][]>([]);\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\n  const [rows, setRows] = useState(31);\n  const [cols, setCols] = useState(31);\n  const [algorithm, setAlgorithm] = useState(\"Dijkstra\");\n  const [showAlgorithms, setShowAlgorithms] = useState(false);\n  const [optionsDisabled, setOptionsDisabled] = useState(false);\n  const [nodeStyle, setNodeStyle] = useState({width: \"20px\", height: \"20px\"});\n  const [visitedNodes, setVisitedNodes] = useState<Node[]>([]);\n  const [pathNodes, setPathNodes] = useState<Node[]>([]);\n  const [dropdownStyle, setDropdownStyle] = useState(enabledButtonStyle);\n  const [pathfindingSpeed, setPathfindingSpeed] = useState(20);\n  const [clickedRun, setClickedRun] = useState(false);\n\n  useEffect(() => {\n    resizeGrid();\n    setGrid(getInitialGrid);\n    let root = document.getElementById(\"grid-wrapper\");\n    let total = 0;\n    root!.ontouchmove = (e) => {\n      // why does this work??? is this a reference to state grid??? is it cause of pass by val??\n      const wallsGrid: Node[][] = grid.slice();\n      for (let i = 0; i < e.changedTouches.length; i++) {\n        let element = e.changedTouches[i];\n        let v = document.elementFromPoint(element.clientX, element.clientY);\n        if (v != null) {\n          if (v.classList.contains(\"node\") && (!v.classList.contains(\"node-start\") && (!v.classList.contains(\"node-finish\")))) {\n            const line = v.id.split(\"-\");\n            const col = parseInt(line[1]);\n            const row = parseInt(line[2]);\n            total += 10;\n            v.className = 'node node-wall';\n            // results in more efficient results...why?\n            // maybe cause pass by value returns a reference (like in java)????\n            wallsGrid[row][col].isWall = !wallsGrid[row][col].isWall;\n          }\n        }\n      }\n    }\n\n    root!.onmousedown = (e) => {\n      // breaks walls for  grid, do not remove\n      // e.stopImmediatePropagation(); (didn't allow elements to be placed on first click)\n      e.preventDefault();\n      setMouseIsPressed(true);\n    }\n    root!.onmouseup = (e) => {\n      // breaks walls grid, do not remove\n      e.preventDefault();\n      e.stopImmediatePropagation();\n      setMouseIsPressed(false);\n    }\n\n    window.addEventListener('resize', () => {\n      resizeGrid();\n    }, true);\n  }, [])\n\n  const resizeGrid = () => {\n    let COLS = cols;\n    let mainContentWidth = document.getElementById(\"main\")!.offsetWidth;\n    let dimension = Math.floor(mainContentWidth / (COLS * 2.5)) + \"px\";\n    setNodeStyle({width: dimension, height: dimension})\n  }\n\n  useEffect(() => {\n    displayAlgorithms();\n  }, [showAlgorithms])\n\n  const showAlgorithmsDropdown = (e: React.MouseEvent) => {\n    // ensures that you close menu when clicked again\n    if (!showAlgorithms && !optionsDisabled) {\n      setShowAlgorithms(true);\n      // not sure why this works but will figure out soon\n      // makes dropdown work magically!\n      e.stopPropagation();\n      document.addEventListener(\"click\", closeAlgorithmsDropdown);\n    }\n  }\n\n  const closeAlgorithmsDropdown = () => {\n    setShowAlgorithms(false);\n    document.removeEventListener(\"click\", closeAlgorithmsDropdown)\n  }\n\n  const displayAlgorithms = () => {\n    if (showAlgorithms) {\n      dropdownSelection.current!.style.display = \"block\";\n      dropdownCaret.current!.style.transform = \"rotate(180deg)\";\n      dropdownCaret.current!.style.transition = \"all 250ms linear\";\n    } else {\n      dropdownSelection.current!.style.display = \"none\";\n      dropdownCaret.current!.style.transform = \"rotate(0deg)\";\n      dropdownCaret.current!.style.transition = \"all 250ms linear\";\n    }\n  }\n\n  // run algorithms and navbar settings when options get disabled (aka algorithms is being ran)d\n  useEffect(() => {\n    if (clickedRun) {\n      setOptionsDisabled(true);\n      const startNode = grid[START_NODE_ROW][START_NODE_COL];\n      const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n      switch (algorithm) {\n        case 'DFS': {\n          const visitedNodes = dfsVisited(startNode, finishNode, grid);\n          const pathForDFS = dfsPath(finishNode);\n          setVisitedNodes(visitedNodes);\n          setPathNodes(pathNodes);\n          animateVisited(visitedNodes, pathForDFS);\n          break;\n        }\n        case 'BFS': {\n          const visitedNodes = bfsVisited(startNode, finishNode, grid);\n          const pathForBFS = bfsPath(finishNode);\n          setVisitedNodes(visitedNodes);\n          setPathNodes(pathNodes);\n          animateVisited(visitedNodes, pathForBFS);\n          break;\n        }\n        case 'Dijkstra': {\n          const visitedNodes = dijkstraSP(startNode, finishNode, grid);\n          const pathNodes = shortestPath(finishNode);\n          setVisitedNodes(visitedNodes);\n          setPathNodes(pathNodes);\n          animateVisited(visitedNodes, pathNodes);\n          break;\n        }\n      }\n      setClickedRun(false);\n    }\n  }, [clickedRun])\n\n  const getNewGridWithWallToggled = (grid: Node[][], row: number, col: number) => {\n    return update(grid, {\n      [row]: {[col]: {isWall: {$set: !grid[row][col].isWall}}}\n    });\n  }\n\n  const handleMouseDown = (row: number, col: number) => {\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\n    setGrid(newGrid as Node[][]);\n    setMouseIsPressed(true);\n  }\n\n  const handleMouseEnter = (row: number, col: number) => {\n    if (!mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\n    setGrid(newGrid as Node[][]);\n  }\n\n  const mazeGeneration = () => {\n    clearGrid();\n    setOptionsDisabled(true);\n    setDropdownStyle(disabledButtonStyle);\n    // there has to be a timeout before generating the walls or else the walls will be generated instantly\n    // this is because the state of a node is updated rather than a class being added when loading in nodes\n    // this is just a simple fix, as it is a trivial issue\n    const WALL_ANIMATION_LENGTH = 5;\n    setTimeout(() => {\n      let {walls, newGrid} = recursiveDivision(getInitialGrid());\n      let animationLength = walls.length * WALL_ANIMATION_LENGTH;\n      // has to be done to update dom to have correct grid elements\n      setTimeout(() => {\n        setGrid(newGrid);\n      }, animationLength);\n      enableSettings(animationLength)\n      for (let i = 0; i < walls.length; i++) {\n        const v = walls[i];\n        // recursive division sets walls to true/false within the algorithm itself\n        // therefore, if a node is a wall, then turn add it to wall class properties\n        if (v.isWall) {\n          setTimeout(() => {\n            const nodeID = \"node-\" + v.row + \"-\" + v.col;\n            document.getElementById(nodeID)!.className = 'node node-wall';\n          }, i * WALL_ANIMATION_LENGTH)\n        }\n      }\n    }, 100);\n  }\n\n  const animateVisited = (visitedNodes: Node[], pathNodes: Node[]) => {\n    let animationLength = (visitedNodes.length + pathNodes.length) * pathfindingSpeed;\n    setDropdownStyle(disabledButtonStyle);\n    enableSettings(animationLength);\n    // must be <= visitedNodes.length to ensure that the for loop has finished\n    for (let i = 0; i <= visitedNodes.length; i++) {\n      if (i === visitedNodes.length) {\n        setTimeout(() => {\n          animatePath(pathNodes);\n        }, i * pathfindingSpeed);\n      } else {\n        setTimeout(() => {\n          const node = visitedNodes[i];\n          const nodeID = \"node-\" + node.row + \"-\" + node.col;\n          document.getElementById(nodeID)!.className = 'node node-visited';\n        }, i * pathfindingSpeed);\n      }\n    }\n  }\n\n  const animatePath = (pathNodes: Node[]) => {\n    for (let i = 0; i < pathNodes.length; i++) {\n      setTimeout(() => {\n        const node = pathNodes[i];\n        const nodeID = \"node-\" + node.row + \"-\" + node.col;\n        document.getElementById(nodeID)!.className = 'node node-shortest-path';\n      }, i * pathfindingSpeed);\n    }\n  }\n\n  const enableSettings = (animationLength: number) => {\n    setTimeout(() => {\n      setOptionsDisabled(false);\n      setDropdownStyle(enabledButtonStyle);\n    }, animationLength);\n  }\n\n  const clearGrid = () => {\n    // clearing the actual grid itself\n    setGrid(getInitialGrid);\n\n    // clearing html class properties (for css)\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[0].length; j++) {\n        const node = grid[i][j];\n        const nodeID = \"node-\" + node.row + \"-\" + node.col;\n        document.getElementById(nodeID)!.className = 'node';\n      }\n    }\n\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const startNodeID = 'node-' + startNode.row + '-' + startNode.col;\n    document.getElementById(startNodeID)!.className = 'node node-start';\n\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const finishNodeID = 'node-' + finishNode.row + '-' + finishNode.col;\n    document.getElementById(finishNodeID)!.className = 'node node-finish';\n  }\n\n  const getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < rows; row++) {\n      const currentRow = [];\n      for (let col = 0; col < cols; col++) {\n        currentRow.push(createNode(row, col));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  }\n\n  const createNode = (row: number, col: number) => {\n    return {\n      row: row,\n      col: col,\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n      weight: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null\n    } as Node;\n  }\n\n  let nodes = grid.map((row) => {\n    return (\n      <div className={\"grid-row\"}>\n        {row.map((node) => {\n          const {row, col, isFinish, isStart, isWall} = node;\n          return (\n            <GridNode row={row} col={col} isStart={isStart} isFinish={isFinish} isWall={isWall}\n                      onMouseDown={() => handleMouseDown(row, col)}\n                      onMouseEnter={() => handleMouseEnter(row, col)}\n                      onTouchMove={() => handleMouseEnter(row, col)}\n                      style={nodeStyle}\n            />\n          )\n        })}\n      </div>\n    )\n  })\n  return (\n    <main className={\"main-sidebar\"} id={\"main\"}>\n      <div className={\"sidebar\"}>\n        <div className={\"sidebar-settings\"}>\n          <div className={\"sidebar-setting\"}>\n            <p> Choose an algorithm </p>\n\n            <div className={\"selection-dropdown\"} onClick={showAlgorithmsDropdown} style={dropdownStyle}>\n              <div className={\"current-option\"}>\n                <p> {algorithm} </p>\n              </div>\n\n              <div className={\"caret-down\"}>\n                <i className=\"fas fa-caret-down\" ref={dropdownCaret}> </i>\n              </div>\n            </div>\n            <div className={\"selection-options\"} ref={dropdownSelection}>\n              <ul>\n                {\n                  options.map(option => (\n                    <div onClick={() => setAlgorithm(option)}\n                         key={option}> {option} </div>\n                  ))\n                }\n              </ul>\n            </div>\n\n            <AlgoButton buttonText={'Run'} disabled={optionsDisabled} onClick={() => setClickedRun(true)}/>\n          </div>\n\n          <AlgoButtonSetting settingDescription={'Recursive Backtrack Maze'} buttonText={'Generate Maze'}\n                             disabled={optionsDisabled} onClick={mazeGeneration}/>\n\n          <AlgoButtonSetting settingDescription={'Clear Grid'} buttonText={'Clear'}\n                             disabled={optionsDisabled} onClick={clearGrid}/>\n\n        </div>\n      </div>\n\n      <div className={\"main-content\"} id={\"grid-wrapper\"} onMouseLeave={() => setMouseIsPressed(false)}>\n        <div id={\"grid\"}>\n          {nodes}\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport default PathfindingVisualizer;\n\n","import React from 'react';\nimport './App.css';\nimport Header from \"./Layout/Header/Header\";\nimport Footer from \"./Layout/Footer/Footer\";\nimport Home from \"./Layout/Main/Home/Home\";\nimport Documentation from \"./Layout/Main/Documentation/Layout/Documentation\";\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport SortingVisualizer from \"./Layout/Main/SortingVisualizer/SortingVisualizer\";\nimport PathfindingVisualizer from \"./Layout/Main/PathfindingVisualizer/PathfindingVisualizer\";\n\nfunction App() {\n  return (\n    <Router>\n      <div id={\"app-wrapper\"}>\n        <Header/>\n        <Switch>\n          <Route exact path=\"/AlgoVisual\">\n            <Home/>\n          </Route>\n\n          <Route exact path=\"/AlgoVisual/sorting\">\n            <SortingVisualizer/>\n          </Route>\n\n          <Route exact path=\"/AlgoVisual/pathfinding\">\n            <PathfindingVisualizer/>\n          </Route>\n\n          <Route path=\"/AlgoVisual/documentation\">\n            <Documentation/>\n          </Route>\n\n          <Route path=\"/AlgoVisual/about\">\n\n          </Route>\n        </Switch>\n        <Footer/>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './AlgoVisual/App';\nimport reportWebVitals from './Misc/reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}