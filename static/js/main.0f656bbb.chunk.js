(this["webpackJsonpalgo-visual"]=this["webpackJsonpalgo-visual"]||[]).push([[0],{174:function(e,t,n){},175:function(e,t,n){},184:function(e,t,n){},185:function(e,t,n){},186:function(e,t,n){},599:function(e,t,n){},600:function(e,t,n){},601:function(e,t,n){},602:function(e,t,n){},603:function(e,t,n){},605:function(e,t,n){},606:function(e,t,n){},607:function(e,t,n){"use strict";n.r(t);var i=n(2),a=n.n(i),r=n(145),o=n.n(r),s=n(7),l=n(11),c=n(8),h=n(9),d=(n(174),n(17)),u=(n(175),n(14)),p=n(0),g=function(e){Object(c.a)(n,e);var t=Object(h.a)(n);function n(e){var a;return Object(s.a)(this,n),(a=t.call(this,e)).dropdownMenu=Object(i.createRef)(),a.dropdownCaret=Object(i.createRef)(),a.state={showAlgosMenu:!1},a.showAlgosMenu=a.showAlgosMenu.bind(Object(d.a)(a)),a.closeAlgosMenu=a.closeAlgosMenu.bind(Object(d.a)(a)),a.displayAlgosMenu=a.displayAlgosMenu.bind(Object(d.a)(a)),a}return Object(l.a)(n,[{key:"showAlgosMenu",value:function(e){var t=this;this.state.showAlgosMenu||(this.setState({showAlgosMenu:!0},(function(){return t.displayAlgosMenu()})),e.stopPropagation(),document.addEventListener("click",this.closeAlgosMenu))}},{key:"closeAlgosMenu",value:function(){var e=this;this.setState({showAlgosMenu:!1},(function(){return e.displayAlgosMenu()})),document.removeEventListener("click",this.closeAlgosMenu)}},{key:"displayAlgosMenu",value:function(){this.state.showAlgosMenu?(this.dropdownMenu.current.style.display="block",this.dropdownCaret.current.style.transform="rotate(180deg)",this.dropdownCaret.current.style.transition="all 300ms linear"):(this.dropdownMenu.current.style.display="none",this.dropdownCaret.current.style.transform="rotate(0deg)",this.dropdownCaret.current.style.transition="all 300ms linear")}},{key:"render",value:function(){return Object(p.jsxs)("header",{id:"header",children:[Object(p.jsx)("div",{id:"logo-wrapper",children:Object(p.jsx)(u.b,{to:"/AlgoVisual",children:Object(p.jsx)("p",{id:"name",children:" AlgoVisual "})})}),Object(p.jsx)("div",{id:"nav-wrapper",children:Object(p.jsx)("nav",{id:"nav-bar",children:Object(p.jsxs)("ul",{children:[Object(p.jsx)("li",{children:Object(p.jsxs)("div",{className:"nav-link",children:[Object(p.jsxs)("div",{className:"nav-option",onClick:this.showAlgosMenu,children:[Object(p.jsx)("p",{className:"noselect",children:" Algorithms "}),Object(p.jsx)("i",{className:"fas fa-caret-down",ref:this.dropdownCaret,children:" "})]}),Object(p.jsx)("div",{id:"dropdown",ref:this.dropdownMenu,children:Object(p.jsxs)("ul",{children:[Object(p.jsx)("li",{children:Object(p.jsx)(u.b,{to:"/AlgoVisual/sorting",className:"nav-link",children:Object(p.jsx)("div",{className:"algos-option",children:Object(p.jsx)("p",{children:" Sorting "})})})}),Object(p.jsx)("li",{children:Object(p.jsx)(u.b,{to:"/AlgoVisual/pathfinding",className:"nav-link",children:Object(p.jsx)("div",{className:"algos-option",children:Object(p.jsx)("p",{children:" Pathfinding "})})})}),Object(p.jsx)("li",{children:Object(p.jsx)(u.b,{to:"/AlgoVisual/datastructures",className:"nav-link",children:Object(p.jsx)("div",{className:"algos-option",children:Object(p.jsx)("p",{children:" Data Structures "})})})})]})})]})}),Object(p.jsx)("li",{children:Object(p.jsx)(u.b,{to:"/AlgoVisual/documentation",className:"nav-link",children:Object(p.jsx)("div",{className:"nav-option",children:Object(p.jsx)("p",{children:" Documentation "})})})}),Object(p.jsx)("li",{children:Object(p.jsx)(u.b,{to:"/AlgoVisual/about",className:"nav-link",children:Object(p.jsx)("div",{className:"nav-option",children:Object(p.jsx)("p",{children:" About "})})})})]})})})]})}}]),n}(a.a.Component),m=(n(184),function(e){Object(c.a)(n,e);var t=Object(h.a)(n);function n(e){return Object(s.a)(this,n),t.call(this,e)}return Object(l.a)(n,[{key:"render",value:function(){return Object(p.jsxs)("footer",{id:"footer",children:[Object(p.jsx)("p",{id:"footer-header",children:" Connect with me through these platforms "}),Object(p.jsx)("div",{id:"contact-wrapper",children:Object(p.jsxs)("ul",{children:[Object(p.jsx)("li",{children:Object(p.jsxs)("a",{href:"https://github.com/eduardo-vidals",target:"_blank",className:"social-link",children:[Object(p.jsx)("i",{className:"fab fa-github",children:" "}),Object(p.jsx)("span",{className:"social-text",children:" GitHub "})]})}),Object(p.jsx)("li",{children:Object(p.jsxs)("a",{href:"https://www.linkedin.com/in/eduardo-vidals",target:"blank",className:"social-link",children:[Object(p.jsx)("i",{className:"fab fa-linkedin-in",children:" "}),Object(p.jsx)("span",{className:"social-text",children:" LinkedIn "})]})}),Object(p.jsx)("li",{children:Object(p.jsxs)("a",{href:"https://www.instagram.com/eddy_the_professionalpenguin",target:"blank",className:"social-link",children:[Object(p.jsx)("i",{className:"fab fa-instagram",children:" "}),Object(p.jsx)("span",{className:"social-text",children:" Instagram "})]})}),Object(p.jsx)("li",{children:Object(p.jsxs)("a",{className:"social-link",children:[Object(p.jsx)("i",{className:"fab fa-discord",children:" "}),Object(p.jsx)("span",{className:"social-text",children:" Discord "})]})}),Object(p.jsx)("li",{children:Object(p.jsxs)("a",{className:"social-link",children:[Object(p.jsx)("i",{className:"fas fa-envelope",children:" "}),Object(p.jsx)("span",{className:"social-text",children:" Email "})]})})]})})]})}}]),n}(a.a.Component)),b=(n(185),function(e){Object(c.a)(n,e);var t=Object(h.a)(n);function n(e){return Object(s.a)(this,n),t.call(this,e)}return Object(l.a)(n,[{key:"render",value:function(){return Object(p.jsxs)("div",{id:"home-wrapper",children:[Object(p.jsx)("h1",{id:"home-header-text",children:" Visualizing made easy. "}),Object(p.jsx)("p",{id:"home-text",children:"This is my first big project, please feel free to explore the beautiful visualization of algorithms and data structures by clicking one of the buttons below."}),Object(p.jsxs)("div",{id:"buttons-menu",children:[Object(p.jsx)(u.b,{to:"/AlgoVisual/sorting",children:Object(p.jsx)("div",{className:"home-section",children:" Sorting Algorithms "})}),Object(p.jsx)(u.b,{to:"/AlgoVisual/pathfinding",children:Object(p.jsx)("div",{className:"home-section",children:" Pathfinding Algorithms "})}),Object(p.jsx)(u.b,{to:"/AlgoVisual/datastructures",children:Object(p.jsx)("div",{className:"home-section",children:" Data Structures "})})]})]})}}]),n}(a.a.Component)),v=(n(186),n(16)),f=n(164),w=n(18),j=n(163),x=n(156),y=n(625),O=n(161),S=n(162),k=n(147),A=["inline","className","children"],E={padding:"10px 30px 10px 0px",margin:0,overflow:"auto"},T=function(e){Object(c.a)(n,e);var t=Object(h.a)(n);function n(e){return Object(s.a)(this,n),t.call(this,e)}return Object(l.a)(n,[{key:"render",value:function(){return Object(p.jsx)(S.a,{children:this.props.markdown,remarkPlugins:[[j.a],[x.a]],components:{a:function(e){var t=Object.assign({},e);return Object(p.jsx)("a",Object(w.a)({target:"_blank",rel:"noreferrer"},t))},em:function(e){var t=Object.assign({},e);return t.children[0]&&"string"===typeof t.children[0]&&t.children[0].startsWith("$")?Object(p.jsx)(k.a,{tex:String(t.children[0].substring(1)),display:!1,setting:{internalSpeechTitles:!0}}):Object(p.jsx)("i",Object(w.a)({},t))},code:function(e){var t=e.inline,n=e.className,i=e.children,a=Object(f.a)(e,A),r=/language-(\w+)/.exec(n||"");return!t&&r?Object(p.jsx)(y.a,{children:String(i).replace(/\n$/,""),customStyle:E,style:O.a,showLineNumbers:!0,language:r[1],PreTag:"div"}):Object(p.jsx)("code",Object(w.a)(Object(w.a)({className:n},a),{},{children:i}))}}})}}]),n}(a.a.Component),V=function(e){Object(c.a)(n,e);var t=Object(h.a)(n);function n(e){return Object(s.a)(this,n),t.call(this,e)}return Object(l.a)(n,[{key:"componentDidMount",value:function(){this.props.section.current.style.borderLeft="10px white solid",this.props.section.current.style.backgroundColor="#29354b"}},{key:"componentWillUnmount",value:function(){null!==this.props.section.current&&(this.props.section.current.style.borderLeft="none",this.props.section.current.style.backgroundColor="inherit")}},{key:"render",value:function(){return Object(p.jsx)("div",{className:"documentation-wrapper",children:Object(p.jsx)("div",{className:"documentation",children:Object(p.jsx)("div",{className:"markdown",children:Object(p.jsx)(T,{markdown:"\n# Introduction \nThis part of the page will go over the implementations of the algorithms and data structures that are implemented throughout the site.\n\n- Before starting, this documentation page assumes that you have a good understanding of the Java programming language. \n- An explanation of the data structures and algorithms will be provided in their respective sections. \n \n## Inspiration & Credits\n- This project was largely inspired by Cl\xe9ment Mihailescu's sorting and pathfinding visualizer.\n- The algorithm and data structure implementations are inspired by the Coursera algorithm courses offered by Princeton University under Robert Sedgewick & Kevin Wayne. \n- Thanks to freeCodeCamp for the wonderful projects offered within their course which helped me build a solid foundation of the React framework. \n\n## Respective Links\n- [Cl\xe9ment Mihailescu's Sorting Visualizer](https://github.com/clementmihailescu/Sorting-Visualizer)\n- [Cl\xe9ment Mihailescu's Pathfinding Visualizer](https://github.com/clementmihailescu/Pathfinding-Visualizer)\n- [Algorithms Part I by Robert Sedgewick & Kevin Wayne](https://www.coursera.org/learn/algorithms-part1)\n- [Algorithms Part II by Robert Sedgewick & Kevin Wayne](https://www.coursera.org/learn/algorithms-part2)\n- [Front End Development Libraries by freeCodeCamp](https://www.freecodecamp.org/learn/front-end-development-libraries)\n"})})})})}}]),n}(a.a.Component),N=(n(599),{textDecoration:"none"}),I={listStyleType:"none",padding:"10px",margin:"10px 0",fontSize:"15px",borderRadius:"10px",cursor:"pointer",color:"black"},C={margin:"0 13px",height:"1px",backgroundColor:"#c5c5c5",border:"none",borderRadius:"5px"},D=function(e){Object(c.a)(n,e);var t=Object(h.a)(n);function n(e){return Object(s.a)(this,n),t.call(this,e)}return Object(l.a)(n,[{key:"linkify",value:function(e){return e.replace(/ *\([^)]*\) */g,"").replace(/[^a-zA-Z0-9]+/g,"-").replace(/([A-Z]+)([A-Z][a-z])/g,"$1-$2").replace(/([a-z])([A-Z])/g,"$1-$2").replace(/([0-9])([^0-9])/g,"$1-$2").replace(/([^0-9])([0-9])/g,"$1-$2").replace(/-+/g,"-").toLowerCase()}},{key:"render",value:function(){var e=this,t=this.props.sections.map((function(t,n){return Object(p.jsxs)("div",{children:[Object(p.jsx)(u.b,{to:e.props.directory+"/"+e.linkify(t),style:N,children:e.props.sectionHighlight&&n===e.props.section-1?Object(p.jsxs)("li",{style:I,className:"active-section",children:[" ",++n,". ",t]},t):Object(p.jsxs)("li",{style:I,children:[" ",++n,". ",t]},t)}),n<e.props.sections.length?Object(p.jsx)("hr",{style:C}):null]})}));return Object(p.jsx)("div",{className:"sections-wrapper-wrapper",children:Object(p.jsx)("div",{className:"sections-wrapper",style:this.props.wrapperStyle,children:Object(p.jsxs)("div",{className:"sections",children:[Object(p.jsx)("p",{className:"sections-header",children:" In this part: "}),Object(p.jsx)("div",{className:"section-names",children:Object(p.jsx)("ul",{children:t})})]})})})}}]),n}(a.a.Component),W=["Time Complexity","ArrayList","LinkedList","Heaps","Binary Search Trees","Analysis of Data Structures"],M={width:"100%"},L=function(e){Object(c.a)(n,e);var t=Object(h.a)(n);function n(e){return Object(s.a)(this,n),t.call(this,e)}return Object(l.a)(n,[{key:"componentDidMount",value:function(){this.props.section.current.style.borderLeft="10px white solid",this.props.section.current.style.backgroundColor="#29354b"}},{key:"componentWillUnmount",value:function(){null!==this.props.section.current&&(this.props.section.current.style.borderLeft="none",this.props.section.current.style.backgroundColor="inherit")}},{key:"render",value:function(){return Object(p.jsx)("div",{className:"documentation-wrapper",children:Object(p.jsxs)("div",{className:"documentation",children:[Object(p.jsx)("div",{className:"markdown",children:Object(p.jsx)(T,{markdown:"\n# Data Structures\nThis part of the page will go over the many relevant data strucures that are implemented throughout the site. \n"})}),Object(p.jsx)(D,{wrapperStyle:M,sectionHighlight:!1,sections:W,directory:"/AlgoVisual/documentation/data-structures"})]})})}}]),n}(a.a.Component),z=["Bubble Sort","Insertion Sort","Selection Sort","Merge Sort","Quick Sort","Heap Sort","Analysis of Sorting Algorithms"],B={width:"100%"},R=function(e){Object(c.a)(n,e);var t=Object(h.a)(n);function n(e){return Object(s.a)(this,n),t.call(this,e)}return Object(l.a)(n,[{key:"componentDidMount",value:function(){this.props.section.current.style.borderLeft="10px white solid",this.props.section.current.style.backgroundColor="#29354b"}},{key:"componentWillUnmount",value:function(){null!==this.props.section.current&&(this.props.section.current.style.borderLeft="none",this.props.section.current.style.backgroundColor="inherit")}},{key:"render",value:function(){return Object(p.jsx)("div",{className:"documentation-wrapper",children:Object(p.jsxs)("div",{className:"documentation",children:[Object(p.jsx)("div",{className:"markdown",children:Object(p.jsx)(T,{markdown:"\n# Sorting Algorithms\nThis part of the page will go over the many relevant sorting algorithms that are implemented throughout the site. \n"})}),Object(p.jsx)(D,{wrapperStyle:B,sections:z,directory:"/AlgoVisual/documentation/sorting",sectionHighlight:!1})]})})}}]),n}(a.a.Component),F=["Graphs","Depth-First Search (DFS)","Breadth-First Search (BFS)","Edge-Weighted Graphs","Minimum Spanning Trees (MSTs)","Edge-Weighted Digraphs","Shortest Paths","Maxflow-Mincut"],G={width:"100%"},$=function(e){Object(c.a)(n,e);var t=Object(h.a)(n);function n(e){return Object(s.a)(this,n),t.call(this,e)}return Object(l.a)(n,[{key:"componentDidMount",value:function(){this.props.section.current.style.borderLeft="10px white solid",this.props.section.current.style.backgroundColor="#29354b"}},{key:"componentWillUnmount",value:function(){null!==this.props.section.current&&(this.props.section.current.style.borderLeft="none",this.props.section.current.style.backgroundColor="inherit")}},{key:"render",value:function(){return Object(p.jsx)("div",{className:"documentation-wrapper",children:Object(p.jsxs)("div",{className:"documentation",children:[Object(p.jsx)("div",{className:"markdown",children:Object(p.jsx)(T,{markdown:"\n# Pathfinding\nThis part of the page will go over the many relevant pathfinding algorithms that are implemented throughout the site.\n"})}),Object(p.jsx)(D,{wrapperStyle:G,sectionHighlight:!1,sections:F,directory:"/AlgoVisual/documentation/pathfinding"})]})})}}]),n}(a.a.Component);var P=Object(v.f)((function(e){var t=e.history;return Object(i.useEffect)((function(){var e=t.listen((function(){window.scrollTo(0,0)}));return function(){e()}}),[]),null})),H=(n(600),{marginTop:"20px"}),q={margin:"15px 0",display:"flex",padding:"10px 5px",borderRadius:"5px",color:"black"},K={marginLeft:"10px",fontSize:"15px"},Q={textDecoration:"none"},U=function(e){Object(c.a)(n,e);var t=Object(h.a)(n);function n(e){return Object(s.a)(this,n),t.call(this,e)}return Object(l.a)(n,[{key:"render",value:function(){return Object(p.jsxs)("div",{className:"next-section-wrapper",children:[Object(p.jsx)("p",{style:H,children:" You have reached the end of this section! Continue to the next section: "}),Object(p.jsx)(u.b,{to:this.props.directory,style:Q,children:Object(p.jsxs)("div",{className:"next-section",style:q,children:[Object(p.jsx)("i",{className:"fas fa-arrow-right"}),Object(p.jsxs)("p",{style:K,children:[" ",this.props.sectionName," "]})]})})]})}}]),n}(a.a.Component),Y={margin:"20px 0"},_={width:"60%"},J=function(e){Object(c.a)(n,e);var t=Object(h.a)(n);function n(e){return Object(s.a)(this,n),t.call(this,e)}return Object(l.a)(n,[{key:"componentDidMount",value:function(){this.props.section.current.style.borderLeft="10px white solid",this.props.section.current.style.backgroundColor="#29354b"}},{key:"componentWillUnmount",value:function(){null!==this.props.section.current&&(this.props.section.current.style.borderLeft="none",this.props.section.current.style.backgroundColor="inherit")}},{key:"render",value:function(){return Object(p.jsx)("div",{className:"documentation-wrapper",children:Object(p.jsxs)("div",{className:"documentation",children:[Object(p.jsx)("div",{className:"markdown",children:Object(p.jsx)(T,{markdown:this.props.markdown})}),this.props.nextSection?Object(p.jsx)(U,{directory:this.props.nextSectionDirectory,sectionName:this.props.nextSectionName}):Object(p.jsx)("p",{style:Y,children:" You have reached the end of the section!"}),Object(p.jsx)(D,{wrapperStyle:_,sections:this.props.sections,directory:this.props.mainDirectory,sectionHighlight:!0,section:this.props.partNumber})]})})}}]),n}(a.a.Component),Z=(n(601),n(602),function(e){Object(c.a)(n,e);var t=Object(h.a)(n);function n(e){var i;return Object(s.a)(this,n),(i=t.call(this,e)).state={isVisible:!1},i}return Object(l.a)(n,[{key:"componentDidMount",value:function(){var e=this;document.addEventListener("scroll",(function(){e.toggleVisibility()}))}},{key:"toggleVisibility",value:function(){window.scrollY>100?this.setState({isVisible:!0}):this.setState({isVisible:!1})}},{key:"scrollToTop",value:function(){window.scrollTo({top:0,behavior:"smooth"})}},{key:"render",value:function(){var e=this;return Object(p.jsx)("div",{className:"scroll-to-top-button",children:this.state.isVisible&&Object(p.jsx)("div",{onClick:function(){return e.scrollToTop()},children:Object(p.jsx)("div",{className:"scroll-up",children:Object(p.jsx)("i",{className:"fas fa-angle-up"})})})})}}]),n}(a.a.Component)),X=["Time Complexity","ArrayList","LinkedList","Heaps","Binary Search Trees","Analysis of Data Structures"],ee=["Bubble Sort","Insertion Sort","Selection Sort","Merge Sort","Quick Sort","Heap Sort","Analysis of Sorting Algorithms"],te=["Graphs","Depth-First Search (DFS)","Breadth-First Search (BFS)","Edge-Weighted Graphs","Minimum Spanning Trees (MSTs)","Edge-Weighted Digraphs","Shortest Paths","Maxflow-Mincut"],ne=function(e){Object(c.a)(n,e);var t=Object(h.a)(n);function n(e){var a;return Object(s.a)(this,n),(a=t.call(this,e)).gettingStartedSection=Object(i.createRef)(),a.dataStructuresSection=Object(i.createRef)(),a.sortingSection=Object(i.createRef)(),a.pathfindingSection=Object(i.createRef)(),a}return Object(l.a)(n,[{key:"render",value:function(){return Object(p.jsxs)("main",{className:"main-sidebar",children:[Object(p.jsx)("div",{className:"sidebar",children:Object(p.jsxs)("div",{id:"documentation-section",children:[Object(p.jsx)(u.b,{to:"/AlgoVisual/documentation",className:"documentation-link",children:Object(p.jsx)("div",{className:"section",ref:this.gettingStartedSection,children:Object(p.jsx)("p",{children:" Introduction "})})}),Object(p.jsx)(u.b,{to:"/AlgoVisual/documentation/data-structures",className:"documentation-link",children:Object(p.jsx)("div",{className:"section",ref:this.dataStructuresSection,children:Object(p.jsx)("p",{children:" Data Structures "})})}),Object(p.jsx)(u.b,{to:"/AlgoVisual/documentation/sorting",className:"documentation-link",children:Object(p.jsx)("div",{className:"section",ref:this.sortingSection,children:Object(p.jsx)("p",{children:" Sorting "})})}),Object(p.jsx)(u.b,{to:"/AlgoVisual/documentation/pathfinding",className:"documentation-link",children:Object(p.jsx)("div",{className:"section",ref:this.pathfindingSection,children:Object(p.jsx)("p",{children:" Pathfinding "})})})]})}),Object(p.jsx)(P,{}),Object(p.jsxs)(v.c,{children:[Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation",children:Object(p.jsx)(V,{section:this.gettingStartedSection})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation/data-structures",children:Object(p.jsx)(L,{section:this.dataStructuresSection})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation/data-structures/time-complexity",children:Object(p.jsx)(J,{mainDirectory:"/AlgoVisual/documentation/data-structures",sections:X,partNumber:1,markdown:'\n# Time Complexity\nThis section will go over time complexity.\n\n## Brief Explanation\nTime complexity can be defined as the **asymptomatic** behavior of the graph. In simpler terms, as the size of the function gets progressively larger, we can put functions in the same asymptomatic category. For example, let\'s say we have the following functions: *$f(x) = 100n* and *$g(x) = n*. As *$n* gets larger, both functions become categorized under the same asymptomatic bound because the difference becomes negligible as *$n* gets larger. \n\n## Big-O Notation\nTo categorize the asymptomatic bound of an algorithm, we use Big-O notation. For example, Bubble Sort has a **worst-case** of *$O(n^2)*, which is pronounced as "Big O of *$n^2*." This algorithm will be explained in the sorting section of the documentation page.  \n\n## Graph Representation\nHere is a representation of the asymptomatic bounds used when regarding data structures and algorithms. \n![Time Complexity Graph](https://he-s3.s3.amazonaws.com/media/uploads/ece920b.png)\n\n## Importance\nTime complexity is an important concept to grasp right away, as we will be analyzing the time complexity of the data structures and algorithms that will be implemented throughout the site. Click below to go to the next section. \n',section:this.dataStructuresSection,nextSectionDirectory:"/AlgoVisual/documentation/data-structures/array-list",nextSection:!0,nextSectionName:"2. ArrayList"})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation/data-structures/array-list",children:Object(p.jsx)(J,{mainDirectory:"/AlgoVisual/documentation/data-structures",sections:X,partNumber:2,markdown:"\n# ArrayList in Java\nThis section will go over a simple implementation of ArrayList.\n\n## Arrays\nAs a reminder, keep in mind that arrays have a limited size in the amount of data they can hold. However, in an ArrayList we are able to manipulate arrays in such a way that allows us to insert and remove elements without having to worry about a limited size. \n\n## ArrayList Implementation\nKeeping the last section in mind, let's initialize our instance variables for our ArrayList. We will be using generics for our implementation to easily apply our ArrayList across all objects. \n\n```java\npublic class ArrayList<E> implements Iterable<E> {\n    private static final int INIT_CAPACITY = 8; // initial capacity of array\n    private E[] arr; \n    private int n; // size of array\n    \n    public ArrayList(){\n        arr = (E[]) new Object[INIT_CAPACITY]; // generic array \n        n = 0;\n    }\n}\n```\n\n### Relevant Methods\nFirst, let's implement the straightforward methods of a list.\n```java\npublic boolean isEmpty() {\n    return n == 0;\n}\n\npublic int size() {\n    return n;\n}\n```\n\n### Helper Method (Resizing Array)\nLet's now implement our first relevant helper method for an ArrayList. We will need a resize method that will use an array with a new capacity and copies all values from the old array into this new array with an updated capacity. \n\n```java\nprivate void resize(int capacity) {\n    E[] copy = (E[]) new Object[capacity];\n    for (int i = 0; i < n; i++){\n        copy[i]= arr[i];\n    }\n    arr = copy;\n}\n```\n\n### Instance Methods\nWith the help of the previous helper method, we are now able to implement our add and remove methods. \n\n```java\npublic void add(E item){\n    // resize once we reach max capacity\n    if (n == arr.length) {\n        // resizing by 2x ensures we don't resize too frequently and don't allocate too much memory\n        resize(arr.length * 2);\n    }\n    arr[n++] = item;\n}\n\npublic E remove(int index){\n    E removed = arr[index];\n    int numMoved = n - index - i; // numOfNumbers that need to be moved\n    System.arraycopy(arr, index + 1, arr, index, numMoved); // shifts elements to left by 1\n    arr[n--] = null; // decrement size and ensure last arr value is null \n    \n    // resize to ensure you don't allocate too much memory when you have a few amount of elements\n    if (n > 0 && n == arr.length / 4){\n        resize(arr.length / 2);\n    }\n    return removed;\n}\n```\n\n### Iterator\nAs a reminder, remember to implement the Iterator interface and implement the following methods: \n- hasNext()\n    - returns true or false depending on whether there is a next element\n- next()\n    - returns the next element in the iterator\n- remove()\n    - allows you to remove elements while traversing\n\nWe will implement an iterator to allow users to remove elements while the list is being traversed. Iterators also allow you to use the for-each syntax for easier traversal. \n\n```java\npublic Iterator<E> iterator() {\n    return new ListIterator();\n}\n\nprivate class ListIterator implements Iterator<E> {\n    private int i; // current index\n    \n    @Override\n    public boolean hasNext(){\n        return i < n;\n    }\n    \n    @Override\n    public E next(){\n        if (!hasNext()){\n            throw new NoSuchElementException();\n        }\n        return copy[i++];\n    }\n    \n    @Override \n    public void remove() {\n        if (i == 0) {\n            throw new IllegalStateException();\n        }\n        ArrayList.this.remove(--i);\n    }\n}\n```\n\n\n## Visualizer\n...And that's it! Our implementation of ArrayList should be working just fine. Remember, there is also a simple visualization tool of how the array operates in an ArrayList. Click the button below to check out the visualizer!\n",section:this.dataStructuresSection,nextSectionDirectory:"/AlgoVisual/documentation/data-structures/linked-list",nextSection:!0,nextSectionName:"3. LinkedList"})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation/data-structures/linked-list",children:Object(p.jsx)(J,{mainDirectory:"/AlgoVisual/documentation/data-structures",sections:X,partNumber:3,markdown:"\n# LinkedList in Java\nThis section will go over a simple implementation of ArrayList.\n\n## Objects & Classes\nThere is sometimes confusion when linked lists are introduced due to not understanding the concept of objects and classes. Therefore, it is important that you understand the idea of having a **inner** class within a class. The idea of a Linked List is that an inner class can essentially act as a *pointer* that keeps track of **previous** and **next** nodes. This idea is explained in the image below. \n\n[TO DO IMAGE]\n\n## LinkedList Implementation\nKeeping the logic of the last section in mind, we can now initialize the barebones logic of a LinkedList. We will be using generics for our implementation to easily apply our LinkedList across all objects.\n\n```java\npublic class LinkedList<E> implements Iterable<E> {\n    private Node head; // first element in list\n    private Node tail; // last element in list\n    private int n; // size of arr\n    \n    private class Node {\n        Node next; // represents the node next to this current node\n        Node prev; // represents the node prev to this current node\n        E data; // represents the data within the current node\n        \n        public Node(E data){\n            this.data = data;\n        }\n    }     \n}\n```\n\nThe code above is the barebones logic of a **doubly-linked list.** It will have **two** pointers, one pointer to the previous element and one pointer to the next element. A **singly-linked list** only has **one** pointer that points to the next element. We will be implementing a doubly-linked list as it is more efficient and it'll be easier to understand a singly-linked list after implementing a doubly-linked list.\n\n### Relevant Methods\nFirst, let's implement the straightforward methods of a list.\n```java\npublic int size(){ \n    return n;\n}\n\npublic boolean isEmpty(){\n    return n == 0;\n}\n```\n\n\n### Stacks (LIFO)\nLet's introduce the concept of a **stack** as it serves as an important concept in computer science. A **stack** data structure works as **Last In, First Out (LIFO).** An analogy for this data structure is to imagine a pile of pancakes. Which pancake is the first one to be removed? The last pancake that was put into the pile will most likely result in it being the first one removed. This concept is easily explained by the image below.\n\n[TO DO IMAGE]\n\nWe can now implement the relevant methods of a LinkedList that serve the purpose of a **stack** data structure. We will name the methods **addLast()** and **removeLast()**, but these methods can also be represented as **push()** and **pop().**\n\n```java\npublic void addLast(E data){\n    // save the \"oldTail\" in a temp variable (as this will become the old tail)\n    Node oldTail = tail;\n    // initialize new tail with new data, prev Node will always be the oldTail\n    tail = new Node(data);\n    tail.prev = oldTail;\n    // when we first add into our list, the head will be equal to the tail\n    if(isEmpty()){\n        head = tail;\n    } \n    // after that, the next value of the old tail will be the current tail\n    else {\n        oldTail.next = tail;\n    }\n    n++;\n}\n\npublic E removeLast(){\n    // throw an exception if element is being removed when list is empty\n    if (isEmpty()) {\n        throw new NoSuchElementException();\n    }  \n    // make a variable for the old tail so we can return the data when the element is removed\n    Node oldTail = tail;\n    // make new tail be equal to the prev node of the tail\n    // then make the next value null for garbage collection\n    if (size() > 1){\n        tail = tail.prev;\n        tail.next = null;  \n    }\n    // this essentially means the list is empty so make both values null\n    else {\n        head = null;\n        tail = null;\n    }\n    n--;\n    return oldTail.data;\n}\n```\n\n### Queues (LIFO)\nLet's introduce the concept of a **queue** as it serves as an important concept in computer science. A **queue** data structure works as **First In, First Out (FIFO).** An analogy for a queue is to imagine being the first person in line for Subway, eventually, you will be the first one out of line and will go about your day and enjoy your subway sandwich! This concept is easily explained by the image below. \n\n[TO DO IMAGE]\n\nWe can now implement the relevant methods of a LinkedList that serve the purpose of a **queue** data structure. We will name the methods **addFirst()** and **removeFirst()**, but these methods can also be represented as **enqueue()** and **dequeue().**\n\n```java\npublic void addFirst(E data){\n    // save the \"oldHead\" in a temp variable (as this will become the old head)\n    Node oldHead = head;\n    // initialize new head with new data, next Node will always be the oldHead\n    head = new Node(data);\n    head.next = oldHead;\n    // when we first add into our list, the tail will be equal to the head\n    if (isEmpty()){\n        tail = head;\n    } \n    // after that, the prev value of the old head will be the current head\n    else {\n        oldHead.prev = head;\n    }\n    n++;\n}\n\npublic E removeFirst(){\n    // throw an exception if element is being removed when list is empty\n    if (isEmpty()) {\n        throw new NoSuchElementException();\n    } \n    // make a variable for the old head so we can return the data when the element is removed\n    Node oldHead = head;\n    // make new head be equal to the next node of the head\n    // then make the prev value null for garbage collection\n    if (size() > 1){\n        head = head.next;\n        head.prev = null;\n    } \n    // this essentially means the list is empty so make both values null\n    else {\n        head = null;\n        tail = null;\n    }\n    n--;\n    return oldHead.data;\n}\n```\n\n### Deque\nA **deque** is simply a combination of a stack and queue data structure. As a result, our LinkedList can be defined as deque data structure as it supports the operations of a stack and queue data structure.\n\n### Iterator\nLet's now implement an iterator for our LinkedList.\n```java\npublic Iterator<E> iterator() {\n    return new LinkedIterator();\n}\n\nprivate class LinkedIterator implements Iterator<E> {\n    // keep track of current and lastAccessed nodes\n    private Node current = head;\n    private Node lastAccessed = null;\n\n    @Override\n    public boolean hasNext() {\n        return current != null;\n    }\n\n    @Override\n    public E next() {\n        if (!hasNext()) {\n            throw new NoSuchElementException();\n        }\n        // update lastAccessed node since it will be used to remove the lastAccessed element\n        // since the current element always updates when next() is called, thus it cannot\n        // be used within remove()\n        lastAccessed = current;\n        E data = current.data;\n        current = current.next;\n        return data;\n    }\n\n    @Override\n    public void remove() {\n        if (lastAccessed == null) {\n            throw new IllegalStateException();\n        }\n        if (lastAccessed == head) {\n            LinkedList.this.removeFirst();\n        } else if (lastAccessed == tail) {\n            LinkedList.this.removeLast();\n        } \n        // update the prev and next pointers of the lastAccessed node\n        // make the lastAccessed node null for garbage collection\n        else {\n            Node prev = lastAccessed.prev;\n            Node next = lastAccessed.next;\n            prev.next = next;\n            next.prev = prev;\n            n--;\n            lastAccessed = null;\n        }\n    }        \n}\n```\n\nThe **remove()** method might be a bit hard to understand so images will be provided for each case.\n\n[TO DO IMAGE] (removeFirst)\n[TO DO IMAGE] (removeLast)\n[TO DO IMAGE] (otherCases)\n\n## Visualizer\n...And that's it! Our implementation of a LinkedList should be working just fine. Remember, there is also a visualization tool of how the pointers operate in a LinkedList. Click the button below to check out the visualizer!\n",section:this.dataStructuresSection,nextSectionDirectory:"/AlgoVisual/documentation/data-structures/heaps",nextSection:!0,nextSectionName:"4. Heaps"})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation/data-structures/heaps",children:Object(p.jsx)(J,{mainDirectory:"/AlgoVisual/documentation/data-structures",sections:X,partNumber:4,markdown:"\n# Heaps\n```java\npublic class ArrayList<E> implements Iterable<E> {\n    private static final int INIT_CAPACITY = 8; // initial capacity of array\n    private E[] arr; \n    private int n; // size of array\n    \n    public ArrayList(){\n        arr = (E[]) new Object[INIT_CAPACITY]; // generic array \n        n = 0;\n    }\n}\n```\n",section:this.dataStructuresSection,nextSectionDirectory:"/AlgoVisual/documentation/data-structures/binary-search-trees",nextSection:!0,nextSectionName:"5. Binary Search Trees"})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation/data-structures/binary-search-trees",children:Object(p.jsx)(J,{mainDirectory:"/AlgoVisual/documentation/data-structures",sections:X,partNumber:5,markdown:"\n# Binary Search Trees\n",section:this.dataStructuresSection,nextSectionDirectory:"/AlgoVisual/documentation/data-structures/analysis-of-data-structures",nextSection:!0,nextSectionName:"6. Analysis of Data Structures"})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation/data-structures/analysis-of-data-structures",children:Object(p.jsx)(J,{mainDirectory:"/AlgoVisual/documentation/data-structures",sections:X,partNumber:6,markdown:"\n# Analysis of Data Structures\n",section:this.dataStructuresSection,nextSection:!1})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation/sorting",children:Object(p.jsx)(R,{section:this.sortingSection})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation/sorting/bubble-sort",children:Object(p.jsx)(J,{mainDirectory:"/AlgoVisual/documentation/sorting",sections:ee,partNumber:1,markdown:"\n# Bubble Sort\nThis section will go over an implementation of Bubble Sort.\n\n## Bubble Sort Implementation\nWe will be using generics for our implementation to easily apply our sorting algorithm across all types of arrays.\n\n### Rationale\nThe basis of Bubble Sort is to swap elements if the current element is greater than the element ahead.\n\n### Helper Method\nWe will be using the following **swap()** helper method to swap values from the array.\n```java\nprivate static <E> void swap(E[] arr, int i, int j){\n    E temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n```\n\n### Sorting Algorithm\nThis is the setup used for Bubble Sort.\n\n```java\n// <E extends Comparable> just means that E (the data type of the array) must\n// implement the Comparable interface, <? super E> means that E itself or the\n// super class can implement Comparable\npublic static <E extends Comparable<? super E>> void sort(E[] arr) {\n    for (int i = 0; i < arr.length - 1; i++) {\n        for (int j = 0; j < arr.length - 1 - i; j++) {\n            // compare elements from indices j and j + 1, swap if j > j + 1\n            if (arr[j].compareTo(arr[j + 1]) > 0){\n                swap(arr, j, j + 1);\n            }\n        }\n    }\n}\n```\n\n## Time Complexity (Analysis)\nBubble Sort is a **stable** sorting algorithm but it is often regarded as the **worst** sorting algorithm.\n- The best case can be *$O(n)*, but this implementation has a best case of *$O(n^2)*\n- The average case is *$O(n^2)*\n- The worst case is *$O(n^2)*\n\n\n## Visualizer\n...And that's it! Our implementation of Bubble Sort should be working just fine. Remember, there is also a simple visualization tool for sorting algorithms. Click the button below to check out the visualizer!\n",section:this.sortingSection,nextSectionDirectory:"/AlgoVisual/documentation/sorting/insertion-sort",nextSection:!0,nextSectionName:"2. Insertion Sort"})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation/sorting/insertion-sort",children:Object(p.jsx)(J,{mainDirectory:"/AlgoVisual/documentation/sorting",sections:ee,partNumber:2,markdown:"\n# Insertion Sort\nThis section will go over an implementation of Insertion Sort.\n\n## Insertion Sort Implementation \nWe will be using generics for our implementation to easily apply our sorting algorithm across all types of arrays.\n\n### Rationale\nThe basis of Insertion Sort is to swap until there isn't an element greater than the key. This process starts with index one as the key and progressively increments until the array is fully sorted.\n\n### Sorting Algorithm\nThis is the setup used for Selection Sort.\n```java\npublic static void <E extends Comparable<? super E>> sort(E[] arr){\n    for (int i = 1; i < arr.length; i++){\n        // keep track of the key for the last swap\n        T key = arr[i];\n        // starting index will always be one below i\n        int j = i - 1;\n        // if the val to the left is bigger, then replace it\n        while(j >= 0 && arr[j].compareTo(key) > 0){\n            arr[j + 1] = arr[j];\n            j--;\n        }\n        // we can replace arr[j + 1] with the key since that is the last swap we need to do\n        arr[j + 1] = key;\n    }\n}\n```\n\n## Time Complexity (Analysis)\nInsertion Sort is a **stable** sorting algorithm and better than Bubble Sort. However, the worst case is still *$O(n^2)*\n- The best case is *$O(n)*\n- The average case is *$O(n^2)*\n- The worst case is *$O(n^2)*\n\n## Visualizer\n...And that's it! Our implementation of Bubble Sort should be working just fine. Remember, there is also a simple visualization tool for sorting algorithms. Click the button below to check out the visualizer!\n",section:this.sortingSection,nextSectionDirectory:"/AlgoVisual/documentation/sorting/selection-sort",nextSection:!0,nextSectionName:"3. Selection Sort"})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation/sorting/selection-sort",children:Object(p.jsx)(J,{mainDirectory:"/AlgoVisual/documentation/sorting",sections:ee,partNumber:3,markdown:"\n# Selection Sort\nThis section will go over an implementation of Selection Sort.\n\n## Selection Sort Implementation\nWe will be using generics for our implementation to easily apply our sorting algorithm across all types of arrays.\n\n### Rationale\nThe basis of Selection Sort is to find the minimum element in the array and replace it with the current index of the outer loop. The inner loop start index increments after each iteration in the outer loop. (This allows us to ignore already sorted elements.)\n\n### Helper Method\nWe will be using the following **swap()** helper method to swap values from the array.\n```java\npublic static <E> void swap(E[] arr, int i, int j){\n    E temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n```\n\n### Sorting Algorithm\nThis is the setup used for Selection Sort. \n\n```java\npublic static <E extends Comparable<? super E> sort(E[] arr){\n    for (int i = 0; i < arr.length; i++){\n        // get min value and its index (we're only aware of 1 value so this is our min)\n        T min = arr[i];\n        int minIndex = i;\n        // start loop from i since any previous element will already be sorted\n        for (int j = i; j < arr.length; j++){\n            // if there's a new min, then update it\n            if (min.compareTo(arr[j] > 0){\n                min = arr[j];\n                minIndex = j;\n            }\n        }\n        // once you're at the end of the loop, swap the index of the smallest element with i \n        // this will put the lowest element at the start of our array\n        swap(arr, i, minIndex);\n    }\n}\n```\n\n## Time Complexity (Analysis)\nSelection Sort is an **unstable** sorting algorithm and better than Bubble Sort. However, the worst case is still *$O(n^2)*\n- The best case is *$O(n^2)*\n- The average case is *$O(n^2)*\n- The worst case is *$O(n^2)*\n\n## Visualizer\n...And that's it! Our implementation of Insertion Sort should be working just fine. Remember, there is also a simple visualization tool for sorting algorithms. Click the button below to check out the visualizer!\n",section:this.sortingSection,nextSectionDirectory:"/AlgoVisual/documentation/sorting/merge-sort",nextSection:!0,nextSectionName:"4. Merge Sort"})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation/sorting/merge-sort",children:Object(p.jsx)(J,{mainDirectory:"/AlgoVisual/documentation/sorting",sections:ee,partNumber:4,markdown:"\n# Merge Sort\nThis section will go over **two** versions of Merge Sort because it will show the importance in creating efficient algorithms. \n\n## Merge Sort Implementation (Version 1)\nWe will be using generics for our implementation to easily apply our sorting algorithm across all types of arrays.\n\n### Rationale\nThe basis of Merge Sort is to think of one element by itself already being **sorted**. If we have **two elements** and **merge** them, then we will have 2 elements sorted. To accomplish this we recursively call the sorting method until we only have one element. Eventually, the recursive function will be at a point where we have **two** elements. Ultimately, we use the merge function for these pair of elements and this process continues until the array is fully sorted.\n\n### Helper Method\nWe will be using the following **merge()** helper method to **merge** two arrays that are **already sorted.**\n```java\nprivate static <E extends Comparable<? super E> void merge(E[] arr, int l, int m, int r){\n    int nL = m - l + 1; // size of left aux array\n    int nR = r - m; // size of right aux array\n    \n    E[] L = (E[]) new Comparable[nL];\n    E[] R = (E[]) new Comparable[nR];\n   \n    // initialize left aux array with the values from the main array\n    for (int i = 0; i < nL; i++){\n        L[i] = arr[l + i];\n    }\n    \n    // initialize right aux array with the values from the main array\n    for (int j = 0; j < nR; j++){\n        R[j] = arr[m + j + 1];\n    }\n    \n    int i = 0; // starting index of left aux arr\n    int j = 0; // starting index of right aux arr\n    int k = l; // starting index of main arr\n    \n    while (i < nL && j < nR){\n        // compare values from both aux arrays, determine which element is lower, then update\n        // the main arr with the lowest value, then increment indices as needed\n        if (L[i].compareTo(R[j]) <= 0){\n            arr[k] = L[i++]\n        } else {\n            arr[k] = R[j++];\n        }\n        k++;\n    }\n    \n    // update main arr with remaining elements from the left aux arr\n    while (i < nL){\n        arr[k] = L[i++];\n        k++;\n    }\n    \n    // update main arr with remaining elements from the right aux arr\n    while (j < nR){\n        arr[k] = R[j++];\n        k++;\n    }\n}\n```\n\n### Sorting Algorithm\nThis is the setup used for Merge Sort. \n\n```java\npublic static <E extends Comparable<? super E> void sort(E[] arr){\n    sort(arr, 0, arr.length - 1);\n}\nprivate static <E extends Comparable<? super E> void sort(E[] arr, int l, int r){ \n    if (l < r){\n        int m = (l + r)/2; // middle index\n        sort(arr, l, m); // left side of array\n        sort(arr, m + 1, r); // right side of array\n        merge(arr, l, m, r); // merge\n    }\n}\n```\n\n### Time Complexity & Space Complexity (Analysis)\nMerge Sort is a **stable** sorting algorithm and it is the first efficient sorting algorithm that will be covered.\n- The best case is *$O(nlogn)*\n- The average case is *$O(nlogn)*\n- The worst case is *$O(nlogn)*\n\nIt also uses an **auxilary** array in **merge()**, as a result, this algorithm has a space complexity of *$O(n).*\n\n## Merge Sort Implementation (Version 2)\nThis second version of Merge Sort will be more efficient than the previous one. It will only be creating the auxilary array **once** instead of creating multiple auxilary arrays as in the previous implementation. Therefore, this version of Merge Sort is more efficient.\n\n### Sort Method\nThis will be the updated version of **sort()** that only relies on one auxilary array.\n```java\npublic static <E extends Comparable<? super E>> void sort(E[] arr) {\n    E[] aux = arr.clone();\n    sort(arr, 0, arr.length - 1, aux);\n}\nprivate static <E extends Comparable<? super E>> void sort(E[] arr, int l, int r, E[] aux) {\n    if (l < r) {\n        int m = (l + r) / 2;\n        sort(aux, l, m, arr);\n        sort(aux, m + 1, r, arr);\n        merge(arr, l, m, r, aux);\n    }\n}\n```\n\n### Merge Method\nThis will be the updated version of **merge()** that only relies on one auxilary array.\n```java\nprivate static <E extends Comparable<? super E>> void merge(E[] arr, int l, int m, int r, E[] aux) {\n    int k = l, i = l;\n    int j = m + 1;\n    while (i <= m && j <= r) {\n        if (aux[i].compareTo(aux[j]) <= 0) {\n            arr[k++] = aux[i++];\n        } else {\n            arr[k++] = aux[j++];\n        }\n    }\n    while (i <= m) {\n        arr[k++] = aux[i++];\n    }\n    while (j <= r) {\n        arr[k++] = aux[j++];\n    }\n}\n```\n\n### Time Complexity & Space Complexity (Analysis)\nThis version of Merge Sort is still a **stable** sorting algorithm.\n- The best case is *$O(nlogn)*\n- The average case is *$O(nlogn)*\n- The worst case is *$O(nlogn)*\n\nThis algorithm has a space complexity of *$O(n)*, but it is more efficient as we only clone the auxilary array once. \n\n## Visualizer\n...And that's it! Our implementation of Merge Sort should be working just fine. Remember, there is also a simple visualization tool for sorting algorithms. Click the button below to check out the visualizer!\n",section:this.sortingSection,nextSectionDirectory:"/AlgoVisual/documentation/sorting/quick-sort",nextSection:!0,nextSectionName:"5. Quick Sort"})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation/sorting/quick-sort",children:Object(p.jsx)(J,{mainDirectory:"/AlgoVisual/documentation/sorting",sections:ee,partNumber:5,markdown:"\n# Quick Sort\nThis section will go over **two** versions of Quick Sort because it will show the importance in creating efficient algorithms.\n\n## Quick Sort Implementation (Version 1)\nWe will be using generics for our implementation to easily apply our sorting algorithm across all types of arrays.\n\n### Rationale\nThe basis of Quick Sort is to pick an element from the list and to put all elements less than the pivot to the **left** and all elements greater the pivot to the **right.** As a result, we end up finding the **pivot**, which results in that element being **sorted.** This process is known as **partitioning** and we will be implementing it as a helper method. \n\n### Helper Method \nWe will be using the following **swap()** and **partition()** helper method to find the **pivot.**\n```java\nprivate static <E extends Comparable<? super E>> int partition(E[] arr, int l, int h){\n    E pivot = arr[l]; // we will be using the lowest element given as the pivot\n    int i = l - 1; // start index\n    int j = h + 1; // end index\n    while (true){\n        // increment i every time arr[i] is less than the value of the pivot\n        do {\n            i++;\n        } while(arr[i].compareTo(pivot) < 0);\n    \n        // increment j every time arr[j] is greater than the pivot\n        do {\n            j--;\n        } while(arr[j].compareTo(pivot) > 0);\n\n        // return pivot index once i >= j\n        if (i >= j){\n            return j;\n        }\n        \n        // swap once you find a value less than pivot and a value greater than pivot\n        swap(arr, i, j);\n    }\n}\n\nprivate static <E> void swap(E[] arr, int i, int j){\n    E temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n```\n\n\n### Sorting Algorithm\nThis is the setup used for Quick Sort. \n\n```java\npublic static <E extends Comparable<? super E>> void sort(E[] arr){\n    sort(arr, 0, arr.length - 1);\n}\n\nprivate static <E extends Comparable<? super E>> void sort(E[] arr, int l, int h){\n    if (l < h){\n        int pivot = partition(arr, l, h);\n        sort(arr, l, pivot);\n        sort(arr, pivot + 1, h);\n    }\n}\n```\n\n## Time Complexity (Analysis)\nQuick Sort is an **unstable** sorting algorithm. However, the worst case is *$O(n^2)*.\n- The best case is *$O(nlogn)*\n- The average case is *$O(nlogn)*\n- The worst case is *$O(n^2)*\n\n## Quick Sort Implementation (Version 2)\nThis second version of Quick Sort will be more efficient as we will be using a **random** pivot within our partition() method. This essentially results into the worst case having an **extremely** low probability of occuring. Therefore, this version of Quick Sort is more efficient.\n\n### Sort Method\nThe sort() method will stay the same as we only have to change the pivot that is chosen.\n\n### Partition Method\nThis will be the updated version of partition() that relies on a random pivot. \n```java\nprivate static <E extends Comparable<? super E>> int partition(E[] arr, int l, int h){\n    int randomIndex = ThreadLocalRandom.current().nextInt(l, h);\n    E pivot = arr[randomIndex];\n    /* use code from previous partition() */\n}\n```\n\n### Time Complexity & Space Complexity (Analysis)\nThis version of Quick Sort is still an **unstable** sorting algorithm.\n- The best case is *$O(nlogn)*\n- The average case is *$O(nlogn)*\n- The worst case is *$O(nlogn)*\n\n## Visualizer\n...And that's it! Our implementation of Quick Sort should be working just fine. Remember, there is also a simple visualization tool for sorting algorithms. Click the button below to check out the visualizer!\n",section:this.sortingSection,nextSectionDirectory:"/AlgoVisual/documentation/sorting/heap-sort",nextSection:!0,nextSectionName:"6. Heap Sort"})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation/sorting/heap-sort",children:Object(p.jsx)(J,{mainDirectory:"/AlgoVisual/documentation/sorting",sections:ee,partNumber:6,markdown:"\n# Heap Sort\n",section:this.sortingSection,nextSectionDirectory:"/AlgoVisual/documentation/sorting/analysis-of-sorting-algorithms",nextSection:!0,nextSectionName:"7. Analysis of Sorting Algorithms"})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation/sorting/analysis-of-sorting-algorithms",children:Object(p.jsx)(J,{mainDirectory:"/AlgoVisual/documentation/sorting",sections:ee,partNumber:7,markdown:"\n# Analysis of Sorting Algorithms\n",section:this.sortingSection,nextSection:!1})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation/pathfinding",children:Object(p.jsx)($,{section:this.pathfindingSection})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation/pathfinding/graphs",children:Object(p.jsx)(J,{mainDirectory:"/AlgoVisual/documentation/pathfinding",sections:te,partNumber:1,markdown:'\n# Graphs\nThis part of the page will go over an implementation of an **undirected** graph and a **directed** graph.\n\n## Undirected Graphs Terminology\nThe images below explain the terminology that will be used regarding undirected graphs.\n|   |   |   |\n|:-:|:-:|:-:|\n|![Graph Anatomy](https://algs4.cs.princeton.edu/41graph/images/graph-anatomy.png)   | ![Graph Tree](https://algs4.cs.princeton.edu/41graph/images/tree.png)| ![Graph Spanning Forest](https://algs4.cs.princeton.edu/41graph/images/forest.png) |\n\n Image credits go to Robert Sedgewick & Kevin Wayne. Images can be obtained via their algorithms textbook [website.](https://algs4.cs.princeton.edu/41graph/)\n\n## Undirected Graph Implementation\nKeeping the last section in mind, we will be using adjacency-list representation for our implementation of a graph. We will be implementing the barebones logic of a graph. \n\n**NOTE**: We will also be using a **Bag** data structure, it is similar to an ArrayList, **except that it does NOT support removal of elements.**\n```java\n/*\n* Original authors:\n* @author Robert Sedgewick\n* @author Kevin Wayne\n*\n* Code can be obtained via their algorithms textbook website.\n* Website: https://algs4.cs.princeton.edu/41graph/\n*/\npublic class Graph {\n    private static final String NEWLINE = System.getProperty("line.separator");\n    private final int V; // number of vertices\n    private int E; // number of edges\n    private Bag<Integer>[] adj; // adj list for vertex v\n    // initialize our instance variables\n    public Graph(int V){  \n        if (V < 0) {\n            throw new IllegalStateException();\n        }\n        this.V = V;\n        this.E = 0;\n        adj = (Bag<Integer>[]) new Bag[V]; // array of lists\n        for (int v = 0; v < V; v++){\n            adj[v] = new Bag<Integer>(); // initialize adj lists\n        }\n    }\n}\n```\n\n### Helper Method\nWe will use the following helper method to validate that our vertices are within the bounds *$[0,V - 1]*\n```java\nprivate void validateVertex(int v) {\n    if (v < 0 || v >= V){\n        throw new IllegalArgumentException();\n    }\n}\n```\n\n### Getters\nWe will be using the following methods to get the number of vertices and edges.\n```java\npublic int V(){\n    return V;\n}\n\npublic int E(){\n    return E;\n}\n```\n\n### Adding Edges\nWe will using the following method to add edges into our graph. Remember, this is an **undirected** graph, so both vertices **must** connect to one another. In a **directed** graph we would only add the edge from *$V \\rightarrow W*.\n```java\npublic void addEdge(int v, int w){\n    validateVertex(v);\n    validateVertex(w);\n    adj[v].add(w);\n    adj[w].add(v);\n    E++;\n}\n```\n\n### Relevant Methods\nWe will go over two important methods for graphs, **degree()** and **adj()**.\n\n### Adjacent Vertices\nWe will want to get an iterable that includes all vertices adjacent to a vertex. \n```java\npublic Iterable<Integer> adj(int v){\n    validateVertex(v);\n    return adj[v];\n}\n```\n\n### Degree\nWe will also want to know the number of vertices connected to a vertex.\n```java\npublic int degree(int v){\n    validateVertex(v);\n    return adj[v].size();\n}\n```\n\n### String Representation\nWe will use the following string representation for our graph.\n```java\npublic String toString() {\n    StringBuilder s = new StringBuilder();\n    s.append(V).append(" vertices, ").append(E).append(" edges ").append(NEWLINE);\n    for (int v = 0; v < V; v++) {\n        s.append(v).append(": ");\n        for (int w : adj[v]) {\n            s.append(w).append(" ");\n        }\n        s.append(NEWLINE);\n    }\n    return s.toString();\n}\n```\n\n## Directed Graphs Terminology\nThe images below explain the terminology that will be used regarding directed graphs.\n|   |   |   |\n|:-:|:-:|:-:|\n|![Digraph Anatomy](https://algs4.cs.princeton.edu/42digraph/images/digraph-anatomy.png)   | ![Strong Components](https://algs4.cs.princeton.edu/42digraph/images/strong-components.png)|\n\n Image credits go to Robert Sedgewick & Kevin Wayne. Images can be obtained via their algorithms textbook [website.](https://algs4.cs.princeton.edu/41graph/)\n\n## Undirected Graph Implementation\nFor the most part, an implementation of a digraph is similar to an implementation of an undirected graph, but it has a few important key differences that we will examine.\n\n**NOTE**: We will also be using a **Bag** data structure, it is similar to an ArrayList, **except that it does NOT support removal of elements.**\n```java\n/*\n* Original authors:\n* @author Robert Sedgewick\n* @author Kevin Wayne\n*\n* Code can be obtained via their algorithms textbook website.\n* Website: https://algs4.cs.princeton.edu/41graph/\n*/\n\npublic class Digraph {\n    private static final String NEWLINE = System.getProperty("line.separator");\n    \n    private final int V; // number of vertices\n    private int E; // number of edges\n    private Bag<Integer>[] adj; // adj list for vertex v\n    private int[] indegree; // indegree of vertex v\n    \n    // initialize our instance variables\n    public Digraph(int V){  \n        if (V < 0) {\n            throw new IllegalStateException();\n        }\n        this.V = V;\n        this.E = 0;\n        indegree = new int[V];\n        adj = (Bag<Integer>[]) new Bag[V]; // array of lists\n        for (int v = 0; v < V; v++){\n            adj[v] = new Bag<Integer>(); // initialize adj lists\n        }\n    }\n}\n```\n\n### Helper Method\nWe will use the following helper method to validate that our vertices are within the bounds *$[0,V - 1]*\n```java\nprivate void validateVertex(int v) {\n    if (v < 0 || v >= V){\n        throw new IllegalArgumentException();\n    }\n}\n```\n\n### Getters\nWe will be using the following methods to get the number of vertices and edges.\n```java\npublic int V(){\n    return V;\n}\n\npublic int E(){\n    return E;\n}\n```\n\n### Adding Edges\nWe will using the following method to add edges into our graph. In a **directed** graph we **only** add the edge from *$V \\rightarrow W*. We also update the indegree value of vertex *$W*.\n```java\npublic void addEdge(int v, int w){\n    validateVertex(v);\n    validateVertex(w);\n    adj[v].add(w);\n    indegree[w]++;\n    E++;\n}\n```\n\n### Relevant Methods\nWe will go over two important methods for graphs, **degree()** and **adj()**.\n\n### Adjacent Vertices\nWe will want to get an iterable that includes all vertices adjacent to a vertex. \n```java\npublic Iterable<Integer> adj(int v){\n    validateVertex(v);\n    return adj[v];\n}\n```\n\n### Degree\nWe will also want to know the number of vertices connected to a vertex. For digraphs we have **outdegree** and **indegree**. Outdegree is the number of edges pointing **from** it. Indegree is the number of edges pointing **to** it.\n```java\npublic int outdegree(int v){\n    validateVertex(v);\n    return adj[v].size();\n}\n\npublic int indegree(int v){\n    validateVertex(v);\n    return indegree[v];\n}\n```\n\n### String Representation\nWe will use the following string representation for our digraph.\n```java\npublic String toString() {\n    StringBuilder s = new StringBuilder();\n    s.append(V).append(" vertices, ").append(E).append(" edges ").append(NEWLINE);\n    for (int v = 0; v < V; v++) {\n        s.append(v).append(": ");\n        for (int w : adj[v]) {\n            s.append(w).append(" ");\n        }\n        s.append(NEWLINE);\n    }\n    return s.toString();\n}\n```\n\n## Visualizer\n...And that\'s it! Our implementation of a Graph & Digraph should be working just fine. Remember, there is also a visualization tool for visualizing a graph and digraph! Click the button below to check out the visualizer!\n\n',section:this.pathfindingSection,nextSection:!0,nextSectionName:"2. Depth-First Search (DFS)",nextSectionDirectory:"/AlgoVisual/documentation/pathfinding/depth-first-search"})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation/pathfinding/depth-first-search",children:Object(p.jsx)(J,{mainDirectory:"/AlgoVisual/documentation/pathfinding",sections:te,partNumber:2,markdown:"\n# Depth-First Search\nThis part of the page will go over an implementation of Depth-First Search. \n\n## Depth-First Search Implementation\nDFS will be the first searching algorithm that will be examined. This algorithm works on both **graphs** and **digraphs.** An easy explanation for this is that a graph is essentially a digraph that always has two edges within both directions. \n\n### Rationale\nDepth-First Search is a recursive algorithm that recursively visits all vertices that are adjacent to it and have not been marked. An easier way to visualize this is by using the visualizer implemented in the Pathfindings section of the website.\n\n### Helper Method\nWe will be using the following helper method to validate our vertices are within the bounds *$[0, V-1]*\n```java\nprivate void validateVertex(int v) {\n    int V = marked.length;\n    if (v < 0 || v >= V) {\n        throw new IllegalArgumentException();\n    }\n}\n```\n\n### Depth-First Search\nThis is the setup used for DFS.\n```java\n/*\n* Original authors:\n* @author Robert Sedgewick\n* @author Kevin Wayne\n*\n* Code can be obtained via their algorithms textbook website.\n* Website: https://algs4.cs.princeton.edu/41graph/\n*/\npublic class DepthFirstSearch {\n    private boolean[] marked; // marked[v] = true iff v is reachable from s\n    private int[] edgeTo; // edgeTo[v] = last edge on path from s to v\n    private final int s; // source vertex\n    \n    // initialize instance variables and do DFS\n    public DepthFirstSearch(Digraph G, int s){\n        marked = new boolean[G.V()];\n        edgeTo = new int[G.V()];\n        this.s = s;\n        validateVertex(s);\n        dfs(G, s);\n    }\n    \n    // implementation of DFS (only a few lines of code)\n    private void dfs(Digraph G, int v){\n        marked[v] = true;\n        for (int w : G.adj(v)) {\n            if (!marked[w]){\n                edgeTo[w] = v; // last vertex that vertex w came from\n                dfs(G, w); // keep on recursively calling dfs() \n            }\n        }\n    }\n}\n```\n\n### Paths\nWe will now focus on returning the path that DFS takes to go from *$S \\rightarrow V*. In other words, we want the path from the source to the target vertex.\n```java\n// used to determine whether there's a path from s -> v\npublic boolean hasPathTo(int v) {\n    validateVertex(v);\n    return marked[v];\n}\n\n// loop from vertex and retrace steps using edgeTo[]\n// we use a stack to return our iterable in last-first order (easy to implement)\n// ex: [1, 4, 6] would return \"6 4 1\" within our iterable\npublic Iterable<Integer> pathTo(int v) {\n    validateVertex(v);\n    if (!hasPathTo(v)) return null;\n    Stack<Integer> path = new Stack<Integer>();\n    // keep looping until edgeTo[x] returns the source vertex\n    for (int x = v; x != s; x = edgeTo[x]){\n        path.push(x);\n    }\n    // push the source once we are done looping through our edgeTo[]\n    path.push(s);\n    return path;\n}\n```\n\n## Visualizer\n...And that's it! Our implementation of a DFS should be working just fine. Remember, there is also a visualization tool for visualizing DFS! Click the button below to check out the visualizer!\n",section:this.pathfindingSection,nextSection:!0,nextSectionName:"3. Breadth-First Search (BFS)",nextSectionDirectory:"/AlgoVisual/documentation/pathfinding/breadth-first-search"})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation/pathfinding/breadth-first-search",children:Object(p.jsx)(J,{mainDirectory:"/AlgoVisual/documentation/pathfinding",sections:te,partNumber:3,markdown:"\n# Breadth-First Search\nThis part of the page will go over an implementation of Breadth-First Search. \n\n## Breadth-First Search Implementation\nBFS is the second searching algorithm that will be examined. This algorithm works on both **graphs** and **digraphs.** An easy explanation for this is that a graph is essentially a digraph that always has two edges within both directions. \n\n### Rationale\nBreadth-First Search is an algorithm that puts all vertices **adjacent** to the source vertex **in a queue.** Next, it uses the **first adjacent vertex** from the queue, **by removing it**, and puts all vertices adjacent to that vertex in the queue. This process continues until the queue is empty. An easier way to visualize this is by using the visualizer implemented in the Pathfindings section of the website.\n\n### Helper Method\nWe will be using the following helper method to validate our vertices are within the bounds *$[0, V-1]*\n```java\nprivate void validateVertex(int v) {\n    int V = marked.length;\n    if (v < 0 || v >= V) {\n        throw new IllegalArgumentException();\n    }\n}\n```\n\n### Breadth-First Search\nThis is the setup used for BFS.\n```java\n/*\n* Original authors:\n* @author Robert Sedgewick\n* @author Kevin Wayne\n*\n* Code can be obtained via their algorithms textbook website.\n* Website: https://algs4.cs.princeton.edu/41graph/\n*/\npublic class BreadthFirstSearch {\n    private static final int INFINITY = Integer.MAX_VALUE;\n    private boolean[] marked; // marked[v] = true iff v is reachable from s\n    private int[] edgeTo; // edgeTo[v] = last edge on path from s to v\n    private int[] disto; // distTo[v] = length of shortest path from s to v\n    \n    // initialize instance variables and do BFS\n    public BreadthFirstSearch(Digraph G, int s){\n        marked = new boolean[G.V()];\n        edgeTo = new int[G.V()];\n        distTo = new int[G.V()];\n        for (int v = 0; v < G.V(); v++){\n            distTo[v] = INFINITY;\n        }\n        validateVertex(s);\n        bfs(G, s);\n    }\n    \n    // implementation of BFS (only a few lines of code)\n    private void bfs(Digraph G, int v){\n        Queue<Integer> q = new Queue<>();\n        marked[s] = true;\n        distTo[s] = 0; // initialize dist as 0 for source vertex\n        q.enqueue(s); // add source onto the queue\n        // keep looping until the queue is empty\n        while(!q.isEmpty()){\n            // remove element from queue\n            int v = q.dequeue();\n            // add all elements adj to the removed vertex onto the queue\n            for (int w : G.adj(v)){\n                if (!marked[w]){\n                    edgeTo[w] = v; // last vertex that vertex w came from\n                    distTo[w] = distTo[v] + 1; // update distance\n                    marked[w] = true; // mark the vertex as visited\n                    q.enqueue(w); // add vertex to the queue\n                }\n            }\n        }\n    }\n}\n```\n\n### Paths\nWe will now focus on returning the path that BFS takes to go from *$S \\rightarrow V*. In other words, we want the path from the source to the target vertex.\n```java\n// returns distance of path s -> v\npublic int distTo(int v){\n    validateVertex(v);\n    return distTo[v];\n}\n\n// used to determine whether there's a path from s -> v\npublic boolean hasPathTo(int v) {\n    validateVertex(v);\n    return marked[v];\n}\n\n// loop from vertex and retrace steps using edgeTo[]\n// we use a stack to return our iterable in last-first order (easy to implement)\n// ex: [1, 4, 6] would return \"6 4 1\" within our iterable\npublic Iterable<Integer> pathTo(int v) {\n    validateVertex(v);\n    if (!hasPathTo(v)) return null;\n    Stack<Integer> path = new Stack<Integer>();\n    int x; // we will need this once we are done looping to get our source vertex\n    // keep looping until distTo[x] is 0 (which means it's the source)\n    for (x = v; distTo[x] != 0; x = edgeTo[x]){\n        path.push(x);\n    }\n    // push the source once we are done looping through our edgeTo[]\n    path.push(x);\n    return path;\n}\n```\n\n## Visualizer\n...And that's it! Our implementation of a BFS should be working just fine. Remember, there is also a visualization tool for visualizing BFS! Click the button below to check out the visualizer!\n",section:this.pathfindingSection,nextSection:!0,nextSectionName:"4. Edge-Weighted Graphs",nextSectionDirectory:"/AlgoVisual/documentation/pathfinding/edge-weighted-graphs"})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation/pathfinding/edge-weighted-graphs",children:Object(p.jsx)(J,{mainDirectory:"/AlgoVisual/documentation/pathfinding",sections:te,partNumber:4,markdown:'\n# Edge-Weighted Graphs\nThis part of the page will go over an implementation of an edge-weighted graph.\n\n## Edge-Weighted Graph Implementation\nAn edge-weighted graph is an undirected graph that has edges that either have a **weight** or **cost.** Before implementing the graph itself, we will implement the **Edge** itself.\n\n### Edge Implementation\nWe will use the following **Edge** implementation for our Edge-Weighted Graph.\n```java\n/*\n* Original authors:\n* @author Robert Sedgewick\n* @author Kevin Wayne\n*\n* Code can be obtained via their algorithms textbook website.\n* Website: https://algs4.cs.princeton.edu/41graph/\n*/\npublic class Edge implements Comparable<Edge> {\n    private final int v; // vertex v\n    private final int w; // vertex w\n    private final double weight; // weight of the edge from v -> w\n\n    // initialize instance variables\n    public Edge(int v, int w, double weight){\n        if (v < 0) throw new IllegalArgumentException();\n        if (w < 0) throw new IllegalArgumentException();\n        if (Double.isNaN(weight)) throw new IllegalArgumentException();\n        this.v = v;\n        this.w = w;\n        this.weight = weight;\n    }\n    \n    // returns weight\n    public double weight(){\n        return weight;\n    }\n    \n    // returns either vertex\n    public int either(){\n        return v;\n    }\n    \n    // returns vertex that is diff from given vertex\n    public int other(int vertex){\n        if      (vertex == v) return w;\n        else if (vertex == w) return v;\n        else throw new IllegalArgumentException();\n    }\n    \n    // used for comparing edge weights\n    @Override\n    public int compareTo(Edge that) {\n        return Double.compare(this.weight, that.weight);\n    }\n    \n    // string representation of edge\n    public String toString() {\n        return String.format("%d-%d %.5f", v, w, weight);\n    }\n}\n```\n\n### Edge-Weighted Graph\nWe will be implementing the barebones logic of an Edge-Weighted Graph.\n```java\n/*\n* Original authors:\n* @author Robert Sedgewick\n* @author Kevin Wayne\n*\n* Code can be obtained via their algorithms textbook website.\n* Website: https://algs4.cs.princeton.edu/41graph/\n*/\npublic class EdgeWeightedGraph {\n    private static final String NEWLINE = System.getProperty("line.separator");\n    private final int V; // number of vertices\n    private int E; // number of edges\n    private Bag<Edge>[] adj; // adj list for vertex v\n    \n    // initialize instance variables\n    public EdgeWeightedGraph(int V) {\n        if (V < 0) throw new IllegalArgumentException();\n        this.V = V;\n        this.E = 0;\n        adj = (Bag<Edge>[]) new Bag[V]; // array of lists of type edge\n        for (int v = 0; v < V; v++) {\n            adj[v] = new Bag<Edge>(); // initialize adj lists\n        }\n    }\n}\n```\n\n### Helper Method \nWe will use the following helper method to validate that our vertices are within the bounds *$[0, V-1]*\n```java\nprivate void validateVertex(int v) {\n    if (v < 0 || v >= V){\n        throw new IllegalArgumentException();\n    }\n}\n```\n\n### Getters\nWe will be using the following methods to get the number of vertices and edges.\n```java\npublic int V(){\n    return V;\n}\n\npublic int E(){\n    return E;\n}\n```\n\n### Adding Edges\nWe will using the following method to add edges into our graph. Remember, this is an **undirected** graph, so both vertices **must** connect to one another. In a **directed** graph we would only add the edge from *$V \\rightarrow W*\n```java\npublic void addEdge(Edge e){\n    int v = e.either();\n    int w = e.other(v);\n    validateVertex(v);\n    validateVertex(w);\n    adj[v].add(e);\n    adj[w].add(e);\n    E++;\n}\n```\n\n### Relevant Methods\nWe will go over two important methods for graphs, **degree()** and **adj()**.\n\n### Adjacent Vertices\nWe will want to get an iterable that includes all vertices adjacent to a vertex. \n```java\npublic Iterable<Integer> adj(int v){\n    validateVertex(v);\n    return adj[v];\n}\n```\n\n### Degree\nWe will also want to know the number of vertices connected to a vertex.\n```java\npublic int degree(int v){\n    validateVertex(v);\n    return adj[v].size();\n}\n```\n\n### Edges Iterable\nWe also want to be able to return all Edges within our Edge-Weighted graph.\n```java\npublic Iterable<Edge> edges() {\n    Bag<Edge> list = new Bag<Edge>();\n    for (int v = 0; v < V; v++) {\n        int selfLoops = 0;\n        for (Edge e : adj(v)) {\n            // makes sure it only adds an edge from v -> w once \n            // since one vertex will always be greater in index\n            if (e.other(v) > v) {\n                list.add(e);\n            }\n            // handles the other case where v == w\n            // add only one copy of each self loop (self loops will be consecutive)\n            else if (e.other(v) == v) {\n                if (selfLoops % 2 == 0) list.add(e);\n                selfLoops++;\n            }\n        }\n    }\n    return list;\n}\n```\n\n### String Representation\nWe will use the following string representation for our graph.\n```java\npublic String toString() {\n    StringBuilder s = new StringBuilder();\n    s.append(V).append(" ").append(E).append(NEWLINE);\n    for (int v = 0; v < V; v++) {\n        s.append(v).append(": ");\n        for (Edge e : adj[v]) {\n            s.append(e).append("  ");\n        }\n        s.append(NEWLINE);\n    }\n    return s.toString();\n}\n## Visualizer\n...And that\'s it! Our implementation of an Edge-Weighted Graph should be working just fine. Remember, there is also a visualization tool for visualizing an Edge-Weighted Graph! Click the button below to check out the visualizer!\n',section:this.pathfindingSection,nextSection:!0,nextSectionName:"5. Minimum Spanning Trees",nextSectionDirectory:"/AlgoVisual/documentation/pathfinding/minimum-spanning-trees"})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation/pathfinding/minimum-spanning-trees",children:Object(p.jsx)(J,{mainDirectory:"/AlgoVisual/documentation/pathfinding",sections:te,partNumber:5,markdown:"\n# Minimum Spanning Trees\nThis part of the page will go over **two** implementations in finding a **minimum spanning tree.**\n\n## Terminology\nA minimum spanning tree is the spanning tree of a graph with the least amount of total weight. The image below explains this concept.\n![Minimum Spanning Trees](https://algs4.cs.princeton.edu/43mst/images/mst.png)\n\nImage credits go to Robert Sedgewick & Kevin Wayne. Images can be obtained via their algorithms textbook [website.](https://algs4.cs.princeton.edu/43mst/)\n\n## Kruskal's Algorithm Implementation\nKruskal's Algorithm will be the first algorithm we will go over as it is a simple but elegant way of finding a minimum spanning tree.\n\n### Rationale\nIn-order to find the minimum spanning tree of a graph, we have the weights in order from least to greatest by sorting the edges by weight. Start the process from least to greatest, if the edge does not make a cycle, then it is part of the minimum spanning tree. This is the basic idea of Kruskal's algorithm.\n\n### Kruskal's Algorithm\nThis is the setup used for Kruskal's Algorithm.\n```java\n/*\n* Original authors:\n* @author Robert Sedgewick\n* @author Kevin Wayne\n*\n* Code can be obtained via their algorithms textbook website.\n* Website: https://algs4.cs.princeton.edu/41graph/\n*/\n\npublic class KruskalMST {\n    private double weight;\n    private Queue<Edge> mst new Queue<>();\n    \n    public KruskalMST(EdgeWeightedGraph G){\n        // get the edges of the graph\n        Edge[] edges = new Edge(G.E());\n        int t = 0;\n        for (Edge e : G.edges()){\n            edges[t++] = e;\n        }\n        // sort edges by weight (edge uses comparable)\n        Arrays.sort(edges);\n        \n        // run greedy algorithm\n        UF uf = new UF(G.V());\n        for (int i = 0; i < G.E() && mst.size() < G.V() - 1; i++) {\n            // gets the vertices v -> w from the edge\n            Edge e = edges[i];\n            int v = e.either();\n            int w = e.other(v);\n\n            // make sure that v-w does not create a cycle\n            // in other words, make sure that both vertices aren't in the MST\n            // if both vertices aren't in the MST, add edge to MST\n            if (uf.find(v) != uf.find(w)) {\n                uf.union(v, w);     // merge v and w components\n                mst.enqueue(e);     // add edge e to mst\n                weight += e.weight();\n            }\n        }\n    }\n}\n```\n\n### Relevant Methods\nOnce we are done with the algorithm, we can get an iterable of the edges in the MST and we can get the total weigth of the MST.\n```java\npublic Iterable<Edge> edges(){\n    return  mst;\n}\n\npublic double weight(){\n    return weight;\n}\n```\n\n## Prim's Algorithm Implementation\n[TODO]\n",section:this.pathfindingSection,nextSection:!0,nextSectionName:"6. Edge-Weighted Digraphs",nextSectionDirectory:"/AlgoVisual/documentation/pathfinding/edge-weighted-digraphs"})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation/pathfinding/edge-weighted-digraphs",children:Object(p.jsx)(J,{mainDirectory:"/AlgoVisual/documentation/pathfinding",sections:te,partNumber:6,markdown:'\n# Edge-Weighted Digraphs\nThis part of the page will go over an implementation of an edge-weighted digraph.\n\n## Edge-Weighted Digraph Implementation\nFor the most part, an implementation of an edge-weighted digraph is similar to an implementation of an edge-weighted graph, as it just a digraph that has edges that either have a **weight** or **cost.** Before implementing the graph itself, we will implement the DirectedEdge itself.\n```java\n/*\n* Original authors:\n* @author Robert Sedgewick\n* @author Kevin Wayne\n*\n* Code can be obtained via their algorithms textbook website.\n* Website: https://algs4.cs.princeton.edu/41graph/\n*/\npublic class DirectedEdge implements Comparable<DirectedEdge> {\n    private final int v; // vertex v\n    private final int w; // vertex w\n    private final double weight; // weight of the edge from v -> w\n\n    // initialize instance variables\n    public Edge(int v, int w, double weight){\n        if (v < 0) throw new IllegalArgumentException();\n        if (w < 0) throw new IllegalArgumentException();\n        if (Double.isNaN(weight)) throw new IllegalArgumentException();\n        this.v = v;\n        this.w = w;\n        this.weight = weight;\n    }\n    \n    // returns weight\n    public double weight(){\n        return weight;\n    }\n    \n    // returns either vertex\n    public int from(){\n        return v;\n    }\n    \n    // returns vertex that is diff from given vertex\n    public int to(int vertex){\n        return w; // key difference as we can no longer go from w -> v\n    }\n    \n    // used for comparing edge weights\n    @Override\n    public int compareTo(Edge that) {\n        return Double.compare(this.weight, that.weight);\n    }\n    \n    // string representation of edge\n    public String toString() {\n        return v + "->" + w + " " + String.format("%5.2f", weight);\n    }\n}\n```\n\n### Edge-Weighted Digraph\nWe will be implementing the barebones logic of an Edge-Weighted Digraph.\n```java\n/*\n* Original authors:\n* @author Robert Sedgewick\n* @author Kevin Wayne\n*\n* Code can be obtained via their algorithms textbook website.\n* Website: https://algs4.cs.princeton.edu/41graph/\n*/\n\npublic class EdgeWeightedDigraph {\n    private static final String NEWLINE = System.getProperty("line.separator");\n    private final int V; // number of vertices\n    private int E; // number of edges\n    private Bag<DirectedEdge>[] adj; // adj list for vertex v\n    private int[] indegree; // indegree of vertex v\n\n    // initialize instance variables\n    public EdgeWeightedDigraph(int V) {\n        if (V < 0) throw new IllegalArgumentException();\n        this.V = V;\n        this.E = 0;\n        this.indegree = new int[V];\n        adj = (Bag<DirectedEdge>[]) new Bag[V]; // array of lists\n        for (int v = 0; v < V; v++){\n            adj[v] = new Bag<DirectedEdge>(); // initialize adj lists\n        }\n    }\n}\n```\n\n### Helper Method \nWe will use the following helper method to validate that our vertices are within the bounds *$[0, V -1]*\n```java\nprivate void validateVertex(int v){\n    if (v < 0  || v >= V){\n        throw new IllegalArgumentException();\n    }\n}\n```\n\n### Getters \nWe will be using the following methods to get the number of vertices and edges.\n```java\npublic int V(){\n    return V;\n}\n\npublic int E(){\n    return E;\n}\n```\n\n### Adding Edges \nWe will be using the following method to add edges into our graph. In a **directed** graph we **only** add the edge from *$V \\rightarrow W*\n```java\npublic void addEdge(DirectedEdge e) {\n    int v = e.from();\n    int w = e.to();\n    validateVertex(v);\n    validateVertex(w);\n    adj[v].add(e);\n    indegree[w]++;\n    E++;\n}\n```\n\n',section:this.pathfindingSection,nextSection:!0,nextSectionName:"7. Shortest Paths",nextSectionDirectory:"/AlgoVisual/documentation/pathfinding/shortest-paths"})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation/pathfinding/shortest-paths",children:Object(p.jsx)(J,{mainDirectory:"/AlgoVisual/documentation/pathfinding",sections:te,partNumber:7,markdown:"\n# Shortest Paths\n\n",section:this.pathfindingSection,nextSection:!0,nextSectionName:"8. Maxflow-Mincut",nextSectionDirectory:"/AlgoVisual/documentation/pathfinding/maxflow-mincut"})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/documentation/pathfinding/maxflow-mincut",children:Object(p.jsx)(J,{mainDirectory:"/AlgoVisual/documentation/pathfinding",sections:te,partNumber:7,markdown:"\n# Maxflow-Mincut\n\n",section:this.pathfindingSection,nextSection:!1})})]}),Object(p.jsx)(Z,{})]})}}]),n}(a.a.Component),ie=n(19);n(603);function ae(e){var t=[];return function(e,t){for(var n=0;n<e.length-1;n++){for(var i=0,a=0;a<e.length-1-n;a++)t.push([a,a+1,!0]),t.push([a,a+1,!0]),e[a]>e[a+1]?(t.push([a,e[a+1],!1]),t.push([a+1,e[a],!1]),re(e,a,a+1)):i++;if(i===e.length-1)break}}(e,t),t}function re(e,t,n){var i=e[t];e[t]=e[n],e[n]=i}function oe(e){var t=[],n=e.slice();return se(e,0,e.length-1,n,t),t}function se(e,t,n,i,a){if(t!==n){var r=Math.floor((t+n)/2);se(i,t,r,e,a),se(i,r+1,n,e,a),function(e,t,n,i,a,r){var o=t,s=t,l=n+1;for(;s<=n&&l<=i;)r.push([s,l,!0]),r.push([s,l,!0]),a[s]<=a[l]?(r.push([o,a[s],!1]),e[o++]=a[s++]):(r.push([o,a[l],!1]),e[o++]=a[l++]);for(;s<=n;)r.push([s,s,!0]),r.push([s,s,!0]),r.push([o,a[s],!1]),e[o++]=a[s++];for(;l<=i;)r.push([l,l,!0]),r.push([l,l,!0]),r.push([o,a[l],!1]),e[o++]=a[l++]}(e,t,r,n,i,a)}}function le(e){var t=[];return ce(e,0,e.length-1,t),t}function ce(e,t,n,i){if(t<n){var a=function(e,t,n,i){var a,r=(s=t,l=n,Math.floor(Math.random()*(l-s)+s)),o=e[r];var s,l;i.push([r,r,"pivot","insert"]);var c=t-1,h=n+1;for(;;){do{c++,i.push([c,c,"color","insert"]),i.push([c,c,"color","revert"])}while(e[c]<o);do{h--,i.push([h,h,"color","insert"]),i.push([h,h,"color","revert"])}while(e[h]>o);if(c>=h)return i.push([a,a,"pivot","revert"]),h;i.push([c,e[h],"swap","swap"]),i.push([h,e[c],"swap","swap"]),he(e,c,h),c===r?(i.push([h,h,"pivot","insert"]),a=h):h===r&&(i.push([c,c,"pivot","insert"]),a=c)}}(e,t,n,i);ce(e,t,a,i),ce(e,a+1,n,i)}}function he(e,t,n){var i=e[t];e[t]=e[n],e[n]=i}function de(e){var t=[];return function(e,t){for(var n=e.length,i=n/2;i>=1;i--)ue(e,i,n,t);var a=n;for(;a>1;)ge(e,1,a--,t),ue(e,1,a,t)}(e,t),t}function ue(e,t,n,i){for(;2*t<=n;){var a=2*t;if(a<n&&pe(e,a,a+1)&&a++,!pe(e,t,a))break;ge(e,t,a,i),t=a}}function pe(e,t,n){return e[t-1]<e[n-1]}function ge(e,t,n,i){i.push([t-1,t-1,!0]),i.push([t-1,t-1,!0]),i.push([t-1,e[n-1],!1]),i.push([n-1,n-1,!0]),i.push([n-1,n-1,!0]),i.push([n-1,e[t-1],!1]);var a=e[t-1];e[t-1]=e[n-1],e[n-1]=a}function me(e){var t=[];return function(e,t){for(var n=0;n<e.length;n++){for(var i=e[n],a=n,r=n;r<e.length;r++)t.push([r,r,!0]),t.push([r,r,!0]),i>e[r]&&(i=e[r],a=r);t.push([n,e[a],!1]),t.push([a,e[n],!1]),be(e,n,a)}}(e,t),t}function be(e,t,n){var i=e[t];e[t]=e[n],e[n]=i}var ve=n(624),fe="#98d6e8",we="#33435d",je=["Bubble Sort","Insertion Sort","Selection Sort","Merge Sort","Quick Sort","Heap Sort"],xe=function(e){Object(c.a)(n,e);var t=Object(h.a)(n);function n(e){var a;return Object(s.a)(this,n),(a=t.call(this,e)).dropdownSelection=Object(i.createRef)(),a.dropdownCaret=Object(i.createRef)(),a.runButton=Object(i.createRef)(),a.resetButton=Object(i.createRef)(),a.timer=void 0,a.timer=null,a.state={arr:[],numberOfBars:100,sortingSpeed:1,sortingAlgorithm:"Quick Sort",showSortingOptions:!1,optionsDisabled:!1,animationLength:0,sliderStyle:{color:"#33435d",":hover":{boxShadow:0},"& .MuiSlider-thumb":{bgcolor:"#85a4d9","&:focus, &:hover, &.Mui-active, &.Mui-focusVisible":{boxShadow:"0"}},"& .MuiSlider-valueLabel":{display:"none"}},keepTimeout:!0},a.resetArray=a.resetArray.bind(Object(d.a)(a)),a.changeWidthBasedOnSize=a.changeWidthBasedOnSize.bind(Object(d.a)(a)),a.numberOfBars=a.numberOfBars.bind(Object(d.a)(a)),a.sliderSpeed=a.sliderSpeed.bind(Object(d.a)(a)),a.runSortingAlgorithm=a.runSortingAlgorithm.bind(Object(d.a)(a)),a.buttonEnter=a.buttonEnter.bind(Object(d.a)(a)),a.buttonLeave=a.buttonLeave.bind(Object(d.a)(a)),a.showSortingAlgorithms=a.showSortingAlgorithms.bind(Object(d.a)(a)),a.closeSortingAlgorithms=a.closeSortingAlgorithms.bind(Object(d.a)(a)),a.displaySortingAlgorithms=a.displaySortingAlgorithms.bind(Object(d.a)(a)),a.changeAlgorithm=a.changeAlgorithm.bind(Object(d.a)(a)),a}return Object(l.a)(n,[{key:"componentDidMount",value:function(){var e=this;this.resetArray(),window.addEventListener("resize",(function(){e.resetArray()}),!0)}},{key:"resetArray",value:function(){var e,t,n=this;if(!this.state.optionsDisabled){for(var i=document.getElementById("app-wrapper").clientHeight,a=document.getElementById("header").clientHeight,r=document.getElementById("footer").clientHeight,o=i-a-r,s=(o=o<600?8*r:o<200?1:o)-100,l=[],c=0;c<this.state.numberOfBars;c++)l.push((e=5,t=s,Math.floor(Math.random()*(t-e+1)+e)));this.setState({arr:l},(function(){return n.changeWidthBasedOnSize(n.state.arr)}))}}},{key:"changeWidthBasedOnSize",value:function(e){e.length<=20?this.changeBarsWidth(60):e.length<=40?this.changeBarsWidth(35):e.length<=100?this.changeBarsWidth(10):e.length<=150?this.changeBarsWidth(8):e.length<=200?this.changeBarsWidth(5):this.changeBarsWidth(3)}},{key:"changeBarsWidth",value:function(e){for(var t=document.getElementsByClassName("array-bar"),n=0;n<t.length;n++){t[n].style.width=e+"px"}}},{key:"numberOfBars",value:function(e,t){var n=this;this.setState({numberOfBars:t},(function(){n.state.numberOfBars>10&&n.state.numberOfBars<250&&n.resetArray()}))}},{key:"sliderSpeed",value:function(e,t){this.setState({sortingSpeed:t})}},{key:"buttonEnter",value:function(e){this.state.optionsDisabled||(e.currentTarget.style.color="#98d6e8")}},{key:"buttonLeave",value:function(e){this.state.optionsDisabled||(e.currentTarget.style.color="#fff")}},{key:"showSortingAlgorithms",value:function(e){var t=this;this.state.showSortingOptions||(this.setState({showSortingOptions:!0},(function(){return t.displaySortingAlgorithms()})),e.stopPropagation(),document.addEventListener("click",this.closeSortingAlgorithms))}},{key:"closeSortingAlgorithms",value:function(){var e=this;this.setState({showSortingOptions:!1},(function(){return e.displaySortingAlgorithms()})),document.removeEventListener("click",this.closeSortingAlgorithms)}},{key:"displaySortingAlgorithms",value:function(){this.state.showSortingOptions?(this.dropdownSelection.current.style.display="block",this.dropdownCaret.current.style.transform="rotate(180deg)",this.dropdownCaret.current.style.transition="all 250ms linear"):(this.dropdownSelection.current.style.display="none",this.dropdownCaret.current.style.transform="rotate(0deg)",this.dropdownCaret.current.style.transition="all 250ms linear")}},{key:"changeAlgorithm",value:function(e){this.setState({sortingAlgorithm:e})}},{key:"bubbleSort",value:function(){var e=ae(this.state.arr);this.sort(e,2)}},{key:"insertionSort",value:function(){var e=function(e){var t=[];return function(e,t){for(var n=1;n<e.length;n++){for(var i=e[n],a=n-1;a>=0&&e[a]>i;)t.push([a+1,a,!0]),t.push([a+1,a,!0]),t.push([a+1,e[a],!1]),e[a+1]=e[a],a--;t.push([a+1,n,!0]),t.push([a+1,n,!0]),t.push([a+1,i,!1]),e[a+1]=i}}(e,t),t}(this.state.arr);this.sort(e,3)}},{key:"selectionSort",value:function(){var e=me(this.state.arr);this.sort(e,2)}},{key:"mergeSort",value:function(){var e=oe(this.state.arr);this.sort(e,3)}},{key:"quickSort",value:function(){var e=le(this.state.arr);this.quickSortAnimations(e)}},{key:"heapSort",value:function(){var e=de(this.state.arr);this.sort(e,3)}},{key:"quickSortAnimations",value:function(e){var t=this,n=e.length*this.state.sortingSpeed;this.enableSettings(n);for(var i=0;i<e.length;i++){var a=document.getElementsByClassName("array-bar");if(void 0!==a){var r=e[i][2];"color"===r?function(){var n=Object(ie.a)(e[i],2),r=n[0],o=n[1],s=a[r],l=a[o],c="insert"===e[i][3]?we:fe,h=setTimeout((function(){void 0===s&&void 0===l||(s.style.backgroundColor=c,l.style.backgroundColor=c)}),i*t.state.sortingSpeed);void 0!==s&&void 0!==l||clearTimeout(h)}():"swap"===r?function(){var n=Object(ie.a)(e[i],2),r=n[0],o=n[1],s=a[r],l=setTimeout((function(){void 0!==s&&(s.style.height=o+"px")}),i*t.state.sortingSpeed);void 0===s&&clearTimeout(l)}():"pivot"===r&&function(){var n=Object(ie.a)(e[i],2),r=n[0],o=n[1],s=a[r],l=a[o],c="insert"===e[i][3]?"#83f57f":fe,h=setTimeout((function(){void 0===s&&void 0===l||(s.style.backgroundColor=c,l.style.backgroundColor=c)}),i*t.state.sortingSpeed);void 0!==s&&void 0!==l||clearTimeout(h)}()}}}},{key:"sort",value:function(e,t){var n=this,i=e.length*this.state.sortingSpeed;this.enableSettings(i);for(var a=0;a<e.length;a++){var r=document.getElementsByClassName("array-bar");if(void 0!==r)e[a][2]?function(){var i=Object(ie.a)(e[a],2),o=i[0],s=i[1],l=r[o],c=r[s],h=a%t===0?we:fe,d=setTimeout((function(){void 0===l&&void 0===c||(l.style.backgroundColor=h,c.style.backgroundColor=h)}),a*n.state.sortingSpeed);void 0!==l&&void 0!==c||clearTimeout(d)}():function(){var t=Object(ie.a)(e[a],2),i=t[0],o=t[1],s=r[i],l=setTimeout((function(){void 0!==s&&(s.style.height=o+"px")}),a*n.state.sortingSpeed);void 0===s&&clearTimeout(l)}()}}},{key:"runSortingAlgorithm",value:function(){var e=this;this.setState({optionsDisabled:!0},(function(){switch(e.state.sortingAlgorithm){case"Bubble Sort":e.bubbleSort();break;case"Insertion Sort":e.insertionSort();break;case"Selection Sort":e.selectionSort();break;case"Merge Sort":e.mergeSort();break;case"Quick Sort":e.quickSort();break;case"Heap Sort":e.heapSort()}}));for(var t=document.getElementsByClassName("sidebar-button"),n=0;n<t.length;n++){var i=t[n];i.style.color="#f5a0a0",i.style.cursor="revert"}this.setState({sliderStyle:{"& .MuiSlider-thumb":{bgcolor:"#f5a0a0",":hover":{boxShadow:0}}}})}},{key:"enableSettings",value:function(e){var t=this;setTimeout((function(){t.setState({optionsDisabled:!1,sliderStyle:{color:"#33435d",":hover":{boxShadow:0},"& .MuiSlider-thumb":{bgcolor:"#85a4d9",":hover":{boxShadow:0}},"& .MuiSlider-valueLabel":{display:"none"}}});for(var e=document.getElementsByClassName("sidebar-button"),n=0;n<e.length;n++){var i=e[n];i.style.color="#fff",i.style.cursor="pointer"}}),e)}},{key:"render",value:function(){var e=this,t=this.state.arr.map((function(e,t){return Object(p.jsx)("div",{className:"array-bar",style:{backgroundColor:fe,height:e+"px"}},t)}));return Object(p.jsxs)("main",{className:"main-sidebar",children:[Object(p.jsx)("div",{className:"sidebar-wrapper",children:Object(p.jsx)("div",{className:"sidebar",children:Object(p.jsxs)("div",{className:"sidebar-settings",children:[Object(p.jsxs)("div",{className:"sidebar-setting",children:[Object(p.jsx)("p",{children:" Control number of bars "}),Object(p.jsxs)("p",{children:[" ",this.state.numberOfBars," bars "]}),Object(p.jsx)(ve.a,{sx:this.state.sliderStyle,disabled:this.state.optionsDisabled,min:10,onChange:this.numberOfBars,max:250,defaultValue:100,valueLabelDisplay:"auto"})]}),Object(p.jsxs)("div",{className:"sidebar-setting",children:[Object(p.jsx)("p",{children:" Control visualizer speed "}),Object(p.jsxs)("p",{children:[" ",this.state.sortingSpeed," ms "]}),Object(p.jsx)(ve.a,{sx:this.state.sliderStyle,disabled:this.state.optionsDisabled,min:1,onChange:this.sliderSpeed,max:100,defaultValue:1,valueLabelDisplay:"auto"})]}),Object(p.jsxs)("div",{className:"sidebar-setting",children:[Object(p.jsx)("p",{children:" Choose an algorithm "}),Object(p.jsxs)("div",{className:"selection-dropdown",onClick:this.showSortingAlgorithms,children:[Object(p.jsx)("div",{className:"current-option",children:Object(p.jsxs)("p",{children:[" ",this.state.sortingAlgorithm," "]})}),Object(p.jsx)("div",{className:"caret-down",children:Object(p.jsx)("i",{className:"fas fa-caret-down",ref:this.dropdownCaret,children:" "})})]}),Object(p.jsx)("div",{className:"selection-options",ref:this.dropdownSelection,children:Object(p.jsx)("ul",{children:je.map((function(t){return Object(p.jsxs)("div",{onClick:function(){return e.changeAlgorithm(t)},children:[" ",t," "]},t)}))})}),Object(p.jsx)("button",{disabled:this.state.optionsDisabled,className:"sidebar-button",onClick:this.runSortingAlgorithm,onMouseEnter:this.buttonEnter,onMouseLeave:this.buttonLeave,ref:this.runButton,children:" Run"})]}),Object(p.jsxs)("div",{className:"sidebar-setting",children:[Object(p.jsx)("p",{children:" Reset the array "}),Object(p.jsx)("button",{disabled:this.state.optionsDisabled,className:"sidebar-button",onClick:this.resetArray,onMouseEnter:this.buttonEnter,onMouseLeave:this.buttonLeave,ref:this.resetButton,children:" Reset"})]})]})})}),Object(p.jsx)("div",{className:"main-content",children:Object(p.jsx)("div",{id:"sorting-visualizer",children:t})})]})}}]),n}(a.a.Component);n(605);var ye=function(e){Object(c.a)(n,e);var t=Object(h.a)(n);function n(e){return Object(s.a)(this,n),t.call(this,e)}return Object(l.a)(n,[{key:"render",value:function(){var e=this.props,t=e.col,n=e.isFinish,i=e.isStart,a=e.isWall,r=e.onMouseDown,o=e.onMouseEnter,s=e.onMouseUp,l=n?"node node-finish":i?"node node-start":a?"node node-wall":"node",c="node-"+t+"-"+e.row;return Object(p.jsx)("div",{id:c,className:l,onMouseDown:r,onMouseEnter:o,onMouseUp:s})}}]),n}(a.a.Component),Oe=(n(606),n(65));function Se(e,t,n){var i=[];t.distance=0;for(var a=function(e){var t,n=[],i=Object(Oe.a)(e);try{for(i.s();!(t=i.n()).done;){var a,r=t.value,o=Object(Oe.a)(r);try{for(o.s();!(a=o.n()).done;){var s=a.value;n.push(s)}}catch(l){o.e(l)}finally{o.f()}}}catch(l){i.e(l)}finally{i.f()}return n}(e);a.length;){ke(a);var r=a.shift();if(!r.isWall){if(r.distance===1/0)return i;if(r.isVisited=!0,i.push(r),r===n)return i;Ae(r,e)}}return i}function ke(e){e.sort((function(e,t){return e.distance-t.distance}))}function Ae(e,t){var n,i=function(e,t){var n=[],i=e.col,a=e.row;a>0&&n.push(t[a-1][i]);a<t.length-1&&n.push(t[a+1][i]);i>0&&n.push(t[a][i-1]);i<t[0].length-1&&n.push(t[a][i+1]);return n.filter((function(e){return!e.isVisited}))}(e,t),a=Object(Oe.a)(i);try{for(a.s();!(n=a.n()).done;){var r=n.value;r.distance=e.distance+1,r.previousNode=e}}catch(o){a.e(o)}finally{a.f()}}function Ee(e,t){return{col:e,row:t,isStart:10===t&&15===e,isFinish:10===t&&35===e,distance:1/0,isVisited:!1,isWall:!1,previousNode:null}}function Te(e,t,n){var i=e.slice(),a=i[t][n];return i[t][n]=Object(w.a)(Object(w.a)({},a),{},{isWall:!a.isWall}),i}var Ve=function(e){Object(c.a)(n,e);var t=Object(h.a)(n);function n(e){var i;return Object(s.a)(this,n),(i=t.call(this,e)).state={grid:[],mouseIsPressed:!1},i}return Object(l.a)(n,[{key:"componentDidMount",value:function(){var e=function(){for(var e=[],t=0;t<20;t++){for(var n=[],i=0;i<50;i++)n.push(Ee(i,t));e.push(n)}return e}();this.setState({grid:e})}},{key:"handleMouseDown",value:function(e,t){var n=Te(this.state.grid,e,t);this.setState({grid:n,mouseIsPressed:!0})}},{key:"handleMouseEnter",value:function(e,t){if(this.state.mouseIsPressed){var n=Te(this.state.grid,e,t);this.setState({grid:n})}}},{key:"handleMouseUp",value:function(){this.setState({mouseIsPressed:!1})}},{key:"animateDijkstra",value:function(e,t){for(var n=this,i=function(i){if(i===e.length)return setTimeout((function(){n.animateShortestPath(t)}),10*i),{v:void 0};setTimeout((function(){var t=e[i],n="node-"+t.col+"-"+t.row;document.getElementById(n).className="node node-visited"}),10*i)},a=0;a<=e.length;a++){var r=i(a);if("object"===typeof r)return r.v}}},{key:"animateShortestPath",value:function(e){for(var t=function(t){setTimeout((function(){var n=e[t],i="node-"+n.col+"-"+n.row;document.getElementById(i).className="node node-shortest-path"}),50*t)},n=0;n<e.length;n++)t(n)}},{key:"visualizeDijkstra",value:function(){var e=this.state.grid,t=e[10][15],n=e[10][35],i=Se(e,t,n),a=function(e){for(var t=[],n=e;null!==n;)t.unshift(n),n=n.previousNode;return t}(n);this.animateDijkstra(i,a)}},{key:"render",value:function(){var e=this,t=this.state,n=(t.grid,t.mouseIsPressed),i=this.state.grid.map((function(t,i){return Object(p.jsx)("div",{className:"grid-row",children:t.map((function(t,i){var a=t.row,r=t.col,o=t.isFinish,s=t.isStart,l=t.isWall;return Object(p.jsx)(ye,{row:a,col:r,isStart:s,isFinish:o,isWall:l,mouseIsPressed:n,onMouseUp:function(){return e.handleMouseUp()},onMouseDown:function(){return e.handleMouseDown(a,r)},onMouseEnter:function(){return e.handleMouseEnter(a,r)}})}))})}));return Object(p.jsxs)("main",{className:"main-sidebar",children:[Object(p.jsx)("div",{className:"sidebar",children:Object(p.jsx)("div",{className:"sidebar-settings",children:Object(p.jsxs)("div",{className:"sidebar-setting",children:[Object(p.jsx)("p",{children:" Choose an algorithm "}),Object(p.jsx)("button",{className:"sidebar-button",onClick:function(){return e.visualizeDijkstra()},children:"Run"})]})})}),Object(p.jsx)("div",{className:"main-content",children:Object(p.jsx)("div",{id:"pathfinding-visualizer",children:i})})]})}}]),n}(a.a.Component),Ne=function(e){Object(c.a)(n,e);var t=Object(h.a)(n);function n(e){return Object(s.a)(this,n),t.call(this,e)}return Object(l.a)(n,[{key:"render",value:function(){return Object(p.jsx)(u.a,{children:Object(p.jsxs)("div",{id:"app-wrapper",children:[Object(p.jsx)(g,{}),Object(p.jsxs)(v.c,{children:[Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual",children:Object(p.jsx)(b,{})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/sorting",children:Object(p.jsx)(xe,{})}),Object(p.jsx)(v.a,{exact:!0,path:"/AlgoVisual/pathfinding",children:Object(p.jsx)(Ve,{})}),Object(p.jsx)(v.a,{path:"/AlgoVisual/documentation",children:Object(p.jsx)(ne,{})}),Object(p.jsx)(v.a,{path:"/AlgoVisual/about"})]}),Object(p.jsx)(m,{})]})})}}]),n}(a.a.Component),Ie=function(e){e&&e instanceof Function&&n.e(3).then(n.bind(null,626)).then((function(t){var n=t.getCLS,i=t.getFID,a=t.getFCP,r=t.getLCP,o=t.getTTFB;n(e),i(e),a(e),r(e),o(e)}))};o.a.render(Object(p.jsx)(a.a.StrictMode,{children:Object(p.jsx)(Ne,{})}),document.getElementById("root")),Ie()}},[[607,1,2]]]);
//# sourceMappingURL=main.0f656bbb.chunk.js.map